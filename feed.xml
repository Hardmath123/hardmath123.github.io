<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Comfortably Numbered]]></title>
        <description><![CDATA[My blog.]]></description>
        <link>http://hardmath123.github.io</link>
        <image>
            <url>http://hardmath123.github.io/static/avatar.png</url>
            <title>Comfortably Numbered</title>
            <link>http://hardmath123.github.io</link>
        </image>
        <generator>RSS for Node</generator>
        <lastBuildDate>Sun, 31 Jan 2016 18:49:14 GMT</lastBuildDate>
        <atom:link href="http://hardmath123.github.io/feed.xml" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Hardmath123]]></author>
        <language><![CDATA[en]]></language>
        <item>
            <title><![CDATA[Armchair Philosophy]]></title>
            <description><![CDATA[<p>An allegory.</p>


<p>The IKEA Po&auml;ng is perhaps the company’s most comfortable and best-named
product: a chic, springy twist to the classic light armchair. The Po&auml;ng
comes in five or six different color schemes: generally variations on white,
beige, red, and coffee.</p>
<p>But what if it didn’t?</p>
<p>Let’s imagine an alternate universe, where the Po&auml;ng is advertised as a
medium of expression. Let’s imagine a world where the Po&auml;ng seat covers
are made of dye-able canvas. A world where customers are encouraged to decorate
their armchairs to reflect their own personalities.</p>
<p>Sounds like fun, doesn’t it? Well, uh, let’s see what happens. I present to you
an allegory in twelve parts.</p>
<hr>
<p><strong>January.</strong> The concept is first revealed during the keynote at the IKEA
Worldwide Developers Conference. The Twitterverse explodes. <em>The New York
Times</em> says, “What a time to be alive!”.</p>
<p><strong>February.</strong> IKEA sells out within the first 24 hours of sales; customers
waiting in line report being “disappointed, but contently stuffed with
meatballs”. Television commercials begin to feature contemporary artists
decorating their Po&auml;ngs. There are rumors of AMC Theaters planning to
license Po&auml;ngs for their cinemas. BuzzFeed publishes ten of their best
Po&auml;ng-assembling tips and tricks (you won’t <em>believe</em> #4).</p>
<hr>
<p><strong>March.</strong> Almost everyone now owns a Po&auml;ng. A dark blue Po&auml;ng
with the Presidential Seal is spotted in the White House.</p>
<p><strong>April.</strong> One’s Po&auml;ng-decoration becomes a profound statement of his or
her identity. After all, an armchair is where you spend some of your most
important hours. Reading, chatting, watching TV: these are all best done from a
familiar environment that should be optimized for your lifestyle.</p>
<p>A Berkeley establishment begins to sell tie-dyed Po&auml;ng covers.</p>
<hr>
<p><strong>May.</strong> Genres emerge.</p>
<p>There are the loud, skeuomorphic Po&auml;ngs with too much color and design.
These generally belong to young children who decorate their Po&auml;ngs in
Crayola colors.</p>
<p>Then there are the average adults, who choose the most suburban colors they can
find. Navy blue? Perfect. Olive green? Sounds like home.</p>
<p>Finally, there are the artistic adults, who go for a more refined look. They
pick neutral but subtle color schemes with tasteful accents.</p>
<hr>
<p><strong>June.</strong> The Average Adults realize that their Po&auml;ngs look outmoded
compared to the beautiful Po&auml;ngs of the Artistic Adults. Pastel colors are
the “in” thing, according to several popular Po&auml;ng-centered Instagram
accounts.</p>
<p><strong>July.</strong> The development of Po&auml;ng plugins spawns a new industry. Embedded
hardware for Po&auml;ng covers becomes cheap, resulting in increasingly
sophisticated Po&auml;ngs.</p>
<hr>
<p><strong>August.</strong> The genres begin to homogenize into something the Chair Gurus call
the “material design revolution”. A combination of color palettes and design
guidelines assembled by experienced superstar designers guides every new
Po&auml;ng design.</p>
<p>An NPR survey reveals that while over 40% of the US population owns a
Po&auml;ng, only 12% of Po&auml;ng-owners report sitting in their armchairs
regularly.</p>
<hr>
<p><strong>September.</strong> IKEA begins selling readymade Po&auml;ngs designed painstakingly
by expert designers and artists. They even deliver it—assembled—to your
doorstep.  Most people choose to buy the readymade Po&auml;ngs because they are
low-maintenance and don’t require as much effort to set up. They are also
stunningly beautiful, and the experienced designers probably took care of a lot
of corner-cases that you, as an amateur, wouldn’t really think of.</p>
<p><strong>October.</strong> Hand-decorated Po&auml;ngs begin to look pass&eacute;. Many of
them lack essential armchair features such as cupholders and localization
settings.  They also ignore common best practices in the industry. Marketing
professionals say that hand-decorated Po&auml;ngs are a poor business choice
for furnishing your waiting room because they “project an outdated look to
potential customers”.</p>
<p>“Don’t roll your own paint,” preaches one blog post that tops Hacker News.</p>
<p>Google publishes a framework to develop apps for the front end of Po&auml;ngs.
They call it PoAngularJS. The average chair now weighs significantly more than
the average American.</p>
<hr>
<p><strong>November.</strong> IKEA sells one kind of Po&auml;ng now. Customers have occasional
problems with them, but you can find workarounds online. Besides, everything
else is so user-friendly. It’s really just a couple little things that bother
you, like the Wi-Fi crashing every once in a while.</p>
<p>Very few hand-decorated Po&auml;ngs exist, mostly in educational institutions.
Old people complain that “see, them chairs had <em>character</em> in them”, but
they’ve been saying that for centuries.</p>
<hr>
<p><strong>December.</strong> IKEA discontinues the Po&auml;ng. Usage of armchairs is
deprecated in favor of the “one-person couch”, which is a remarkable new piece
of technology destined to revolutionize the way we think about sitting.</p>
<p>Nobody really remembers how to put together an old-fashioned armchair (just
like they don’t remember how to build a gramophone). Some engineers work
together to build their own version of the Po&auml;ng called the LibreChair.
However, it is only used by hardcore carpentry enthusiasts since the manual is
twelve pages long and building it requires you to weave your own cloth.</p>
<hr>
<p><strong>Epilogue.</strong> Let’s talk about customization. The etymology of the word
<em>custom</em> can be <a href="https://en.wiktionary.org/wiki/consuetudo">traced</a> to the
Latin <em>consuetudo</em>, which means “habit”. But it means more than “habit”. It
means “experience”, “tradition”, “convention”, “familiarity”, “companionship”,
“conversation”…  even “love affair”.</p>
<p>And it’s this dichotomy between the <em>individual</em> and the <em>communal</em> that makes
the idea of “customization” (which is so central to hackerdom) paradoxical. Our
identity is as much our own as not; we forfeit our identity to others.</p>
<p>There’s something to be said about having a fortress of solitude. A world which
you control, which you make your own with endless tweaks towards your ideals of
perfection. Programmers don’t need to carve their fortresses out of rocky
cliffs; they can find solace in editors, shells, browsers, and personal
websites.</p>
<p>They key is in <em>customization</em>.</p>
<p>Yet <em>even though</em> we spend hours making our tools “our own” with color schemes,
macros, and key bindings, we <em>still</em> choose to publish our dotfiles as
open-source “projects” on Github. We scarcely bother to read the original
documentation of our software, choosing instead to search for solutions written
already on StackOverflow. We happily hand over our content to the corporate
Cerberus that calls itself Medium. We choose to adhere to style guides written
by people who are not us. We foist upon others screenshots of artistically
themed editors, that are no better than gilded toothbrushes. We steal
boilerplate and eye-candy from others, believing somehow that we’re doing
ourselves favors.</p>
<p>It’s foreign, it’s homogeneous, it’s both beautiful and sickening: like a
fortress made of cotton candy.</p>
]]></description>
            <link>http://hardmath123.github.io/armchair-philosophy.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/armchair-philosophy.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Fri, 29 Jan 2016 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A Moiety of Reminiscence]]></title>
            <description><![CDATA[<p>Fifty ways the web has changed</p>


<blockquote>
<p>I’m not old, but I’m not young either. There are some little details about
the last decade’s websites that bring me a moiety of reminiscence. Some
things have gotten better, some have gotten worse, and some are just
different: but all of them bring back memories of being a curious middle
schooler exploring the secrets of the Web.</p>
<p>Here are fifty things that remind me how far we’ve come and how far we still
have to go.</p>
</blockquote>
<p>When I was young…</p>
<ol>
<li>…you could learn HTML by clicking “view source”.</li>
<li>…you wrote your own CSS, by hand.</li>
<li>…responsive web design was still emerging, and needed copious JavaScript.</li>
<li>…all languages that compiled to JavaScript were listed on Esolangs.org.</li>
<li>…flat design hadn’t taken over. Skeuomorphism was the pretty stuff.</li>
<li>…nobody minded using the browser’s default styles for input elements.</li>
<li>…tables often had black double borders.</li>
<li>…people used the <code>&lt;FONT&gt;</code> element and the <code>BGCOLOR</code> attribute.</li>
<li>…there were two serious libraries: Underscore and MooTools.</li>
<li>…IIFE was a newfangled trend.</li>
<li>…Figuring out which key was pressed was a struggle.</li>
<li>…cross-browser compatibility was harder. Polyfills were cleverer.</li>
<li>…the best GUI editor was Sublime Text. The vim/emacs war was just as bad.</li>
<li>…&ldquo;front-end framework” was synonymous with “jQuery”.</li>
<li>…you could right-click all images to save them.</li>
<li>…many people wrote HTML elements and attributes in ALL CAPS.</li>
<li>…people learned web programming from w3schools.</li>
<li>…you either proudly supported IE or proudly didn’t.</li>
<li>…too many sites had nested pull-down-on-hover menus.</li>
<li>…links you’d already clicked appeared purple on most sites.</li>
<li>…people started serious projects in PHP. On purpose.</li>
<li>…your CSS used floats and event handlers, not flexbox or <code>@media</code> queries.</li>
<li>…only Google minified and obfuscated JavaScript.</li>
<li>…colors were bolder, undiluted by today’s weak (uh, subtle) pastel colors.</li>
<li>…xkcd references were a lot 1337er.</li>
<li>…userscripts and userstyles were a much bigger deal.</li>
<li>…URLs had more question marks and ampersands and file extensions in them.</li>
<li>…the OSX “close”, “minimize”, and “maximize” buttons were bigger.</li>
<li>…there was no Node. Using <code>jsc</code> for command-line JS was a nifty hack.</li>
<li>…long polling was a thing. No WebSockets.</li>
<li>…developer tools were basically just ‘inspect element’ and a JS console.</li>
<li>…your average developer knew how to manipulate the DOM without frameworks.</li>
<li>…the hot tech projects had .com domains, not .io domains.</li>
<li>…people set the <code>LANGUAGE</code> attribute on their <code>&lt;script&gt;</code> tags.</li>
<li>…&ldquo;mobile site” meant “annoying overlay prompting to install app”.</li>
<li>…we used BBCode instead of Markdown.</li>
<li>…you couldn’t search from the Safari address bar. There was a search bar.</li>
<li>…there was more URL <em>before</em> the <code>#</code> than <em>after</em>.</li>
<li>…we used screenshots of LaTeX documents for math; there was no MathJaX.</li>
<li>…gradients. Enough said.</li>
<li>…every website had some sort of sidebar.</li>
<li>…rounded rectangles might have outnumbered cornered rectangles.</li>
<li>…DOCTYPEs were gnarly beasts longer than Gettysburg Address.</li>
<li>…the Google logo had serifs and a shadow. Google Doodles didn’t move.</li>
<li>…most sites actually had <code>www</code> in their canonical URLs.</li>
<li>…plenty of respectable projects had homepages on SourceForge.</li>
<li>…image-based view counters were pretty hot.</li>
<li>…everything was beginning to look like Bootstrap.</li>
<li>…there were a lot more pop-ups.</li>
<li>…table layouts were beginning to go out of fashion.</li>
</ol>
]]></description>
            <link>http://hardmath123.github.io/moiety-of-reminiscence.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/moiety-of-reminiscence.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sat, 23 Jan 2016 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Meet the Robinson: 4]]></title>
            <description><![CDATA[<p>Unification, equality and <s>harmony</s> heuristics: the grand finale.</p>


<p>Welcome to the final installment of <em>Meet the Robinson</em>.</p>
<p>We left off <a href="meet-the-robinson-3.html">last time</a> with a complete but slow
theorem-proving algorithm for first-order logic, as well as a promise of a
faster algorithm. The faster algorithm depends on a concept called
“unification”, so let’s talk about that first.</p>
<ul>
<li>No, this has nothing to do with Otto von Bismarck. Nevertheless, try to come
up with a good Germany pun here if you can.</li>
</ul>
<hr>
<p>Propositional resolution involved finding a pair of identical propositions in
opposite polarities (one in “positive” and one in “negated” polarity). In
first-order logic, though, we can do better. We can find pairs that have the
same “shape”.</p>
<ul>
<li>Explain how <code>Wrote[X, hamlet()]</code> and <code>Wrote[shakespeare(), Y]</code> are the same
“shape”.</li>
<li>Come up with a rigorous definition of “same shape” which involves replacing
some (universally quantified) variables to make the predicates identical.</li>
</ul>
<p>The process of substituting variables to make two predicates identical is
called <em>unification</em>. If you’ve worked with Hindley-Milner type inference, you
know what unification is—it’s the stage where you figure out what the type
variables you spawned expand to.</p>
<p>The unification algorithm isn’t hard to implement at all. It tells you whether
two predicates unify or not, and if they do unify, it comes up with a
substitution for each variable that can be applied to make them identical.
Substitutions replace a variable with either a function or another variable.
People talk about unification in terms of “solving equations” of functions and
variables, if that makes more sense to you.</p>
<p>In particular, unification algorithms come up with the <em>most general</em> such
unifier, so variables that don’t need to be substituted are left as-is.</p>
<ul>
<li>Which variables are left unsubstituted in the unification of <code>P[X, Y]</code> and
<code>P[X, f(Z)]</code>?</li>
</ul>
<p>Unification algorithms are covered in detail in
<a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-29.html#%_sec_4.4.2">SICP</a>.
Most people use the algorithm by Martelli and Montanari. Peter Norvig has
published a correction to the algorithm. His paper actually has a very succinct
and clear description of the algorithm, and can be found on his site
<a href="http://norvig.com/unify-bug.pdf">here</a>.</p>
<ul>
<li>Explain why <code>P[X]</code> and <code>P[f(X)]</code> don’t unify (why do we need the “occurs
check”?). Come up with a way to relate this to (1) the Y combinator, and (2)
finding the roots of a polynomial.</li>
</ul>
<hr>
<p>And now back to theorem-proving.</p>
<p>Unification allowed Robinson to prove the <em>lifting lemma</em>, which says that if
we have a valid resolution step at the propositional level (with ground
clauses), then we <em>must</em> have a valid resolution at the first-order level. For
example, we can unify <code>P[a(), b()]</code> and &not;<code>P[a(), b()]</code>. Since the former is
a ground instance of <code>P[X, Y]</code> and the latter is an instance of &not;<code>P[a(),
Y]</code>, we deduce that there must be a resolvent of <code>P[X, Y]</code> and &not;<code>P[a(),
Y]</code>. One such resolvent is <code>P[a(), Y]</code>.</p>
<p>The lifting lemma also guarantees that the resolvent of the ground instances is
an instance of the resolvent of the first-order clauses. In this example, note
that <code>P[a(), b()]</code> is an instance of <code>P[a(), Y]</code> because if you substitute
<code>b()</code> for <code>Y</code> in the latter you get the former.</p>
<ul>
<li>Use the lifting lemma to show that <code>P[a(), b(X), Z]</code> and &not;<code>P[X, b(Y),
c(X)]</code> have a resolvent. Find the ground instance and the first-order resolvent
and show that the ground instance is an instance of the first-order resolvent.</li>
<li>Convince yourself the lifting lemma is true using what you know about
unification.</li>
</ul>
<p>The lifting lemma lets us “lift” propositional resolution to first-order
resolution. Instead of checking if two terms are equal as in propositional
resolution, we check if they unify, and if they do, we apply the substitution
to the resolvent. Thus, we end up “iteratively” building up the ground instance
at each resolution step. This is much more efficient than the Davis-Putnam
algorithm, which had to guess the ground instance out of the blue.</p>
<p>Here’s an example. Suppose we had (<code>P[a(), Y]</code> &or; &not; <code>A[X]</code>) and (<code>A[X]</code>
&or; &not;<code>P[X, b()]</code>). First, we note that <code>P[a(), Y]</code> and <code>P[X, b()]</code> appear
in opposite polarities in the two clauses, and that they unify. The
substitution is <code>X</code> becomes <code>a()</code> and <code>Y</code> becomes <code>b()</code>. Applying this
substition yields (<code>P[a(), b()]</code> &or; &not; <code>A[a()]</code>) and (<code>A[a()]</code> &or;
&not;<code>P[a(), b()]</code>). Resolving out that term, we have <code>A[a()]</code> and
&not;<code>A[a()]</code> which clearly resolve to the empty clause, which completes the
proof.</p>
<ul>
<li>Use first-order resolution to prove that if (&forall; <code>X</code>) <code>P[X]</code> then
(&exist; <code>Y</code>) <code>P[Y]</code>. Then, translate your proof to English.</li>
<li>If we try to prove something that is false, then the set of sentences
(knowledge base and negated goal) is satisfiable—it is impossible to find a
resolution-style contradiction because there are no contradiction. In this
case, is the resolution-refutation procedure guaranteed to terminate? What
about if we were still using propositional logic?</li>
</ul>
<p>Hilbert’s <em>Entscheidungsproblem</em>, posed in 1928, asked whether there was an
algorithm that would tell you whether a first-order set of sentences was valid
or not (he believed that there was!). Alonzo Church used the lambda calculus to
prove that there was not, in fact, such an algorithm. That same year, Turing
used Turing machines to prove the same thing by reducing the halting problem to
the Entscheidungsproblem. That is, they found a way to encode programs as
statements in first-order logic such that asking whether the statements are
provable is the same as asking whether the programs terminate.</p>
<ul>
<li>Say “Entscheidungsproblem” out loud three times.</li>
<li>Very carefully clarify the difference between G&ouml;del’s Completeness
Theorem and the Church-Turing Thesis (i.e. answer to Entscheidungsproblem).</li>
<li>Look up the approximate timeframe of these discoveries. Then, look up when
the first Turing complete computer was built. Peter Landin was one of the first
people to realize that the lambda-calculus was useful in computer
programming—over thirty years after Church first posed the lambda-calculus.</li>
<li>Give two reasons why a lot of information on these subjects can be found on
online philosophy encyclopedias.</li>
</ul>
<hr>
<p>A classic logic puzzle goes as follows:</p>
<blockquote>
<p>Anyone who owns a dog is an animal lover. No animal lovers kill cats. Either
Jack (who owns a dog) or Curiosity killed the cat. Who killed the cat?</p>
</blockquote>
<p>This isn’t a “proof” as such, it’s a question. It turns out that the same
tricks work for answering questions (or “querying”).</p>
<p>Suppose we are asking for an <code>X</code> such that <code>Killed[X, cat()]</code>. If we were
trying to prove something, we would negate our goal and add it to the knowledge
base. Since we’re querying, we need to make a small modification. We add this
sentence to the knowledge base: <code>Answer[X]</code> &or; &not;<code>Killed[X, cat()]</code>. Now,
rather than looking for empty clauses, we look for clauses which only contain
one predicate, which is <code>Answer[*]</code>.</p>
<p>Once we extract the <code>X</code> from the <code>Answer[*]</code> predicate, it’s easy to see why
it must be the answer. Simply re-run the theorem prover asking it to prove that
<code>Killed[X, cat()]</code> (but substitute in the actual value of <code>X</code> you got). Since
the proof is basically the same as above (ignoring the <code>Answer[*]</code> predicate),
it must succeed. So, we know that our answer must be “correct” (in the sense
that it is consistent with the knowledge base).</p>
<p>Let’s work through a small example. Suppose we have <code>Wet[water()]</code> and we want
to query for an <code>X</code> such that <code>Wet[X]</code>. We construct the answer clause
<code>Answer[X]</code> &or; &not;<code>Wet[X]</code>. Then, we resolve against <code>Wet[water()]</code>,
unifying so that <code>X</code> is <code>water()</code> to get <code>Answer[water()]</code>.</p>
<ul>
<li>Could you have multiple “correct” answers? Come up with a knowledge base
where a query has multiple possible correct responses. How do you know which
response the algorithm will output?</li>
<li>Solve the Curiosity puzzle above using first-order resolution with an answer
predicate.</li>
<li>Here’s another such puzzle:<blockquote>
<p>Animal lovers love all animals. At least one person loves every animal lover.
Nobody loves a person who has killed an animal. Either Jack (who loves all
animals) or Curiosity killed Tuna, who is an animal. Who killed Tuna?</p>
</blockquote>
</li>
<li>Reason through it in English and figure out who killed Tuna. Write down your
reasoning somewhere.</li>
<li>Translate each fact into first-order logic.</li>
<li>Resolution-refute to find out who killed Tuna.</li>
<li>Translate your refutation procedure into English.</li>
<li>Compare this reasoning with the one you did earlier.</li>
</ul>
<hr>
<p>All texts on resolution theorem proving talk about heuristics, so I guess I
will too. But I won’t spend too much time on it. There are a few ways to be
“clever” about how to pick which clauses to try to resolve. The first one is
<em>unit preference</em>, which simply says clauses that have a single predicate are
a good choice because if the resolution <em>does</em> work, you’re done. You probably
use this heuristic without even knowing it: you’re likelier to try to resolve
shorter clauses because it “feels” like a reasonable choice.</p>
<p>The second one is the <em>set of support</em>, which says that you can divide up your
clauses into the axioms (which are supposed to be consistent within themselves)
and the stuff to be proved (which should have a contradiction with the axioms).
Then, you make sure you always use a sentence from the latter set when you
resolve, because if you use two statements from the set of axioms, you won’t
get a contradiction because they’re supposed to be consistent among themselves.</p>
<p>In other words, this is the heuristic form of “if you’re stuck, check to see if
you have used all the information in the problem”. If you’re too aggressive
with the set-of-support strategy, you might miss an important resolution and so
the algorithm might become incomplete. Use responsibly at your own peril.</p>
<p>The last is called <em>subsumption</em>, which is basically spring cleaning. Every
once in a while, clean out duplicate clauses. Be clever, so if one clause
“subsumes” another (i.e. one is a ground instance of a more general clause)
then delete the more specific one. Fewer clauses means faster resolution, but
subsumption itself can get kind of slow.</p>
<ul>
<li>How can you detect if one clause subsumes another? Come up with a specific,
rigorous definition.</li>
</ul>
<p>And that’s it. I don’t know why this is such a big deal, but these three things
always show up on every piece of literature on resolution-refutation theorem
proving. Maybe it’s because Russell and Norvig covered them in their textbook
and everyone else thought they were really important.</p>
<hr>
<p>One last thing we need to talk about: equality.</p>
<blockquote>
<p>Euclid’s first common notion is this: Things which are equal to the same
things are equal to each other. That’s a rule of mathematical reasoning and
its true because it works - has done and always will do. In his book Euclid
says this is self evident. You see there it is even in that 2000 year old
book of mechanical law it is the self evident truth that things which are
equal to the same things are equal to each other.
– <em>Lincoln</em> (2012)</p>
</blockquote>
<p>Our theorem prover doesn’t support equality out-of-the-box. That is, we can’t
tell it that <code>father(father(X))</code> is the same as <code>grandfather(X)</code>, and so those
two functions are interchangeable.</p>
<p>We can, of course, write our own equality axioms (as we did for the Peano
arithmetic above).</p>
<p>The issue is that we then need to also define the “replacement” axiom for every
single predicate: <code>Equal[A, B]</code>&and;<code>P[A]</code> &rArr; <code>P[B]</code>.</p>
<ul>
<li>Relate this to why we can’t do induction in first-order logic.</li>
</ul>
<p>The solution is to use the <em>paramodulation rule</em>, which is an additional
inference rule just like resolution is. It says that if you have a clause with
a term that contains some subterm <code>t</code> and you also have a clause that contains
<code>T</code>=<code>U</code> where <code>T</code> and <code>t</code> unify, then you can replace <code>t</code> with <code>U</code>, apply the
substitution from the unification to <em>both</em> clauses, and then join them
together, taking out the equality statement.</p>
<p>For example, given <code>P[g(f(X))]</code> &or; <code>Q[X]</code> and <code>f(g(b()))</code>=<code>a()</code> &or;
<code>R[g(c)]</code>, we can derive <code>P[g(a())]</code> &or; <code>Q[g(b())]]</code> &or; <code>R[g(c())]</code>.</p>
<ul>
<li>What was the unification here? What was the resultant substitution?</li>
<li>Convince yourself that the paramodulation rule is true.</li>
<li>Write the paramodulation rule in “fraction form”.</li>
<li>Do we still need the equality axioms (which we talked about when discussing
the Peano axioms)?</li>
</ul>
<p>In his thesis, Herbrand showed that you don’t need equality axioms to prove
theorems if your knowledge base doesn’t have any equality statements in it.</p>
<hr>
<p>…and that’s it. That’s actually all there is. Combining resolution,
unification, and paramodulation let us build the theorem prover that Robinson
used to prove the Robbins conjecture. You can check out my own implementation
<a href="https://github.com/Hardmath123/eddie">here</a>. It’s lovingly named Eddie, after
the shipboard computer aboard the <em>Heart of Gold</em> which froze when asked for a
cup of tea by Arthur Dent.</p>
<hr>
<p><strong>Epilogue:</strong> If you’ve stayed with me on this journey, you’ve learned the
basics of formal logic, model theory, and proof theory. You’ve explored several
famous theorems in each field and seen (human-generated!) proofs of them.
You’ve discovered how math is rigorized. And, finally, you’ve seen some of the
rich history of logic and how it connects not just to various branches of math,
but also to subjects as abstract as philosophy and as practical as computer
science.</p>
<ul>
<li>In what “universe” did the proofs covered in this series live? For example,
can the proof of the propositional compactness theorem be encoded in
first-order logic? Is it even legal to talk about a logic within that logic? Or
is it a bad case of “turtles all the way down”? Do we need to take something on
faith at some point, or are there fundamental mathematical truths somewhere?
What does this have to do with <em>cogito ergo sum</em>?</li>
</ul>
<p>Yet, in a way, this isn’t about having a machine that can prove theorems. Like
many things in life—marathons, pie-eating contests, and bank robberies—I
think the pleasure is more in knowing that you <em>can</em> do it than in actually
doing it.</p>
<p>Why? Because contrary to Rényi, mathematics is not about turning coffee into
theorems. An oracle that just tells you whether or not a statement is true is
useless; the real beauty is in understanding <em>why</em> it’s true. A world where
math is an endless stream of abstract, intuition-less symbol-shunting is bleak.
Resolution-refutation proofs have no insight or motivation. They are completely
mechanical.</p>
<p>But then again, maybe that’s exactly what we were going for.</p>
<hr>
<p>I’ve admittedly been extremely lazy about citing my sources when writing these
articles. I have, however, diligently kept a list of links to resources I found
helpful. It feels appropriate to give them the last word here, so, in no
particular order, here they are:</p>
<ul>
<li><a href="http://www.ki.informatik.uni-frankfurt.de/persons/panitz/paper/russian.ps">http://www.ki.informatik.uni-frankfurt.de/persons/panitz/paper/russian.ps</a> (on
Haskell, a “Russian Room” analogy)</li>
<li><a href="http://src.seereason.com/chiou-prover/report.ps">http://src.seereason.com/chiou-prover/report.ps</a> (more Haskell)</li>
<li><a href="http://www.cs.nott.ac.uk/~led/papers/led_bsc_dissertation.pdf">http://www.cs.nott.ac.uk/~led/papers/led_bsc_dissertation.pdf</a> (yet more
Haskell)</li>
<li><a href="http://www.cs.toronto.edu/~sheila/384/w11/Lectures/csc384w11-KR-tutorial.pdf">http://www.cs.toronto.edu/~sheila/384/w11/Lectures/csc384w11-KR-tutorial.pdf</a>
(on Skolemization and answering queries)</li>
<li><a href="http://www.mathcs.duq.edu/simon/Fall04/notes-6-20/node3.html">http://www.mathcs.duq.edu/simon/Fall04/notes-6-20/node3.html</a> (inductive
proof of completeness of propositional resolution)</li>
<li><a href="http://www.doc.ic.ac.uk/~sgc/teaching/pre2012/v231/lecture9.html">http://www.doc.ic.ac.uk/~sgc/teaching/pre2012/v231/lecture9.html</a> (an inside
look at the people of automated theorem-proving; change the “9” in the URL for
more information on AI)</li>
<li><a href="http://rmarcus.info/blog/2015/09/02/vulcan.html">http://rmarcus.info/blog/2015/09/02/vulcan.html</a> (Vulcan: the post that
started it all for me)</li>
<li><a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-825-techniques-in-artificial-intelligence-sma-5504-fall-2002/lecture-notes/Lecture9Final.pdf">http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-825-techniques-in-artificial-intelligence-sma-5504-fall-2002/lecture-notes/Lecture9Final.pdf</a> (on
paramodulation and semidecidability)</li>
<li><a href="https://books.google.com/books?id=xwBDylHhJhYC&amp;pg=PA42&amp;lpg=PA42&amp;dq=demodulation+rule&amp;source=bl&amp;ots=WSHLneBzT0&amp;sig=L-EuivNrxiG5GQjRRO40kiARO7o&amp;hl=en&amp;sa=X&amp;ved=0CEYQ6AEwBmoVChMIydKL19K4yAIVCd9jCh1F6A9T#v=onepage&amp;q=demodulation%20rule&amp;f=false">https://books.google.com/books?id=xwBDylHhJhYC&amp;pg=PA42&amp;lpg=PA42&amp;dq=demodulation+rule&amp;source=bl&amp;ots=WSHLneBzT0&amp;sig=L-EuivNrxiG5GQjRRO40kiARO7o&amp;hl=en&amp;sa=X&amp;ved=0CEYQ6AEwBmoVChMIydKL19K4yAIVCd9jCh1F6A9T#v=onepage&amp;q=demodulation%20rule&amp;f=false</a> (more paramodulation)</li>
<li><a href="http://www.cs.cmu.edu/~fp/courses/99-atp/lectures/lecture29.html">http://www.cs.cmu.edu/~fp/courses/99-atp/lectures/lecture29.html</a> (yet more on
paramodulation)</li>
<li><a href="http://www.sciencedirect.com/science/book/9780444508133">http://www.sciencedirect.com/science/book/9780444508133</a> (a book)</li>
<li><a href="https://drive.google.com/file/d/0B3DOH8_Gko0GRlRLek9ZZzlyOFk/edit">https://drive.google.com/file/d/0B3DOH8_Gko0GRlRLek9ZZzlyOFk/edit</a> (another
book)</li>
<li><a href="http://profs.sci.univr.it/~farinelli/courses/ar/slides/paramodulation.pdf">http://profs.sci.univr.it/~farinelli/courses/ar/slides/paramodulation.pdf</a>
(even more paramodulation)</li>
<li><a href="http://www.cs.toronto.edu/~toni/Courses/438/Mynotes/page39.pdf">http://www.cs.toronto.edu/~toni/Courses/438/Mynotes/page39.pdf</a> (notes on
Herbrand’s theorem)</li>
<li><a href="http://costa.ls.fi.upm.es/~damiano/teaching/emcl/cl_08_09/slides/05herbrand.pdf">http://costa.ls.fi.upm.es/~damiano/teaching/emcl/cl_08_09/slides/05herbrand.pdf</a>
(semantic trees and Herbrand’s theorem)</li>
<li><a href="http://people.mpi-inf.mpg.de/~sofronie/lecture-ar-09/slides/lecture-4-june.pdf">http://people.mpi-inf.mpg.de/~sofronie/lecture-ar-09/slides/lecture-4-june.pdf</a>
(Herbrand’s theorem and the lifting lemma)</li>
<li><a href="https://en.wikibooks.org/wiki/Logic_for_Computer_Scientists/Predicate_Logic/Resolution#Lemma_5_.28Lifting_lemma.29">https://en.wikibooks.org/wiki/Logic_for_Computer_Scientists/Predicate_Logic/Resolution#Lemma_5_.28Lifting_lemma.29</a> (on the lifting lemma)</li>
<li><a href="http://lara.epfl.ch/w/sav08:compactness_theorem">http://lara.epfl.ch/w/sav08:compactness_theorem</a> (nice proof of propositional
compactness)</li>
<li><a href="https://terrytao.wordpress.com/2009/04/10/the-completeness-and-compactness-theorems-of-first-order-logic/">https://terrytao.wordpress.com/2009/04/10/the-completeness-and-compactness-theorems-of-first-order-logic/</a> (on first-order completeness)</li>
<li><a href="http://aima.cs.berkeley.edu">http://aima.cs.berkeley.edu</a> (Russell and Norvig’s textbook <em>Artificial
Intelligence: A Modern Approach</em>)</li>
</ul>
]]></description>
            <link>http://hardmath123.github.io/meet-the-robinson-4.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/meet-the-robinson-4.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Mon, 11 Jan 2016 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Meet the Robinson: 3]]></title>
            <description><![CDATA[<p>In which we tame the infinite.</p>


<p>Welcome to today’s edition of <em>Meet the Robinson</em>.</p>
<p>We left off the <a href="meet-the-robinson-2.html">previous article</a> wondering if
there’s any way to handle an infinite number of propositions with our
resolution-refutation scheme. It turns out that there is—we can “tame the
infinite” using <strong>first-order logic</strong>.</p>
<p>First-order logic is based on two ideas: predicates and quantifiers.</p>
<p><em>Predicates</em> are just what your English teacher said they were, but (like most
things) they make more sense when you think about them in terms of computer
science. Predicates questions you can ask about the subject of a sentence.
They are, in a way, functions that return boolean values.</p>
<p>Here’s an example. The predicate of <em>“Eeyore is feeling blue.”</em> is <em>“is feeling
blue”</em>. We can use this to ask the question <em>“Is Eeyore feeling blue?”</em>. The
boolean function version is the function that takes an input (such as “Eeyore”)
and tells you whether that input is feeling blue or not.</p>
<ul>
<li>You try it! What is the predicate in the sentence <em>“I walk this empty street
on the Boulevard of Broken Dreams.”</em>?</li>
<li>Use the predicate to ask a question.</li>
</ul>
<p>The standard notation for predicates is, unfortunately, similar to that for
functions: we would write <code>isFeelingBlue(Eeyore)</code> to denote that predicate.
This turns out to cause some confusion, because first-order logic also has
<em>real</em> functions (more on that later). In this article, I’m going to use square
brackets for predicates and round ones for functions: <code>isFeelingBlue[Eeyore]</code>.
<em>Nobody else does this,</em> so don’t blame me if this causes you any issues later
on in life. You have been warned.</p>
<p>Predicates are the propositions of first-order logic. So, we can join them just
like we joined propositions earlier: <code>smart[Alice]</code> &and; <code>funny[Alice]</code>. You
can have “empty” predicates such as <code>maryHadALittleLamb[]</code>, which correspond
directly to propositions. Predicates can also have multiple inputs, such as
<code>killed[Macbeth, Duncan]</code>.</p>
<ul>
<li>Show that everything we have so far can be modeled purely in propositional
logic, and that we can therefore reduce such sentences to CNF.</li>
</ul>
<p>Predicates can operate on either “concrete” inputs like “Eeyore” (which we call
“constants”) or “variable” inputs. Variable inputs are <em>quantified
generalizations</em>, which means that when you use a variable, you say that that
variable can be replaced by any constant and the statement would hold.</p>
<p>For example, the sentence “&not; (&forall; <code>X</code>) (<code>gold[X]</code> &rArr;
<code>glitters[X]</code>)” is read as “it is not true that all that is gold must glitter”.
The symbol “&forall;” is read as “for all”, and it <em>binds</em> the variable X. Why
do we need it? Depending on where the binding quantifier is placed, the
sentence can actually have a different meaning.</p>
<ul>
<li>Explain how the statement “(&forall; <code>X</code>) &not; (<code>gold[X]</code> &rArr;
<code>glitters[X]</code>)” has a subtly different meaning from what we had above.</li>
<li>Which of the following is true: “Not all fingers are thumbs.” and “All
fingers are not thumbs.”?</li>
<li>Why does the placement of the quantifier matter?</li>
<li>Write a sentence in first-order logic that means “All fingers are thumbs” and
one that means “Not all thumbs are fingers”.</li>
</ul>
<hr>
<p>The best way to think about quantifiers is not in terms of variables and
substitutions. Think about quantifiers as a way to select a subset of
predicates from an infinite set of predicates, and then apply some operation on
them. For example, “(&forall; <code>X</code>) <code>Foo[X]</code>“ selects all predicates that “look
like” <code>Foo[_]</code> and then “ands” them together (we’ll revisit the idea of “looks
like” in more detail later).</p>
<p>This isn’t a rigorous definition, really, mainly because it’s kind of tricky to
talk about “and-ing” together an infinite number of statements (why infinite?).
You also need to introduce the concept of a “domain of discourse”, which
basically means “what can I fill into the hole?”.</p>
<ul>
<li>Explain why the “and-ing” together means the same as “for all”.</li>
<li>What would be the English translation if we “or-ed” them together instead of
“and-ing” them together? We’ll revisit this question later.</li>
</ul>
<hr>
<p>First-order logic also has <em>functions</em>, which have a misleading name because
you don’t want to think of them as functions. Functions in first-order logic
are really more like prepositional phrases. For instance, <code>father(Luke)</code> means
“the father <em>of Luke</em>&rdquo;. You don’t have to “define” these functions. They
are just ways of transforming data by adding structure.</p>
<p>Functions can be used anywhere variables and concrete values can. Together,
functions, variables, and constants are called <em>terms</em>.</p>
<ul>
<li>Explain how functions that take no inputs (niladic functions) are the same
as constants.</li>
</ul>
<p>And example using functions is “(&forall; <code>X</code>) <code>winner[X]</code> &rArr;
<code>proud[parents(X)]</code>.”</p>
<ul>
<li>Name one statement you can conclude from the above given that
<code>proud[parents(parents(Amy))]]</code>.</li>
</ul>
<hr>
<p>First-order logic is pretty powerful. We can express a great deal in it. To let
it sink in, we’re going to quickly describe arithmetic in first-order logic,
using the <em>Dedekind-Peano axioms</em>:</p>
<ol>
<li>“<code>isNaturalNumber[zero()]</code>&rdquo; says that 0 is a natural number.</li>
<li>The next three axioms describe what “equality” means (we will return to this
later):<ul>
<li>&forall; <code>X</code> <code>Equal[X, X]</code></li>
<li>&forall; <code>X</code> &forall; <code>Y</code> &forall; <code>Z</code> (<code>Equal[X, Y]</code> &and; <code>Equal[Y, Z]</code>)
&rArr; <code>Equal[X, Z]</code></li>
<li>&forall; <code>X</code> &forall; <code>Y</code> <code>Equal[X, Y]</code> &rArr; <code>Equal[Y, X]</code></li>
<li>(These axioms are “reflexivity”, “transitivity”, and “symmetry”,
respectively. Techincally, these aren’t exactly right because these
axioms are meant to only hold if each variable <code>isNaturalNumber</code>. But
this version is simpler.)</li>
</ul>
</li>
<li>“&forall; <code>X</code> <code>isNaturalNumber[X]</code> &rArr;
<code>isNaturalNumber[Successor(X)]</code>&rdquo; says that the successor of all natural
numbers is also a natural number.</li>
<li>“&forall; <code>X</code> &forall; <code>Y</code> <code>Equal[X, Y]</code> &hArr; <code>Equal[Successor(X),
Successor(Y)]</code>&rdquo; says that the successor function is injective.</li>
<li>“&forall; <code>X</code> &not;<code>Equal[Successor(X), zero()]</code>&rdquo; says that no natural
number is before zero.</li>
</ol>
<p>Peano had one more axiom, which represents <em>induction</em>.</p>
<ul>
<li>Explain why you can’t do induction in first-order logic because you can’t
quantify <em>predicates</em> (there <em>is</em> a kind of logic, called second-order logic,
that allows you to quantify over predicates…). The Peano Axioms without
induction are called the “Robinson arithmetic”.</li>
<li>To deal with such axioms, we use <em>axiom schemas</em>, which you can think of as
“preprocessors” that generate an axiom for each predicate. If you don’t need
any axiom schemas, your logic is <em>finitely axiomatizable</em>.</li>
<li>Axiomatize addition within the Peano axioms.</li>
</ul>
<p>Perhaps you’re unimpressed with this. Another powerful result of first-order
logic is Tarski’s axiomatization of plane geometry (elementary Euclidean
geometry). Using a bit of magic (called “quantifier elimination” which does
exactly what you guessed), he showed that there exists an algorithm that can
prove any statement about plane geometry.</p>
<p>This <em>should</em> be impressive, because humanity has been tinkering with geometry
for at least two thousand years now. Suddenly being given a magic algorithm to
answer any question you’d like about geometry is amazing.</p>
<p>(What’s the catch, you ask? The algorithm is <em>slow</em>. Impractically slow. As in,
two-raised-to-two-raised-to-n slow, also known as
will-not-terminate-in-your-lifetime.)</p>
<hr>
<p>If you’ve read SICP (<em>The Structure and Interpretation of Computer Programs</em> by
Abelson and Sussman, <a href="https://mitpress.mit.edu/sicp/full-text/book/book.html">free
online</a> and often
called the “Wizard Book”), you might be having flashbacks to their section on
logic programming: <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-29.html#%_sec_4.4">section
4.4</a>.
This section describes a <em>logic</em> programming language, like Prolog. Prolog-like
languages operate on first-order logic and allow you to ask questions.</p>
<p>Here’s an example of a rule in Prolog:</p>
<pre><code>male(charles).
parent(charles, martha).
parent(martha, agnes).
grandfather(X,Y) :- male(X),
                    parent(X,Somebody),
                    parent(Somebody,Y).
</code></pre><p>Prolog allows you to then make queries such as <code>grandfather(charles, X)</code>, and
Prolog would go along and discovered that <code>X = agnes</code> is a valid solution.
This should remind you of database querying and nondeterministic programming
and a whole host of exciting ideas which are fun to explore. </p>
<ul>
<li>Translate the above Prolog program to first-order logic statements (you may
need to read a bit about Prolog syntax).</li>
</ul>
<hr>
<p>Now that you’re a first-order logic expert…</p>
<p>Remember G&ouml;del’s Completeness Theorem? It said that all true statements
are provable in propositional logic. Turns out I lied. It’s doesn’t just hold
for propositional logic; it also holds for first-order logic. The rest of this
post will explain how that works.</p>
<p>“But hang on!” you say, “We just saw some arithmetic modeled in first-order
logic though, and arithmetic implies G&ouml;del’s Incompleteness Theorem. How
can the Completeness and Incompleteness theorems live together peacefully?”</p>
<p>Good question. Turns out there are models besides the natural numbers that
satisfy the Peano Axioms, and so there are statements that are undecidable
because their truth value depends on which model is being considered. In other
words, the Completeness theorem applies only to sentences that are
<em>necessarily</em> true, while the Incompleteness theorem applies to sentences that
could be either true <em>or</em> false. Don’t let the related names confuse you.</p>
<p>We haven’t talked about proofs in first-order logic yet. For propositional
logic, our proofs had two components: reducing to CNF and resolution. It turns
out that we can extend each of these components to first-order logic.</p>
<p>The conversion of first-order logic sentences to CNF should be simple enough.
The only real complication comes from quantifiers.</p>
<ul>
<li>Recall the steps to convert a propositional logic sentence to CNF.</li>
<li>Explain how quantifiers are only an issue in the part where you move negation
inwards.</li>
<li>Extend De Morgan’s laws to support quantifiers by introducing a new
quantifier:<ul>
<li>What does &not; &forall; <code>X</code> <code>P[X]</code> really mean? What does “not
everybody” went to the dance mean?</li>
<li>Explain how &not; &forall; <code>X</code> <code>P[X]</code> is equivalent to saying that there
exists an <code>X</code> such that &not; <code>P[X]</code>.</li>
<li>We write “there exists and <code>X</code> such that <code>P[X]</code> holds” as “(&exist; <code>X</code>)
<code>P[X]</code>&rdquo; Think back to above when we thought of &forall; as
“and-ing” together everything that matches a pattern. Explain how &exist;
is like “or-ing” them together.</li>
<li>What is &not;(&exist; <code>X</code>) <code>P[X]</code> in terms of De Morgan’s Laws?</li>
</ul>
</li>
<li>Show that after the De Morgan’s law step, you can safely pull all the
quantifiers to the very outside of the sentence. That is, “<code>A[]</code> &and;
(&forall; <code>X</code>) <code>B[X]</code>&rdquo; is equivalent to “(&forall; <code>X</code>) <code>A[]</code> &and;
<code>B[X]</code>&rdquo;.</li>
<li>Show that you need to be careful if you have naming conflicts if the same
variable is quantified in different places in the same sentence.</li>
</ul>
<p>There’s a nice little trick that lets us get rid of all the existential
quantifiers (&exist;). Once the quantifiers have been moved outside, you can
replace all instances of existentially quantified variables with a constant!</p>
<ul>
<li>Show that “&exist;<code>X</code> <code>P[X]</code>&rdquo; is equivalent to “<code>P[x()]</code>&rdquo;,
assuming the function <code>x()</code> isn’t used anywhere else.</li>
<li>What if you have “&forall;<code>X</code> &exist;<code>Y</code> <code>P[Y]</code>&rdquo;? Show that the right
thing to do is “&forall;<code>X</code> <code>P[y(X)]</code>&rdquo; instead of “&forall;<code>X</code>
<code>P[y()]</code>&rdquo;.  What is the difference between these two sentences?</li>
</ul>
<p>This process is called <em>Skolemization</em> (or, sometimes, <em>Skolemnization</em>). The
functions are called <em>Skolem functions</em> (some textbooks also say “Skolem
constants”, but we know that constants are just special functions!).</p>
<ul>
<li>Explain where in the CNF conversion procedure Skolemization is most
appropriate.</li>
<li>Write Skolemization as a rule of inference using the “fraction” notation.</li>
<li>Explain how we can drop the universal quantifiers (&forall;) after
Skolemization and implicitly have all variables be universally quantified. From
here on out, all variables will be implicitly universally quantified. All
constants will be written as niladic functions. So <code>P[X, f()]</code> is a predicate
applied to a universally-quantified variable <code>X</code> and a constant <code>f</code>.</li>
</ul>
<p>Sentences in this final form are said to be in <em>prenex form</em>.</p>
<hr>
<p>Let’s talk about <em>Herbrand’s Theorem</em>, which states that a sentence is
unsatisfiable in first-order logic if and only if there is a finite subset of
ground instances that is unsatisfiable in propositional logic.</p>
<p>A <em>ground instance</em> is simply a version of a sentence where all variables have
been substituted so there are no variables left. For example, <code>P[a()]</code> is a
ground instance of <code>P[X]</code>.</p>
<ul>
<li>What is a ground instance of <code>P[a(), b(X, Y), Z]</code>?</li>
<li>Show that a ground instance is “basically a proposition” in propositional
logic.</li>
</ul>
<p>In other words, if you replace all variables with valid substitutions (“valid”
as in <code>X</code> has the same substitution everywhere) and a finite subset of the
resulting propositional logic statements are unsatisfiable, then the
first-order logic statements are unsatisfiable as well. This is perhaps
unsurprising, but, more excitingly, Herbrand’s theorem guarantees that the same
holds in reverse: if it’s unsatisfiable, then you must be able to find such a
finite set of substitutions. This shouldn’t sound <em>too</em> trivial, since there
are an infinite number of substitutions and so guaranteeing that one exists is
something “interesting”.</p>
<ul>
<li>What substitution makes an unsatisfiable ground instance of <code>P[X]</code> &and;
&not; <code>P[Y]</code>? Use this substitution to show that the first-order sentence is
unsatisfiable.</li>
<li>Clearly, <code>P[X, Y]</code> &and; &not;<code>P[X, Z]</code> is unsatisfiable. Herbrand’s theorem
guarantees an unsatisfiable ground instance. Find such a ground instance.</li>
</ul>
<p>One way of thinking about why this is true is by looking at the “saturation” of
the sentences, which is what you get when you take all predicates and apply all
possible concrete inputs to them. Each predicate in the saturation is
practically a proposition because it has no quantified variables (as we
discussed above), and is a logical consequence of the first-order sentences
that were saturated (why?).</p>
<ul>
<li>Explain how the (infinite) set of sentences you get when saturating the
first-order sentences “mean” the same thing.</li>
</ul>
<p>The argument then goes something like this:</p>
<p>Suppose the sentences of the saturation were satisfiable. Then we can assign a
truth value to each predicate in the first-order world by finding the truth
value of the corresponding ground instances. For example, if we had a model for
the saturation where <code>P[a()]</code> was true and <code>P[b()]</code> was false, then in the
first-order case, <code>P[X]</code> is true if <code>X</code>=<code>a()</code> and false if <code>X</code>=<code>b()</code>.</p>
<ul>
<li>Convince yourself that this makes sense. We didn’t really talk about models
for first-order sentences.</li>
</ul>
<p>It turns out that this is the contrapositive of the “unobvious” direction of
Herbrand’s theorem, that is, that if the first-order sentences are
unsatisfiable then the saturation is unsatisfiable in propositional logic.
A satisfiable saturation in propositional logic implies, almost “by
definition”, that the first-order sentences are satisfiable.</p>
<ul>
<li>Why is the other direction “obvious”? The other direction states that if the
saturation is unsatisfiable, then the first-order sentences are unsatisfiable
as well.</li>
</ul>
<p>The “finiteness” guarantee that Herbrand’s theorem makes comes from a theorem
called the <em>compactness theorem</em>.</p>
<ul>
<li>Why is this important? Explain how without this guarantee, we might have
infinitely long proofs. Must all proofs be finite?</li>
</ul>
<p>The compactness theorem says that in propositional logic, if all finite subsets
of sentences are satisfiable, then the entire set of sentences is also
satisfiable. Equivalently, if a (potentially infinite) set of sentences is
unsatisfiable, then there must be a finite unsatisfiable subset.</p>
<p>Just for fun, here’s a proof sketch:</p>
<p>Suppose you have a finitely satisfiable set of sentences. First, you extract
all of the propositions and list them out. Number all your propositions from 1
onwards (axiom of choice alert!). Now, we do an inductive proof, where at each
step we assign the next proposition a truth-value. By showing that each
assignment preserves the “finitely satisfiable” property, we basically describe
an algorithm that gives you the truth-value of any particular proposition,
which is practically a model. Since we can find a model, the set of sentences
must be satisfiable.</p>
<p>The base case of the inductive proof is to show that if you assign no
propositions any truth-values, then the set of sentences is finitely
satisfiable. This was the assumption of the theorem, so we’re good.</p>
<p>For the inductive step, assume that you have truth-values of the first <em>k</em>
propositions, and the sentences are finitely satisfiable under these
truth-values.</p>
<ul>
<li>What does “finitely satisfiable under these truth values” mean? Come up with
two definitions: one involving replacing propositions with truth-values, and
the other involving introducing a fixed set of new sentences to each
satisfiable subset and asserting that they are <em>still</em> satisfiable.</li>
</ul>
<p>Now, let’s look at the <em>(k+1)</em>th proposition. If the set of sentences is
finitely satisfiable when that proposition is <em>false</em>, then simply assign that
sentence to false and move on. Otherwise, we will show that you <em>must</em> be able
to assign that proposition <em>true</em> and maintain the finite-satisfiability of the
set of sentences.</p>
<p>If you are forced to assign the <em>(k+1)</em>th proposition <em>true</em>, then there must
be a subset of sentences that is unsatisfiable if the <em>(k+1)</em>th proposition is
<em>false</em> (and all the previous <em>k</em> propositions are assigned their respective
truth-values as well!). Let’s call this set of sentences <em>A</em>. Now, we will show
that <em>any</em> finite subset of sentences <em>B</em> is satisfiable if the <em>(k+1)</em>th
proposition is <em>true</em>. Thus, the set of sentences is still finitely satisfiable
and we can move on.</p>
<p>The idea is to look at the union of <em>A</em> and <em>B</em>. Since a union of two finite
sets is still finite, the union is also finite, and so it is satisfiable. Thus,
the <em>(k+1)</em>th proposition is either <em>true</em> or <em>false</em>. If it is <em>false</em>, then
set <em>A</em> of sentences will be unsatisfiable, and so the union of <em>A</em> and <em>B</em>
will also be unsatisfiable (why?). Thus, the <em>(k+1)</em>th has to be <em>true</em>. Since
this holds for all subsets <em>B</em>, setting that proposition to <em>true</em> maintains
finite satisfiability.</p>
<p>This completes the inductive proof of the compactness theorem.</p>
<ul>
<li>Explain why you can switch <em>true</em> and <em>false</em> in the above proof.</li>
</ul>
<p>Another proof of Herbrand’s theorem relies on so-called <em>semantic trees</em>, which
are trees where each node is a ground instance of a predicate and the left and
right branches represent the world if that predicate were true or false,
respectively. You end up making some simple arguments related to whether or not
you can find an infinitely long path by traversing the tree.</p>
<hr>
<p>With Herbrand’s theorem, we can construct a first-order theorem-proving
algorithm! This algorithm does resolution by generating <em>all</em> ground instances
of the first-order sentences (i.e. the “saturation”). Ground instances are
“recursively enumerable”, which means you can list them out one by one and
eventually list each one (the real numbers, for example, are <em>not</em> recursively
enumerable because you can’t list them because they have a higher cardinality
than the rationals).</p>
<ul>
<li>Come up with an algorithm to generate ground instances given a list of
functions and arities (<em>arity</em> means how many inputs that function takes). Use
a breadth-first search and explain why a depth-first search is incorrect, even
though neither algorithm will terminate.</li>
</ul>
<p>Since each ground instance in the list is a propositional logic formula, you
can simply resolution-refutation on it. So, the algorithm is:</p>
<ol>
<li>Convert your sentences to prenex form (Skolemized CNF).</li>
<li>For each ground instance…<ul>
<li>Do resolution-refutation. If it finds a proof, terminate and report the
proof.</li>
</ul>
</li>
</ol>
<p>Davis and Putnam came up with this algorithm in 1960… and their work was an
improvement on Gilmore’s method which was published even earlier. But we
associate <em>Robinson</em> with the magical resolution-refutation stuff. Why?
Robinson was the first one to do it <em>practically</em>.</p>
<p>Listing out all the ground instances of the sentences is <em>slow!</em> There’s a sort
of combinatorial “explosion” where every time you have a new variable it makes
things many times slower, because you need to generate substitutions for that
variable as well. While the algorithm works, it’s too slow to be practical.</p>
<p>To talk about Robinson’s optimization, we need to discuss a whole new kind of
algorithm. But more about that in the <a href="meet-the-robinson-4.html">next
installment</a> of this, uh, ex-trilogy.  For now,
rejoice in the knowledge of a complete—albeit slow—theorem-proving
algorithm that “tames the infinite”.</p>
<ul>
<li>Should a four-part series be called a tetralogy?</li>
<li>Look up the origin of the phrase “taming the infinite” and read something by
my favorite popular math author.</li>
</ul>
]]></description>
            <link>http://hardmath123.github.io/meet-the-robinson-3.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/meet-the-robinson-3.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Mon, 04 Jan 2016 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A Balance of Powers]]></title>
            <description><![CDATA[<p>A hunt for number-theoretic coincidences.</p>


<p>Wikipedia has an amusing article on <a href="https://en.wikipedia.org/wiki/Mathematical_coincidence">“mathematical
coincidence”</a>, where
they say that it’s a “coincidence” that ($ 2^{10} $) is very close to 1000
(it’s actually 1024). This is why it’s occasionally confusing whether you mean
1000 or 1024 bytes when you say
<a href="https://en.wikipedia.org/wiki/Kilobyte#Definitions_and_usage">“kilobyte”</a>.</p>
<p>I’m not sure whether this is something to get excited about, but you know what
we say about coincidence…</p>
<p><img src="static/coincidence.gif" alt="The universe is rarely so lazy."></p>
<p>Here are some fun facts to inspire today’s post:</p>
<ul>
<li><p>($ 2^{12864326} \approx 10^{3872548} $) <a href="http://www.wolframalpha.com/input/?i=2%5E12864326">to within
0.0001%</a>, which means it
begins with the digits “10000000…”.</p>
</li>
<li><p>($ 1337^{47168026} \approx \pi\cdot10^{147453447}$) <a href="http://www.wolframalpha.com/input/?i=1337%5E47168026">to within
0.00000001%</a>. It begins
with the digits “31415926…”.</p>
</li>
<li><p>The hex expansion of ($ e^{19709930078} $) is around 10 billion digits long,
and it begins with the digits <code>deadbeef...</code>.</p>
</li>
</ul>
<p>There is definitely something going on here. It’s time to investigate!</p>
<hr>
<p>Let’s go back to powers of two. It really comes down to the fact that we’re
trying to solve equations that look somewhat like this one</p>
<p>\[
2^{\alpha} = \delta10^{\beta}
\]</p>
<p>for integers, where we can make ($ \delta $) as close to 1 as we want.</p>
<p>It should feel intuitive to take logs of both sides at this point. So let’s go
ahead and do that:</p>
<p>\[
\alpha \ln(2) = \ln(\delta) + \beta\ln(10)
\]</p>
<p>Since ($ \delta $) is close to 1, its natural log is close to 0. So this
equation reduces to finding a very close <a href="https://en.wikipedia.org/wiki/Diophantine_approximation">rational
approximations</a> of the
ratio of the natural logs of 2 and 10.</p>
<p>Rational approximation, also called <em>Diophantine</em> approximation, is the “art”
of finding rational numbers very close to real numbers. Since the rationals are
dense in the reals, we can find a rational number arbitrarily close to any real
number. The na&iuml;ve way to do this is to simply take the decimal expansion
to as many digits as we want. So, for example, we can find rational
approximations of pi such as 3/1, 31/10, 314/100, etc.</p>
<p>So, it follows that we can find arbitrarily precise rational approximations of
($ \ln(10) / \ln(2) $), which is what we’re looking for! The numerator gives
the power of 2 and the denominator gives the power of 10.</p>
<p>That ratio is around 3.321928094, so ($ 2^{3321928094} $) should be really
close to a power of 10, right?</p>
<p><a href="http://www.wolframalpha.com/input/?i=2%5E3321928094">…wrong.</a> The power of
10 is spot-on, but our first digit is completely off. This is tragic! We’re
close, but not close enough.</p>
<p>How can we fix this?</p>
<p>We could add more digits, but eventually WolframAlpha stops doing those
calculations for us. (There’s a nice online calculator
<a href="http://www.ttmath.org/online_calculator">here</a> that seems to handle much
bigger problems, but loses precision eventually.)</p>
<p>The problem is that even though we’re close, we’re not close <em>enough</em>. Remember
that our worst-case scenario with the decimal-truncation strategy is that we’re
off by ($1/\beta$). That is, we have</p>
<p>\[
\left| \frac{\alpha}{\beta} - \frac{\ln(10)}{\ln(2)} \right| = \frac{1}{\beta}
\]</p>
<p>Rearranging this a little bit, we have:</p>
<p>\[
\alpha \ln(2) = \ln(2) + \beta\ln(10) 
\]</p>
<p>In other words, we have:</p>
<p>\[
2^\alpha = 2\times10^\beta
\]</p>
<p>We could be off by up to a factor of two! That means that even though our
rational approximation is getting closer, our first digit could still vary
pretty randomly.</p>
<p>What’s an easy fix here? We could start by rounding rather than truncating.
This means our worst-case scenario drops to ($ 1/(2\beta) $) (why?), which
corresponds to being off by up to a factor of the square root of two (around
1.4).</p>
<p>If we round the example above, we get ($ 2^{3321928095} $), which is
<a href="http://www.wolframalpha.com/input/?i=2%5E3321928095">better</a>. But
percent-error wise, we’re still doing <em>worse</em> than ($ 2^{10} $). We need to
take more drastic measures.</p>
<hr>
<p>It turns out that there is a way to find the <em>best</em> rational approximation of
a number for a given denominator. This is a beautiful field of number theory
that relates images like the one below to computing GCDs efficiently.</p>
<p><img src="static/ford-circle.png" alt="Ford circle, from Wikipedia Commons."></p>
<p>I’ll leave it to you to discover the math on your own, but the result we seek
is <a href="https://en.wikipedia.org/wiki/Dirichlet%27s_approximation_theorem">Dirichlet’s approximation
theorem</a>,
which states that we can always find a rational approximation which is within
($ 1/(\beta^2) $) of the target. In fact, there are an <em>infinite</em> number of
such rational approximations, which means ($ \beta $) can get as large as we
want (why?).</p>
<p>Since we have a ($ \beta^2 $) term in the denominator, the error decreases
<em>faster</em> than the denominator. This means we can get within ($ 2^{(1/\beta)}
$) of a power of 10. Since there’s a factor of ($ \beta $) in that expression,
we can make it as large as we want to get as close to a power of 10 as we want!
Win!</p>
<hr>
<p>How do we compute these best rational approximations? The trick is to express
our target number as a <a href="https://en.wikipedia.org/wiki/Continued_fraction#Best_rational_approximations">continued
fraction</a>,
and then to simplify those continued fractions.</p>
<p>It’s not hard to write code to do this quickly. WolframAlpha and Mathematica
come with a built-in function <code>Rationalize</code> that does exactly what we want.
With a little twiddling of the “delta” parameter, we <a href="http://www.wolframalpha.com/input/?i=Rationalize%5Bln%2810%29%2Fln%282%29%2C+%28log_2%281.00001%29%29%5E2%5D">can
get</a>
approximations within whatever interval we want, and they
<a href="http://www.wolframalpha.com/input/?i=2%5E254370">work</a>!</p>
<p>Pushing this gives us lovely results, like ($ 2^{44699994} $), which is around
($ 9.9999997\times10^{13456038} $), <a href="http://www.wolframalpha.com/input/?i=2%5E44699994">within
0.0000003%</a> of a power of
ten. Wonderful.</p>
<hr>
<p>The natural question to ask now is whether we can do <em>even</em> better. Can we get
an <em>arbitrary</em> sequence of digits at the beginning of the result? It turns out
we can. By manipulating Euclidean algorithm a bit, we can generate any
remainder, not necessarily one that is close to zero. Since the remainder
controls the first few digits, we need to find an approximation with error ($
\ln(\delta) $).</p>
<p>The trick is to use a “secondary” version of the Euclidean Algorithm where we
approximate ($ \ln(\delta) $) by adding together the errors of successively
more precise approximations.</p>
<p>Here’s an example. Suppose we compute a series of rational approximations of a
number and we get the following two rows:</p>
<table>
<thead>
<tr>
<th>Numerator</th>
<th>Denominator</th>
<th style="text-align:right">Error</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>1</td>
<td style="text-align:right">0.0131</td>
</tr>
<tr>
<td>175</td>
<td>87</td>
<td style="text-align:right">0.0028</td>
</tr>
</tbody>
</table>
<p>Adding these two rows gives us a new row:</p>
<table>
<thead>
<tr>
<th>Numerator</th>
<th>Denominator</th>
<th style="text-align:right">Error</th>
</tr>
</thead>
<tbody>
<tr>
<td>177</td>
<td>88</td>
<td style="text-align:right">0.0159</td>
</tr>
</tbody>
</table>
<p>(Why does this work?)</p>
<p>This gives us an approximation with error 0.0159. We can keep doing this in a
method that resembles a cross between Gaussian elimination in matrices and the
Euclidean algorithm for integers, and get as close as we want to any target
“error”.</p>
<hr>
<p>You can download a Python program I wrote to generate these expressions
<a href="static/power-approx.py">here</a>. It uses the lovely
<a href="http://mpmath.org"><code>mpmath</code></a> library. A sample session with it, used to
compute one of the examples above:</p>
<pre><code>$ !!
Prefix? --&gt; 0xdeadbeef
Base? ----&gt; e
Radix? ---&gt; 16
Accurate to 4 digits:
2.71828182845905^16311 ~~ 3735928559*16e+5875
Accurate to 5 digits:
2.71828182845905^4407903 ~~ 3735928559*16e+1589807
Accurate to 7 digits:
2.71828182845905^1044698524 ~~ 3735928559*16e+376795337
Accurate to 7 digits:
2.71828182845905^1044698524 ~~ 3735928559*16e+376795337
Accurate to 7 digits:
2.71828182845905^5021368668 ~~ 3735928559*16e+1811075911
Accurate to 7 digits:
2.71828182845905^5021368668 ~~ 3735928559*16e+1811075911
Accurate to 8 digits:
2.71828182845905^19709930078 ~~ 3735928559*16e+7108854587
</code></pre><hr>
<p>If you enjoyed that journey, here are some exploration questions:</p>
<ul>
<li>What happens when your base is 2 and your radix is 16? Why?</li>
<li>How is this related to <a href="https://en.wikipedia.org/wiki/Euclid%27s_orchard">Euclid’s
Orchard</a>? Does exploring
Euclid’s orchard give a natural way to prove Dirichlet’s approximation theorem?
As a hint, what principle is named after Dirichlet?</li>
</ul>
]]></description>
            <link>http://hardmath123.github.io/a-balance-of-powers.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/a-balance-of-powers.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Thu, 19 Nov 2015 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Meet the Robinson: 2]]></title>
            <description><![CDATA[<p>Continuing on our quest to build an automatic theorem-prover.</p>


<p>Welcome back.</p>
<p>In the <a href="meet-the-robinson.html">previous article</a>, we learned how <strong>rules of
inference</strong> allow us to prove theorems. We also learned that a rule of
inference is not necessarily <strong>complete</strong>: it might be impossible to prove a
true sentence with a valid rule of inference.</p>
<p>Today’s article is about a complete rule of inference.</p>
<p>Before you get excited, though, let’s talk about what we really mean by
“complete” in this case.</p>
<ol>
<li>If a statement <em>must</em> be true given some axioms, then the rule of inference
can construct a proof for the statment.</li>
<li>If a statement is false given some axioms, then the rule of inference will
not construct a proof. It is not guaranteed to even terminate in this case.</li>
<li><p>If a statement could either be true or false given some axioms, then the
rule of inference will not construct a proof. It is not guaranteed to even
terminate in this case.</p>
</li>
<li><p>Prove that “Robert is a frog” given “It rained on Monday” and “Seven is a
prime number”.</p>
</li>
<li>Prove that “Robert is not a frog” given “It rained on Monday” and “Seven is a
prime number”.</li>
<li>Explain what we mean by statements that could either be true or false, and
connect this to the discussion of undecidable problems (or independent
statements) in the previous article. These statements are (choose one)
<em>satisfiable/valid</em> but not <em>satisfiable/valid</em>.</li>
<li>How can you use this rule of inference to prove that something is false?</li>
<li>How can you use this rule of inference to discover whether a statement is
true or false, given that it is necessarily either valid or invalid? (Hint:
you’re allowed to fork two processes and kill them if needed.)</li>
</ol>
<p>For the purposes of this article, we can assume that the algorithm will
terminate. Later, though, we will generalize to higher forms of logic where
termination is not guaranteed.</p>
<hr>
<p>The rule of inference we are going to use is called <strong>resolution</strong>, first used
practically by John Alan Robinson in 1965. It goes like this:</p>
<p>\[
\frac{(P \vee \neg Q), (Q \vee R)}{P \vee R}
\]</p>
<ul>
<li>Prove, with a truth table, that this rule is valid.</li>
<li>Convert both premises of the rule to <strong>Kowalski Normal Form</strong>, which means
they should both be in the form “A implies B”.</li>
<li>Use your expressions above to explain how resolution is really the same thing
as “P implies Q, Q implies R together mean P implies R”.</li>
</ul>
<p>Resolution proofs rely on the idea of <strong>refutation</strong> or <em>reductio ad absurdum</em>,
which is more commonly known as <strong>proof by contradiction</strong>.</p>
<p>Refutation relies on the idea that if not-S causes a contradiction with your
axioms and rules of inference, then not-S is invalid, so S must be valid.</p>
<ul>
<li>What do we mean by “contradiction”?</li>
</ul>
<p>To use the resolution-refutation scheme to prove S given some axioms, we can
repeatedly apply resolution to pairs of sentences taken from the axioms and
not-S. If you end up deriving a contradiction, you have proven S.</p>
<p>The rest of this post will be dedicated to proving that this scheme actually
works.</p>
<hr>
<p>Resolution operates on <strong>clauses</strong>, which is just a set of propositions that
are joined with “or”s. These propositions can be negated.</p>
<ul>
<li>Which one of the following three sentences is a clause?<ol>
<li>A &or; (B &and; C)</li>
<li>&not; (A &and; B) &or; C</li>
<li>&not; A &or; &not; B &or; C</li>
</ol>
</li>
</ul>
<p>Sentences are in <strong>clausal-normal form (CNF)</strong> if they are a set of clauses
that are joined with “and”s.</p>
<ul>
<li>Which of the following three sentences is in CNF?<ol>
<li>A &or; (B &and; C)</li>
<li>A &and; (B &or; &not;C) &and; D</li>
<li>&not; (A &and; B)</li>
</ol>
</li>
</ul>
<p>It turns out that any sentence can be written in CNF. To do this, you can
repeatedly apply the following rules:</p>
<ol>
<li>Remove implication using the expression for “A &rArr; B” you’ve already
found.</li>
<li>Use De Morgan’s laws to move “not” inwards:<ul>
<li>What is &not; &not; A?</li>
<li>What is &not; (A &and; B)?</li>
<li>What is &not; (A &or; B)?</li>
</ul>
</li>
<li>Distribute &or; over &and; by replacing A &or; (B &and; C) with (A &or; B)
&and; (A &or; C).<ul>
<li>Prove that this is true with a truth table.</li>
</ul>
</li>
</ol>
<p>You can use induction to show that applying these rules again and again will
eventually turn your sentence into CNF.</p>
<ul>
<li>Show that none of these rules apply to a sentence already in CNF.</li>
</ul>
<p>Why do we care so much about sentences in CNF? We can now extend the resolution
rule to sentences in CNF:</p>
<p>\[
\frac{(P_1 \vee \dots \vee P_{i} \vee \neg X), (Q_1 \vee \dots \vee Q_{i} \vee X)}{P_1 \vee \dots \vee P_{i} \vee Q_1 \vee \dots \vee Q_{i}}
\]</p>
<ul>
<li>Convince yourself that that’s a reasonable thing to do, using the concept of
associativity.</li>
</ul>
<p>In short, if a proposition appears in both positive and negative polarities in
two clauses, you can join the clauses and remove that proposition.</p>
<ul>
<li>Is the singleton clause “P” technically in CNF?</li>
<li>Use clause-resolution on “P” and “not-P” to find out whether the empty clause
is true or false (hint: is “P &and; &not;P” invalid?).</li>
<li>Is the empty conjunction true? The empty disjunction? Explain what a vacuous
truth is.</li>
<li>Use resolution-refutation to prove <em>modus ponens</em>. If you only do one
exercise in this article, do this one. (Hint: use the inference rule twice.) </li>
<li>Ryan Marcus has a nice article on propositional resolution
<a href="http://rmarcus.info/blog/2015/09/02/vulcan.html">here</a>, which includes an
interactive demo. Play with that demo.</li>
</ul>
<hr>
<p>We’re now going to prove if you have an unsatisfiable set of clauses, then you
can repeatedly resolve them to derive the empty clause. This provides a model
for us to have a terminating theorem-proving algorithm!</p>
<p>This proof is taken almost directly from Russell and Norvig’s textbook, though
I tried to cut down on the notation.</p>
<p>Imagine we’ve already applied resolution to each pair of clauses,
and recursively resolved the results, and so on to obtain an (infinite?) set
of clauses. We call this the resolution <em>closure</em> of these clauses.</p>
<p>Suppose also that the set of clauses was unsatisfiable, but this set of
resolved clauses does not contain the empty clause. We’re going to show that
you can, in fact, satisfy the clauses, leading to a contradiction.</p>
<p>To satisfy the clauses, follow the following algorithm:</p>
<ol>
<li>Number your propositions from 1 to <em>k</em>.</li>
<li>For the <em>i</em>th proposition P[i]:<ol>
<li>If one of the clauses in the set contains &not;P[i], and all other
propositions in that clause are false based on the values assigned to
P[1], P[2], …, P[i-1], then set P[i] to <em>false</em>. This is basically
clauses that look like (<em>false</em> &or; <em>false</em> &or; … &or; &not; P[i]).</li>
<li>Otherwise, set P[i] to <em>true</em>.</li>
</ol>
</li>
</ol>
<p>The claim is that this procedure will always work, that is, none of these
assignments will make a clause false. To see this, suppose assigning P[i] did,
in fact, cause a clause to be false. Specifically, no clauses were falsified
by any of the previous assignments. Then the following could happen:</p>
<ol>
<li>That clause was empty from the beginning, and thus always false. We can
ignore this case because we’re assuming the set of resolved clauses does <em>not</em>
contain the empty clause.</li>
<li>The clause was of the form (<em>false</em> &or; <em>false</em> &or; … &or; P[i]) and we
assigned P[i] to <em>false</em>. (Why is this the only other case?)</li>
</ol>
<p>If the latter case occurs, then we must also have (<em>false</em> &or; <em>false</em> &or;
… &or; &not; P[i]), because that’s the only situation in which P[i] is
assigned false.</p>
<p>Now, here’s the crucial bit: these two clauses resolve! Since they contain P[i]
and &not;P[i], respectively, we resolve them to obtain a clause that has only
false values in it. This contradicts our assumption that no clauses were
falsified by any of the previous assignments.</p>
<p>So, we know that if the empty clause is not part of the set of resolved
clauses, then the clauses are satisfiable. By contrapositive, it follows that
you can always resolve some set of them to get the empty clause. Q.E.D. &#9632;</p>
<hr>
<p>There’s another argument that explains this: an inductive one which you can
read <a href="http://www.mathcs.duq.edu/simon/Fall04/notes-6-20/node3.html">here</a>. In
short, it inducts on the total number of propositions, where the base case is
that if you have only one literal per clause, then either it’s satisfiable, or
it’s unsatisfiable and you can resolve to get the empty clause.</p>
<ul>
<li>Convince yourself that this base case is true.</li>
</ul>
<hr>
<p>So where are we? We have an algorithm that will definitely terminate on a valid
statement, though we have not yet said anything about what happens when it is
given anything else.</p>
<p>The resolution method should feel extremely powerful. Of course, as the number
of propositions increases, it will get exponentially slower (boolean
satisfiability was actually one of the first problems to be proved as
NP-complete—and, in fact, constraint solving algorithms like DPLL correspond
pretty much to resolution-refutation).</p>
<p>But that’s okay! It works!</p>
<p>One question you should have is, “What can I prove with propositional logic?”</p>
<ul>
<li>Can you use propositional logic to reason about the integers? Why or why not?</li>
</ul>
<p>Propositional logic is bound to a <em>finite</em> number of propositions. That means
you can’t say things like “1 is an integer”, “2 is an integer”, “3 is an
integer”, etc.</p>
<p>In the <a href="meet-the-robinson-3.html">next article</a>, we will extend propositional
logic to a much richer form that supports an infinite number of propositions,
and show that resolution-refutation still works.</p>
<ul>
<li>Write your own resolution theorem prover so that you can experiment with
some large proofs. It’s not hard; you can think of this as a code golf
challenge if you’d like.</li>
<li>Find three more things you liked and three more things that could be
improved about this article series, and report them to me.</li>
</ul>
]]></description>
            <link>http://hardmath123.github.io/meet-the-robinson-2.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/meet-the-robinson-2.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Thu, 05 Nov 2015 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Meet the Robinson]]></title>
            <description><![CDATA[<p>An introduction to automatic theorem proving.</p>


<p>On October 10, 1996, a program called EQP solved a problem that had bothered
mathematicians since 1933, almost 60 years ago. Using a powerful algorithm, EQP
constructed a proof of a theorem on its own. EQP ran for around 8 days and used
about 30 Mb of memory.</p>
<p>The theorem was known as <a href="https://en.wikipedia.org/wiki/Robbins_algebra">Robbins’
conjecture</a>; a simple question
about whether a set of equations is equivalent to the boolean algebra.</p>
<p>You read more background <a href="https://www.cs.unm.edu/~mccune/papers/robbins/">here</a>
or on the <a href="http://www.nytimes.com/library/cyber/week/1210math.html"><em>New York Times</em>
archives</a>. You can
also view the computer-generated proof
<a href="https://www.cs.unm.edu/~mccune/papers/robbins/eqp-theorem.proof.txt">here</a>.</p>
<p>This article (or series of articles) will shed some light on how EQP worked:
the fascinating world of <strong>automatic theorem proving</strong>.</p>
<hr>
<p>Along the way, we’ll explore ideas that have spanned millennia: formal logic,
G&ouml;del’s (In)completeness theorem, parsing, Chapter 4.4 of <em>The Structure
and Interpretation of Computer Programs</em>, P=NP?, type theory, middle school
geometry, Prolog, and philosophy. Over time, we’ll build up the tools needed to
express a powerful theorem-proving algorithm: Robinson’s Resolution.</p>
<p>This isn’t meant to be very notation-heavy. I’ve avoided using dense notation
in favor of sentences, hoping it will be easier for people to jump right in.</p>
<p>Exercises are provided for you to think about interesting questions. Most of
them can be answered without a pencil or paper, just some thought. Some of them
are introductions to big ideas you can go explore on your own. So really, don’t
think of the exercises as exercises, but as the Socratic part of the Socratic
dialogue.</p>
<ul>
<li>Exercises will be formatted the way this sentence is.</li>
</ul>
<p>If you want a formal education in all this, consult Russell and Norvig’s
textbook, <em>Artificial Intelligence: A Modern Approach</em>. All I’m writing here I
learned on my adventures writing my own theorem prover, lovingly named
<a href="http://github.com/Hardmath123/eddie">Eddie</a>.</p>
<hr>
<p>To prove theorems, we really need to nail down what word like “prove” and
“theorems” mean. This turns out to be kind of tricky, so the first post will be
devoted to building up some <strong>formal logic</strong>: mainly vocabulary and big ideas.</p>
<p>Logic begins with <strong>propositions</strong>. Propositions are sentences that can be true
or false, like <em>“Charlie is a basketball player.”</em> or <em>“Two plus two is
five.”</em>.</p>
<p>Except, we don’t necessarily know whether a proposition is true or false. Do
<em>you</em> know whether Charlie is a basketball player? I don’t.</p>
<p>Then again, there are certain propositions that <em>everyone</em> knows are true.
Propositions like <em>“Either it is raining or it is not raining.”</em>.</p>
<p>How do we know that that’s always true? One way is to list out all
possibilities and see what happens:</p>
<table>
<thead>
<tr>
<th style="text-align:left">It is raining.</th>
<th style="text-align:left">It is not raining.</th>
<th style="text-align:right">Either it is raining or it is not raining.</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">True</td>
<td style="text-align:left">True</td>
<td style="text-align:right">True</td>
</tr>
<tr>
<td style="text-align:left">False</td>
<td style="text-align:left">True</td>
<td style="text-align:right">True</td>
</tr>
<tr>
<td style="text-align:left">True</td>
<td style="text-align:left">False</td>
<td style="text-align:right">True</td>
</tr>
<tr>
<td style="text-align:left">False</td>
<td style="text-align:left">False</td>
<td style="text-align:right">True</td>
</tr>
</tbody>
</table>
<p>This sort of listing is called a <strong>truth table</strong>, and it assigns a truth value
for each proposition. Each row is called a <strong>model</strong>.</p>
<p>Statements like these are called <strong>tautologies</strong>, and they seem to be pretty
meaningless (like “no news is no news” or “if you don’t get it, you don’t get
it”). We’re also going to refer to them as <strong>valid</strong> statements.</p>
<p>A statement could also be <em>never</em> true. These are called <em>invalid</em> statements.</p>
<p>Finally, a statement could <em>possibly</em> be true: these are called <em>satisfiable</em>.
A satisfiable sentence is a sentence that could be true if certain propositions
are true and others are false. Here’s an example:</p>
<table>
<thead>
<tr>
<th style="text-align:left">It is raining.</th>
<th style="text-align:left">Mark is strong.</th>
<th style="text-align:right">It is raining and Mark is strong.</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">True</td>
<td style="text-align:left">True</td>
<td style="text-align:right"><em>True</em></td>
</tr>
<tr>
<td style="text-align:left">True</td>
<td style="text-align:left">False</td>
<td style="text-align:right">False</td>
</tr>
<tr>
<td style="text-align:left">False</td>
<td style="text-align:left">True</td>
<td style="text-align:right">False</td>
</tr>
<tr>
<td style="text-align:left">False</td>
<td style="text-align:left">False</td>
<td style="text-align:right">False</td>
</tr>
</tbody>
</table>
<p>As we get into more complicated stuff, it’ll be annoying to write out these
propositions in full. Also, sometimes we will want to talk about an arbitrary
proposition, like a variable. So, we’re going to use capital letters to denote
propositions. For example, I might say “let P be the proposition ‘It is
raining.’”. You can then replace all instances of P with that proposition.</p>
<ul>
<li>If a statement is not <em>invalid</em> then it is (choose one:
<em>valid</em>/<em>satisfiable</em>). </li>
<li>Relate the above statement to why the opposite of “everyone came to the
party” <em>isn’t</em> “nobody came to the party”. State the correct opposite.</li>
<li>Relate the above to De Morgan’s Laws, if you’ve heard of those.</li>
</ul>
<hr>
<p>So I cheated a bit above; I made up sentences like <em>“It is raining and Mark is
strong.”</em> without talking about what “and” really means.</p>
<p>Logicians generally use three main ‘operators’: “and”, “or”, “not”. You can use
them to modify or join propositions and form bigger propositions (called
<strong>sentences</strong> or <strong>formulas</strong> or <strong>expressions</strong>).</p>
<ul>
<li>Explain why having both “and” and “or” is redundant. Explain why we have
them anyway.</li>
</ul>
<p>We have symbols to denote these: we use &not;A for “not A”, A&and;B for “A and
B”, and A&or;B for “A or B”. It’s easy to get those last two confused at first;
a nice mnemonic is that &or; looks like a <em>branching</em> tree, which relates to
choice (“or”).</p>
<p>In practice, this lets you turn sentences like <em>“Either I am dreaming, or the
world is ending and we do not have much time left.”</em> into something like:</p>
<blockquote>
<p>D &or; (W &and; &not; T)</p>
</blockquote>
<ul>
<li>Explain how &or; relates to &cup; and &and; relates to &cap; in set theory.
Use a Venn diagram.</li>
<li>For some fun trivia, look up the difference between a Venn diagram and
and <strong>Euler diagram</strong>. Which mathematician came first? I’m going to refer to
Euler diagrams instead of Venn diagrams in the rest of this post.</li>
</ul>
<p>Another operator is <strong>implication</strong>. We say “A implies B” if B is true whenever
A is true. We denote this in symbols with “A &rArr; B”.</p>
<ul>
<li>Draw an Euler diagram for A &rArr; B.</li>
<li>Rewrite A &rArr; B in terms of “or” and “not”. Use your Euler diagram to
help you figure this one out.</li>
</ul>
<p>That last exercise was a little tricky. How did you know your answer was
correct? The foolproof way is to write out a truth table for A and B. But, as
you can imagine, that gets tedious as you add more and more propositions.</p>
<ul>
<li>Prove De Morgan’s Laws by showing that the truth tables of both expressions
are identical.</li>
<li>How many rows are in a truth table of an expression with 10 propositions?</li>
</ul>
<p>And it gets <em>worse</em>. What if you have an infinite number of propositions? Like
<em>“1 is a positive number”</em> and <em>“2 is a positive number”</em> and so on <em>ad
infinitum</em>? Infinitely long truth tables sound gnarly. Clearly, we need a
better way to deal with this.</p>
<hr>
<p>The better way is to think in terms of <strong>rules of inference</strong>. Rules of
inference are ways to transform expressions.</p>
<p>A rule of inference you’ve probably used is <strong>modus ponens</strong>, which states that
if you have “P is true, and P implies Q” then you can deduce that “Q is true”.</p>
<p>For example, if Rover is a dog, then Rover is an animal. Since Rover is a dog,
we can deduce that Rover is an animal.</p>
<ul>
<li>Rewrite “P is true, and P implies Q” in terms of the operators introduced
above.</li>
<li>Create a truth table for that where the columns are “P”, “Q”, and “P is
true and P implies Q”.</li>
<li>Circle all the rows where the last column is “True”, and check to see that
“Q” is true in those rows.</li>
<li>Prove, with a truth table, that ((P&rArr;Q)&and;P)&rArr;Q is a tautology.</li>
</ul>
<p>Rules of inference are often written as fractions where the preconditions (also
called <em>antecedents</em> or <em>premises</em>) are written as numerators and the results
(also called <em>consequents</em> or <em>conclusion</em>) are written as denominators:</p>
<p>\[
\frac{P,\; P\implies Q}{Q}
\]</p>
<p>Note that sometimes we elide the “and” from a series of premises.</p>
<ul>
<li>Write a pair of rules of inference that correspond to De Morgan’s Laws.</li>
<li>Why are rules of inference written as fractions? Come up with a
“cancellation” rule that allows you to chain rules of inference where one’s
conclusion is the other’s premise.</li>
<li>Are rules of inference reversible? Write a reversible and irreversible rule
of inference.</li>
<li>In the rule of inference written above, “P” and “Q” don’t represent
specific propositions. What do they represent? Write an English sentence that
expresses what they represent. Explain why they are called <strong>metavariables</strong>.
Explain how this relates to pattern-matching.</li>
<li>Explain how this allow us to use a finite truth table to say things about a
potentially infinite set of propositions.</li>
</ul>
<p>A rule of inference is <strong>valid</strong> if its conclusions are true in all models
where its premises are true.</p>
<ul>
<li>Write an invalid rule of inference.</li>
<li>Write an invalid rule of inference that looks valid at first glance by
modifying <em>modus ponens</em>. Look up <em>modus tollens</em>, <em>affirming the
consequent</em>, and <em>denying the antecedent</em>. For extra credit, use one of these
fallacies in your homework and see if your teacher notices.</li>
</ul>
<p>A rule of inference should also be <strong>consistent</strong>, which means you shouldn’t
ever be able to use that rule of inference to prove both A and not-A.</p>
<ul>
<li>Write an inconsistent rule of inference.</li>
</ul>
<hr>
<p>Now, finally, we have the tools to talk about proofs. In a “logical system”,
you pick certain axioms, which are propositions that seem true. Then you use
your rules of inference to show that those axioms imply other exciting things.
Theorems are propositions that you can prove in this way, and proofs are chains
of these rules of inference. A statement that has a proof is a <strong>theorem</strong>.</p>
<ul>
<li>Explain how you can represent parsing as a logical system. In particular,
come up with an explicit connection between (1) production rules and rules of
inference, and (2) theorems and strings that match a grammar.</li>
<li>We talk about <em>parse trees</em>, not <em>parse chains</em>. Should we talk about proofs
in terms of trees of rules of inference, rather than chains of rules of
inference?</li>
</ul>
<p>One of the first logical systems was Euclid’s postulates. With a handful of
simple axioms that anyone would agree with, Euclid built up all of geometry.
While other philosophers (like Thales) had come up with the same results Euclid
had centuries before him, Euclid put all that machinery on a solid, rigorous
foundation. In a future episode, we might even go ahead and encode Euclid’s
axioms in formal logic.</p>
<p>Meanwhile, in the early 20th century, a crisis was brewing. People were coming
up with all sorts of messy paradoxical results. The biggest one was <strong>Russell’s
Paradox</strong>, which went somewhat like this:</p>
<p>Imagine the set of all sets that <em>don’t</em> contain themselves. So, for example,
the set {1} is in that set, while the set of all sets is not in that set
(because it contains itself). Does this weird set contain itself?</p>
<ul>
<li>Wrap your head around that by coming up with an explanation for why it does
and doesn’t contain itself.</li>
<li>Explain how this relates to the <em>Liar’s Paradox</em>, “This statement is
false.”</li>
</ul>
<p>With these messy loopholes popping up all over the place, Alfred North
Whitehead and Bertrand Russell decided it was a good idea to take matters into
their own hands and put math on solid foundations like Euclid did centuries
before.</p>
<p>The result was the <em>Principia Mathematica</em>*, a treatise that stated a set of
axioms and rules of inference for <em>set theory</em>, and then built up arithmetic
and the rest of math from that.</p>
<p><img src="/static/principia-mathematica.png" alt="A proof from the Principia."></p>
<p>The <em>Principia</em> was careful to avoid any sets that contained themselves, and
so Russell’s Paradox and the Liar’s Paradox could be avoided.</p>
<ul>
<li>How does the Liar’s Paradox relate to sets that contain themselves?</li>
</ul>
<p>It seemed like a sweet deal, until Kurt G&ouml;del came along and broke
everything.</p>
<p>(*We stopped using the <em>Principia</em>, by the way. Most mathematicians use the
axioms of <strong>Zermelo–Fraenkel set theory</strong>, abbreviated ZF. But it still has the
problems G&ouml;del discovered.)</p>
<hr>
<p><em>Modus ponens</em> isn’t a magic bullet.</p>
<ul>
<li>Given <em>“A and B”</em>, can you use just <em>modus ponens</em> to prove <em>“A or B”</em>? Does
that mean <em>“A or B”</em> is false?</li>
<li>Come up with another statement that cannot be proved under <em>modus ponens</em>.</li>
</ul>
<p>This is really bad, if you think about it. It means that there are statements
that can be true according to our axioms, but impossible to prove in our
logical system. This is what is referred to as <em>incompleteness</em>—the subject
of G&ouml;del’s <em>Incompleteness Theorem</em>.</p>
<p>The <em>Incompleteness Theorem</em> says that if your logical system can be used to
represent arithmetic, then you can come up with a statement that you can
neither prove nor disprove.</p>
<p>This is <em>horrible</em>. It means that there are statements we can’t prove in
<em>math</em>. There are questions without answers!</p>
<p>Here’s a question without an answer: those of you who have read <a href="http://hardmath123.github.io/hilbert.html"><em>Harry Potter
and the Diagon(alization) Alley</em></a>
might remember that there are more real numbers than integers. The <strong>Continuum
Hypothesis</strong> states that there isn’t a set of numbers that is “bigger” than the
integers but “smaller” than the real numbers. It turns out that <em>we can’t prove
that</em>. The Continuum Hypothesis is <strong>independent</strong> of the ZF axioms.</p>
<p>If that sounds a bit abstract, here’s another one: Euclid’s <em>parallel
postulate</em>, which says something really obvious about parallel lines, turns out
to be independent of his other axioms.</p>
<blockquote>
<p>If a line segment intersects two straight lines forming two interior angles
on the same side that sum to less than two right angles, then the two lines,
if extended indefinitely, meet on that side on which the angles sum to less
than two right angles.</p>
</blockquote>
<p>Finally, the <strong>axiom of choice</strong> is pretty controversial. Most mathematicians
accept it as true, even though it leads to all sorts of weird results. The
weirdest one is the <strong>Banach-Tarski Paradox</strong>, which shows how you can take a
sphere, cut it up into five pieces, and reassemble them to get <em>two</em> spheres.</p>
<p>When we talk about ZF with the axiom of choice, we call it ZFC.</p>
<ul>
<li>Relate independent statements to the notion of undecidable problems in
computer science, such as the <strong>halting problem</strong> or computing <strong>Kolmogorov
complexity</strong>.  Do the proofs of these require some sort of self-referential
argument?</li>
</ul>
<hr>
<p>As exciting as the Incompleteness Theorems are, there’s a much less celebrated
result of G&ouml;del’s called, oddly enough, the <strong>Completeness Theorem</strong>,
published in 1929. It says that there is a rule of inference that is complete
(every true statement is provable) for propositional logic.</p>
<p>G&ouml;del did <em>not</em>, however, show what this rule was: we had to wait until
1965 for it. In the <a href="meet-the-robinson-2.html">next post</a>, we will discover
this magical rule of inference, prove its completeness, and show how to use it
to write an automatic theorem prover. And we’re going to find out why the title
of this post makes sense.</p>
<ul>
<li>This post had very few external links. Find a topic you didn’t understand or
something you want to learn more about, and look it up.</li>
<li>Pick 3 things you liked about this post, and 3 things that could be
improved. Tell me these things.</li>
</ul>
]]></description>
            <link>http://hardmath123.github.io/meet-the-robinson.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/meet-the-robinson.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sun, 18 Oct 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[There are no rules in math]]></title>
            <description><![CDATA[<p>Don’t use hammers. Build them.</p>


<p>I’m going to pick on a math problem I find very annoying. It’s completely
arbitrary, it has no beauty or elegance, and it is tedious and unenlightening
to solve.</p>
<blockquote>
<p>A long thin strip of paper is 1024 units in length, 1 unit in width, and is
divided into 1024 unit squares. The paper is folded in half repeatedly.  For
the first fold, the right end of the paper is folded over to coincide with
and lie on top of the left end. The result is a 512 by 1 strip of double
thickness. Next, the right end of this strip is folded over to coincide with
and lie on top of the left end, resulting in a 256 by 1 strip of quadruple
thickness. This process is repeated 8 more times. After the last fold, the
strip has become a stack of 1024 unit squares. How many of these squares lie
below the square that was originally the 942nd square counting from the left?</p>
<p>— 2004 AIME II, #15</p>
<p>(The AIME is a prestigious invite-only mathematics exam used to select the US
team for the International Mathematics Olympiad.)</p>
</blockquote>
<p>Imagine this problem is on your homework. Your math teacher explained how to do
it on the blackboard. She worked it out in detail, and the steps make sense at
the time, but when you get home, you can’t remember what they were.</p>
<p>And then this problem shows up on your final exam, and you remember it’s that
one problem you didn’t memorize how to do. You do your best, but you can’t
figure it out. Maybe you made a silly mistake earlier in the problem and that
messed everything up. You don’t have enough time to check your work, and your
heart starts to beat faster.</p>
<p>Your teacher takes time out to talk to you after class, and explains that you
really should concentrate more. She tells you that these simple “reasoning and
problem-solving skills” are really important in most careers. You’ll need a
good grade in math if you ever want to take <em>AP Origami</em> or <em>Advanced Paper
Folding Honors</em>.</p>
<p>So you start going to a tutor after school. Even though it’s kind of expensive,
your parents agree that it’s important for you to catch up to your peers.</p>
<p>Your tutor does the same things in class, only, you’re much more tired after
school and you can’t focus as well. But your friends say they go to tutors, and
they get stellar grades, so you stay with it.</p>
<p>Next year, you take an easier math class. You only need to survive until the
end of high school, right? Then you can forget all this nonsense and spend your
time learning what’s <em>useful</em>.</p>
<hr>
<p>There are two very different ways we could look at math.</p>
<p>The first way to look at math is “math-is-a-hammer”. Trying to measure the
height of this building? Trigonometry! Computing your odds at a casino?
Probability! Math gives you a huge set of tools you can throw at problems.</p>
<p>A couple of my posts on here have been about math-hammering. You math-hammer
whenever you take a system in the real world and model it in a logical way.
Usually, you do it in order to predict something about your system. </p>
<p>Our education system, of course, focuses entirely on math-hammering. We use
math-hammers in elementary school arithmetic to find out how many apples Joe
should give Bob, and we use math-hammers in high school calculus to figure out
whether a particle is speeding up or slowing down at time <em>t</em>.</p>
<p>And that’s where math-hammering fails. How many second graders care about the
price of apples? How many high schoolers really care about the speed of a
theoretical particle in a frictionless room?</p>
<p><img src="static/calvin-and-hobbes-word-problem.gif" alt=""></p>
<p>(Image: <em>Calvin and Hobbes</em>, Bill Watterson.)</p>
<p>We tell them that all these hammers will be useful in <em>careers</em>.</p>
<p>And that’s true. Economists use math-hammers all the time. So do physicists and
chemists and statisticians. The lady at the checkout at your local grocery
store uses the hammer labeled “subtraction” every time she gives you change.</p>
<p>But when you’re a kid, you don’t care. Why should you? You don’t need to count
your change or do your taxes. The only way math ever helps you is in getting
good grades.</p>
<p>So let’s talk about the second way to look at math.</p>
<hr>
<p>The second way is to look at math is in terms of <em>building</em> hammers, rather
than <em>using</em> them. Math isn’t about “reasoning and problem-solving”. Math is
about <em>design</em>. Mathematicians are just like architects who decide where the
bathroom should be.</p>
<p>Let’s take my AP Calculus class as an example. It’s taught, justifiably, in a
“this-is-the-kind-of-problem-that-will-be-on-the-AP-test” fashion. So when you
are first introduced to limits, you’re asked to calculate, by hand, dozens of
deltas for different functions with increasingly tiny epsilon values.</p>
<p>Hardly anything is said about the intuition behind the definition of a limit:
it seems like an arbitrary set of rules. Or, for that matter, hardly anything
is said about why the notion of a limit is useful. Why is continuity such a
tricky thing to pin down? Why do we need such a crazy formal definition of this
simple notion?</p>
<p>Something fun to think about why this is a big deal is <a href="https://en.wikipedia.org/wiki/Thomae%27s_function">Thomae’s
Function</a>, which is zero for
all irrational numbers, and otherwise depends on the denominator of the
rational number. Does this function look continuous? How can you classify it
without a solid, rigorous definition of continuity? Continuity gives rise to
all sorts of interesting questions and, in fact, if you keep asking tricky
questions and generalizing, you end up with a whole field of math: topology.</p>
<p>Speaking of fields: why do mathematicians care so much about these strange
algebraic objects like groups and rings and fields (not to mention monoids and
vector spaces and lattices)? They’re all generalizations of familiar
structures! Fields are like the numbers we know and love, except, there are
other fields (like the rational <em>functions</em>). Theorems we prove about a generic
field can be used for anything that you can show is a field. Proving a theorem
about a field is like building a new hammer.</p>
<p>Similarly, Haskell programmers are familiar with how generic functions defined
on things like Monads and Monoids turn out to be useful in all sorts of
settings, from managing config files to safe I/O. Every time you program a
polymorphic function so that you can reuse for different kinds of data types,
you’re thinking like a mathematician does.</p>
<p>It’s the same deal with continuity. If you can prove exciting things about any
generic continuous function, then that proof works for <em>all</em> continuous
functions. The fundamental theorem of calculus holds for <em>all</em> continuous and
differentiable functions. It’s a very versatile hammer. That’s why we care
about continuity and give it a formal, rigorous description.</p>
<p>We could have chosen a different definition of continuity, of course, and maybe
had subtly different theorems as a result. Maybe there’s a better definition
that nobody has thought of yet. And that’s okay! Contrary to what just about
all of K-12 math education tells you, you get to make up your own rules in
math.</p>
<hr>
<p>We need to purge “word problems” from as much curriculum as we can. Word
problems turn math into a boring, utilitarian tool with very little practical
value outside of contrived examples where Alice wants to buy apples from Bob.</p>
<p>We need to purge the idea that math is about “clever” things like realizing you
should square both sides of the equation.</p>
<p>We need to purge the idea that algebra is “solving equations” and geometry is
“calculating lengths”.</p>
<p>And we need to purge the idea that there are rules in math.</p>
]]></description>
            <link>http://hardmath123.github.io/no-rules-in-math.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/no-rules-in-math.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Thu, 15 Oct 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Wake Up, Sheeple: Falcon 9 Edition]]></title>
            <description><![CDATA[<p>We’re missing the point.</p>


<p>Everyone’s talking about <a href="https://scratch.mit.edu/projects/76866912/">an addicting new
webgame</a> that lets you try and land
SpaceX’s Falcon 9 Lander.</p>
<p><a href="http://gizmodo.com/try-landing-the-spacex-falcon-9-yourself-with-this-flas-1731352484">Gizmodo</a>
says the game “will frustrate you no end”.
<a href="http://www.gamespot.com/articles/try-to-land-elon-musks-spacex-rocket-in-this-chall/1100-6430668/">GameSpot</a>,
<a href="http://techcrunch.com/2015/09/17/this-spacex-falcon-9-rocket-isnt-going-to-land-itself/">TechCrunch</a>,
<a href="http://www.engadget.com/2015/09/17/web-game-landing-falcon-9-pretty-much-impossible/">EnGadget</a>,
<a href="http://www.popularmechanics.com/space/a17389/this-spacex-game-lets-you-know-how-hard-a-barge-landing-is/">Popular
Mechanics</a>,
<a href="http://www.theverge.com/tldr/2015/9/17/9344475/spacex-falcon-9-landing-game">The
Verge</a>
and <a href="http://www.popsci.com/think-you-can-land-spacex-falcon-lander-go-ahead">Popular
Science</a>
seem to agree. The Twitterverse is <a href="https://twitter.com/nschmiedicker/status/644517861596221440">forming conspiracy
theories</a> about
SpaceX’s recruitment strategy.</p>
<p>But, as usual, everyone is missing the point:</p>
<h3 id="-spacex-falcon-9-lander-was-probably-written-by-a-kid-"><em>SpaceX Falcon 9 Lander</em> was probably written by a kid.</h3>
<p><em>Popular Science</em> parenthetically remarks that the game is not affiliated with
SpaceX. <em>The Verge</em> mentions that it was made with “software born out of the
MIT Media Lab”, whereas <em>GameSpot</em> gets it completely wrong and says that the
game was “developed and published for educational purposes by the MIT Media
Lab”.</p>
<p>In their rush to sensationalize every little bit of news, all of these websites
missed perhaps the most exciting bit of information. <em>SpaceX Falcon 9 Lander</em>
was probably written by a kid.</p>
<p><a href="http://scratch.mit.edu">Scratch</a>, you see, is a programming language designed
by researchers at MIT, intended to teach children how to program. I wrote some
of my first lines of code in Scratch, when I was nine. I still frequent the
site.</p>
<hr>
<p>Here’s something you might not know: unlike just about any other popular Flash
game, <em>SpaceX Falcon 9 Lander</em> is open-source. That means you can read the
source code. Right now.</p>
<p>In fact, if you sign up for your free Scratch account, you can also change the
source code, and publish your changes. You can make <em>Mars Rover Lander</em> by
changing a few of the images that the game uses—Scratch has a built-in paint
editor. You can twiddle some of the physics to make it easier or harder to win.
You can embed a cheat code, and then take screenshots to post proudly on the
Internet.</p>
<p><img src="/static/falcon-lander-hacked.png" alt="I didn&#39;t even try on this one."></p>
<p>You can do all of these things <em>right now</em>, for <em>free</em>, with <em>absolutely no
technical knowledge</em>. Assembling a program in Scratch is similar to putting
together LEGOs: easy and intuitive. Left alone for an hour or so, your kids
will figure it out on their own. In the process they will learn fundamental
skills in math and logic that will show up again and again throughout their
schooling and career. They will impress you.</p>
<p>Not convinced? Here’s what the code to play the sounds looks like.</p>
<p><img src="/static/falcon-lander-script.png" alt="Easy as pie."></p>
<p>Someone who has never seen a computer before should be able to understand what
that’s doing. That’s the beauty of Scratch.</p>
<p>Scratch is the future of computer science education. Scratch has inspired
beginners’ computer science classes at Berkeley and Harvard. Scratchers go on
to build amazing things, go to amazing universities, and lead amazing lives.</p>
<hr>
<p>In a society increasingly dependent on technology, it’s scary how few of us
know how it all works. We’re breeding armies of muggles afraid of the handful
who try to discover how things work. We’re imprisoning inquisitive
schoolchildren and trying to “protect” the public with a war against
<a href="http://hardmath123.github.io/dear-hollywood.html">“hackers”</a>.</p>
<p>And it’s not going to change anytime soon. Of the over twenty <em>thousand</em> views
the game has gotten, only <em>nineteen</em> people have bothered to look inside at
what makes it tick.</p>
<p>Wake up, sheeple.</p>
]]></description>
            <link>http://hardmath123.github.io/falcon-lander.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/falcon-lander.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Thu, 17 Sep 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[The Seasoned Scratcher]]></title>
            <description><![CDATA[<p>What to learn after Scratch: a definitive guide.</p>


<blockquote>
<p>Your hosts for the evening are <code>Hardmath123</code> and
<a href="http://technoboy10.tk"><code>technoboy10</code></a> from Scratch.  Together, we have over
13 years of experience with Scratch and the computer science world beyond.</p>
</blockquote>
<p>So you think you’re a Scratch expert. You know the ins and outs of Scratch like
the back of your hand. You may even have hacked around with the Scratch source
code.</p>
<p>But you want something new. You want to learn more, explore, and discover. And
you don’t know where to start. Everyone you ask gives you their own advice.</p>
<p>Here’s ours.</p>
<h3 id="which-language-should-i-learn-">Which language should I learn?</h3>
<p>The eternal question. A lot of people define themselves by the programming
languages they use. People have very strong, emotional opinions about these
things. The truth is, in the big picture, you can get most things done with
most languages.</p>
<p>So before you pick a language, here’s a piece of advice: don’t collect
languages, collect <em>paradigms</em> (that’s CS for “big ideas”). Once you know the
big ideas, learning a new language should take you at most a weekend. Paradigms
stay the same; they just show up in different languages hidden in a new syntax.</p>
<p>Having said that, here are the big ideas we think you should look at.</p>
<p><strong>Functional programming</strong> is programming with functions. That means, in a way,
that you’re more focused on <em>reporter blocks</em> than <em>stack blocks</em>. You don’t
assign to variables much; instead of changing data in-place, you create copies
that have been modified.</p>
<p>A lot of people think functional programming is impractical when they first get
started–they don’t think you can get useful things done, or they think
functional languages are too slow. Paul Graham, founder of Y Combinator (a
Silicon Valley start-up which has more money than you want to know about) wrote
<a href="http://www.paulgraham.com/avg.html">this</a> piece on how his company very
successfully used a functional language called Scheme to “beat the averages”.</p>
<p>Scheme is one of the oldest languages around. It started off as an academic
language used in MIT’s AI labs but over decades has evolved into a more
mainstream language.</p>
<p>Many people have written their own versions of Scheme. The most popular one,
and the one we recommend, is Racket, which was built by an academic research
group but used by everyone–even <a href="http://practicaltypography.com/why-racket-why-lisp.html">publishers of
books</a>. It comes with
a <em>lot</em> of built-in features.</p>
<p>The best book to learn Scheme (and the rest of computer science) is <em>The
Structure and Interpretation of Computer Programs</em>, aka <em>SICP</em>. <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_start">It’s free to
read
online.</a>
Another good one is <em>The Little Schemer</em> and its sequel <em>The Seasoned Schemer</em>.</p>
<p>If you want to learn functional programming but still want Scratch-ey things
like blocks and sprites, learn to use <a href="https://snap.berkeley.edu">Snap<em>!</em></a>.
Snap<em>!</em> is Scratch with the advanced Scheme features thrown in.</p>
<p>(Bonus: Here’s Brian Harvey, the creator of Snap<em>!</em>, on <a href="https://www.cs.berkeley.edu/~bh/proglang.html">why Scheme should be
taught</a>.)</p>
<p>If you want to know more about Snap<em>!</em>, ask us on the <a href="https://scratch.mit.edu/discuss/topic/4455/">forum
thread</a>.</p>
<p><strong>Object-Oriented Programming</strong> is based on the idea of grouping data and
functions under structures called “objects”. A lot of languages provide
object-oriented features, and so you’re likely to run into the ideas no matter
what you choose to do.</p>
<p>The classic object-oriented language is Smalltalk—if you recall playing with
the Scratch 1.4 source code, you were writing in Smalltalk. Smalltalk is an old
language and isn’t used by anyone anymore. However, its legacy lives on: much
of its syntax and some of its ideas are evident in Objective-C, the language in
which you write iOS and OSX apps.</p>
<p>Another OOP language, Self, preached <em>prototyping</em>: a special kind of
object-oriented programming where objects come out of “factories” called
prototypes. You literally make a copy of the prototype when you make a new
object. Self let you treat prototypes as objects themselves. It was very meta.
This tradition lives on in JavaScript’s object-oriented style. JavaScript is
the programming language of the web: originally designed for making webpages
interactive, but now used for desktop software as well using Node.js.</p>
<p>The other kind of object-oriented programming is based on <em>classes</em>, which are
pre-defined kinds of objects. Your program is a list of definitions for
classes, and right at the end you create some instances of the classes to get
things done. This pattern is the focus of the AP Computer Science course, which
teaches you Java (more on this later). Java was widely used in industry for
many years, and is still popular (though less so than before).</p>
<p><strong>Statically Typed Languages</strong> are languages which care a lot about what kind
of thing your variables are. In Scratch, you can put a string into the addition
reported block and not have horrible things happen to you. Scratch isn’t
statically typed.</p>
<p>In a statically typed language, you will be warned that you can’t add a string
and a number even before you try to run the program. It will refuse to let you
run it. For huge codebases managed by hundreds of programmers in a big company,
this helps prevent silly errors. Though static typing probably won’t help you
much on a day-to-day basis, the ideas are worth learning about and you should
eventually get familiar and comfortable with the paradigm.</p>
<p>Java, as mentioned before, is statically typed. Other such languages are
Mozilla’s Rust and Google’s Go-lang. A recent trend is to add static typing
onto JavaScript, because plain old JavaScript is not very type-safe. You may
have heard of TypeScript by Google or Flow by Facebook.</p>
<p>The C programming language is also statically typed. C is extremely low-level.
It gives you a lot of control over things like memory use, the operating
system, hardware, networking, and processes. This lets you write very efficient
programs, but also makes it difficult to learn. It’s useful to have a working
knowledge of what the C compiler does, and how assembly languages work. As
such, learning C won’t teach you as much of the mathematical side of computer
science as the practical side.</p>
<p>Finally, Haskell is an old academic language that is making a serious comeback.
Haskell is statically typed with a very advanced type system. It is also
functional. It has a lot of neat language features, but is not very
beginner-friendly for a variety of reasons.</p>
<p><strong>Logic programming</strong> or <strong>declarative programming</strong> is a completely different
outlook on programming. Rather than telling the computer <em>how</em> to do something,
you tell it <em>what</em> to compute and the computer tries all possible inputs until
something works—in a clever and efficient way, of course. You can use it to
solve a Sudoku by explaining the rules of the puzzle without giving any hints
on how to solve it.</p>
<p>It looks like the computer is reasoning on its own, and in fact logic
programming is closely related to automatic proof generation.</p>
<p>Logic programming is mainly an academic thing with not too many practical
applications in the Real World&trade;. One application is database querying
with languages like SQL, which try to find all elements in a data base which
satisfy some criteria.</p>
<p>The popular languages of this paradigm are Prolog and Mercury.</p>
<p>We mention logic programming here only to give you some idea of what other
paradigms are out there. If you learn functional programming with <em>SICP</em>
(above), you’ll learn the basic ideas. As such, don’t worry too much about
learning logic programming unless you’re really interested in this stuff. You
won’t find yourself writing any “practical” code in Prolog.</p>
<p>Other well-known books on this material are <em>The Reasoned Schemer</em> and <em>The Art
of Prolog</em>.</p>
<hr>
<p>Having said all that, here’s a recap of the languages you might care about,
what they’re good for doing, what paradigms they try to embrace, and what we
want to say about them.</p>
<ul>
<li><p><strong>Snap<em>!</em> </strong> is just a step up from Scratch. The motto was “add as few new
things as possible that let you do as many new things as possible”. It’s a
great program with a nice community behind it, and can teach you a lot of CS.</p>
</li>
<li><p><strong>Scheme</strong> is like a text-based Snap<em>!</em>. Though there isn’t <em>too</em> much
“real-world” software written in Scheme, it’s certainly not “impractical”.
There exist popular social networks (Hacker News) and music notation software
(LilyPond) running on Scheme. Scheme will teach you to think in a new way.</p>
</li>
<li><p><strong>Python</strong> is a relatively easy language to learn after Scratch for most
people. Its syntax is supposed to resemble English. Python comes with a <em>lot</em>
of batteries included: there are modules that let you do many cool things.
It’s the most popular language out there for programming websites, and along
with IPython and sage/scipy/numpy/matplotlib, it’s used in the scientific
community. Python is good for automating some quick tasks (“I want to save
all Wikipedia articles in this category as HTML files in this folder on my
computer”). However, Python has its share of issues: it’s not easy to
distribute your code, and the language itself isn’t as “pure” or “clean” as
Scheme: it’s object-oriented (class-based) but also tries to be functional.</p>
</li>
<li><p><strong>JavaScript</strong> is the programming language of the Web: almost every website
you visit has some JavaScript on it. It’s functional, and it has prototyping
OOP. It resembles Scheme in a lot of ways. However, it is <a href="https://www.destroyallsoftware.com/talks/wat">often
criticized</a> for a really weak
type system (you can add two lists and get a string as a result). Though it
has flaws as a language, it is worth learning for its versatility: it runs on
anything that has a web browser (phones, laptops, televisions, watches,
toasters). You can make games with the <code>&lt;canvas&gt;</code> element, and even use
Node.js to run servers on your local computer (like Python). The blog you are
reading this post on runs on is compiled by JavaScript. There are tons of
libraries out there—don’t bother to learn jQuery or React or any other
“framework” when you’re getting started. Learn to manipulate the DOM
manually, and you’ll discover that you don’t need a framework for most
things.</p>
</li>
<li><p><strong>C</strong> is a low-level language, which makes it kind of messy to use. You need
to manage memory on your own (people say it’s the difference between driving
an automatic and a stickshift). However, it’s incredibly fast, and has some
surprisingly elegant features. C teaches you how the insides of your computer
<em>really</em> work. It also gives you access to a lot of low-level details like
hardware and networking. Variations on C include C++ and C#, which add
various features to C (for better or for worse). We recommend learning pure C
to get started.</p>
</li>
<li><p><strong>Java</strong> is an object-oriented language which was originally loved because,
like JavaScript today, it ran everywhere. The language itself is very
verbose—it takes you a <em>lot</em> of code to get simple things done. We
recommend only learning Java if you’re writing an Android app, or if you’re
taking the AP Computer Science course (which, for a smart Scratch programmer,
is pretty straightforward). </p>
<blockquote>
<p><strong>Should I take AP CS?</strong></p>
<p>Yes. Take it if you have a free spot in your schedule, because you will
probably breeze through the course. Don’t stress out too much about it. Use
it as an opportunity to make friends with fellow CS students at your school
and to get to know the CS teacher there.</p>
<p>If you don’t have a free spot, you could probably self-study it, but we see
little educational value (it might look good on a college application?). You
have better things to do.</p>
</blockquote>
</li>
<li><p><strong>Haskell</strong> is Scheme with a very powerful, “formal” type system. It is much
easier to understand the concepts once you’ve used Scheme and Java a bit. We
list it here only to warn how unintuitive it is at first and how hard it is
to get practical things done with it (like printing to the screen), and to
recommend <a href="http://learnyouahaskell.com"><em>Learn you a Haskell</em></a> as a learning
resource.</p>
</li>
</ul>
<p>Here are some languages you shouldn’t care about:</p>
<ul>
<li><p><strong>CoffeeScript, TypeScript, anything that compiles to JavaScript</strong>: Don’t use
one of these unless you really feel the need for a particular language
feature. Certainly make sure you know JavaScript really well before, because
all these languages tend to be thinly-veiled JavaScript once you really get
into them.</p>
</li>
<li><p><strong>Blockly, App Inventor, Greenfoot, Alice, LOGO, GameMaker, other teaching
languages:</strong> unless you have any particular reason to use one of these
languages, you will probably find it too easy: they are designed for
beginners, and won’t give you the flexibility or “real-world” experience you
want.</p>
</li>
<li><p><strong>Rust, Go, anything owned by a company</strong>: not because the language has any
technical flaws, but because of “vendor lock-in”: you don’t want your code to
be at the mercy of whatever a private company decides to do with the
language.  Languages that have been around for a while tend to stick around.
Go for a language that has more than one “implementation”, i.e. more than one
person has written a competitive interpreter or compiler for it. This helps
ensure that the standards are followed.</p>
</li>
<li><p><strong>PHP:</strong> <a href="http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/">PHP is not a great
language.</a> The
only time the authors use PHP these days is when trying to exploit
badly-written PHP code in computer security competitions.</p>
</li>
</ul>
<ul>
<li><p><strong>Perl, Ruby, Lua:</strong> Perl has essentially been replaced with Python in most
places: a good knowledge of the command line and Python are far more useful
to you. We haven’t seen any new exciting software written in Perl in a while.
Ruby also resembles Python in many ways—many say it’s much prettier—but
it’s known to be slower. It’s not as widely-used, but there exist big
projects that do (Homebrew and Github are both Ruby-based). Same for Lua:
it’s a nice language (Ruby’s syntax meets JavaScript’s prototyping OOP), but
it isn’t used by enough people. Languages like this tend to be harder to find
documentation, help, and working examples for.</p>
</li>
<li><p><strong>Esoteric languages:</strong> these are written as jokes. You should be creating
new ones, not programming in existing ones!</p>
</li>
</ul>
<p>Still confused? Here’s a flowchart to help you out (click for a large SVG):</p>
<p><a href="static/scratch-graph.svg"><img src="static/scratch-graph.png" alt="Flowchart"></a></p>
<p>Finally: your personal experience and preference is far more important than
anything we say. We cannot recommend a practical language any better than one
you are already productive in (pedagogical languages, however, are a different
deal).</p>
<p>So we’ve come a full circle: collect <em>paradigms</em>, not <em>languages</em>.</p>
<h3 id="tools-of-the-trade">Tools of the trade</h3>
<p>Programmers in the Real World&trade; are very dependent on their tools. In
fact, though we don’t recommend it, most people define themselves by their
tools.</p>
<p>This is largely because many of the more established tools in the CS world have
a very steep learning curve (because they were written by lazy hackers who want
to minimize keystrokes).</p>
<p>Here are our recommendations for what to invest in.</p>
<p><strong>A text editor</strong>: Text editors are sacred, because in theory they’re the tool
we spend the most time using. We can’t really recommend one because whatever we
say, we’ll face lots of heat from supporters of some other one. Instead, here’s
a short list of editors you might consider. All of these are free and available
for Mac/Linux/Windows.</p>
<ul>
<li><p><strong>Atom</strong>: This editor was created by the GitHub team. It’s hugely
customizable, with hundreds of themes and packages written by people. Atom is
notoriously slow, though, because it essentially loads an entire web browser
for its GUI. Cousins of Atom are <strong>Brackets</strong> by Adobe (just as slow, fewer
packages) and <strong>Sublime Text</strong> (faster and prettier). </p>
<blockquote>
<p>Tip from <code>technoboy10</code>: Oodles of packages are available, but don’t try to
use all of them. Find a few that really improve your coding workflow and use
those.</p>
</blockquote>
</li>
<li><p><strong>Vim</strong>: Vim is one of the oldest and most well-known text editors—if
you’re on a UNIX, you already have it installed. It runs in the command line,
and requires you to learn several key-combinations to get started. It really
is worth it, though, because Vim is amazing for productivity. In addition,
several other applications use Vim-style keybindings. It’s an informal
standard.</p>
<blockquote>
<p>Tip from <code>hardmath123</code>: trying to learn Vim? Write a blog post entirely in
Vim. Maybe just stay in insert mode for the first hour. Use <code>vimtutor</code> to get
started.</p>
</blockquote>
</li>
<li><p><strong>Emacs</strong>: Like Vim, it runs in the command line and has a nontrivial
learning curve. Unlike Vim, it is anything but lightweight. You can use Emacs
to check your email, play tetris, and get psychiatric counseling (<a href="https://en.wikipedia.org/wiki/ELIZA">no
joke</a>). Vim and Emacs users are old
rivals. See <a href="https://xkcd.com/378/">this comic</a> for details.</p>
</li>
</ul>
<p>The <strong>command line</strong>: learn to use <code>bash</code> from your terminal. It is extremely
empowering. The command line is the key to the insides of your computer, and
turns out to be surprisingly easy to get started with. Start with simple
operations like creating (<code>touch</code>) and moving (<code>mv</code>) files. Use <code>less</code> to read
them, and use <code>pico</code> or <code>nano</code> (or <code>vim</code>!) to edit them.  Along the way, learn
important components of the <a href="https://en.wikipedia.org/wiki/Unix_philosophy">UNIX
philosophy</a> by piping programs
to each other. Learn how to use regular expressions with <code>grep</code>; this is
life-changing because regular expressions show up in every language and give
you a lot of power over strings. Figure out how to use <code>man</code> pages and
<code>apropos</code> to get help. Soon you won’t be able to live without the command line.</p>
<p><strong>Git</strong>: For better or for worse, the most popular way for you to share code
these days is using a website called <a href="https://github.com">Github</a>. Github is a
web interface for a tool called <code>git</code>, which is a <em>version control software</em>
(another one is <code>hg</code>, a.k.a. Mercurial). <code>git</code> lets you keep track of your code
as it changes, and lets other people contribute to it without having to email
different versions of code around. It’s not that hard to learn, and you’ll need
to learn it if you want to contribute to any projects these days.</p>
<blockquote>
<p>Tip from <code>hardmath123</code>: Don’t worry if you don’t truly grok <code>git</code>. It’s my
personal hypothesis that nobody really understands it. Just have enough
working knowledge to get stuff done.</p>
</blockquote>
<p><strong>IRC</strong>: IRC or Internet Relay Chat is a decentralized chat protocol, which
means it’s like Skype except not controlled by any one company. It’s been
around for a while–it was used to organize a 1991 Soviet coup attempt. You
want to learn to use IRC because it’s not very intuitive at first look. But
many communities in the tech world communicate through IRC chatrooms, called
“channels”; it’s a great way to reach out and get help if you need it. The best
way to get into IRC is to just dig in–use <a href="http://webchat.freenode.net">Freenode’s
webchat</a> client at first, then experiment with
others (Weechat, IRSSI, IRCCloud, etc). Feel free to say hi to us: we’re
<code>hardmath123</code> and <code>tb10</code> on Freenode.</p>
<p><strong>Find (good) documentation</strong>: know about StackOverflow, Github, MDN, etc. We
won’t drone on about these sites. Just know that they exist. </p>
<blockquote>
<p>Tip from <code>technoboy10</code>: Google is a coder’s best friend. Everybody has a
different way of finding solutions to programming problems, but learning to
search and find answers online is an immensely valuable skill. If you’re not
a fan of Google, I recommend the <a href="http://ddg.gg">DuckDuckGo</a> search engine.</p>
</blockquote>
<h3 id="folklore-and-culture-some-reading-material">Folklore and Culture: some reading material</h3>
<p>The CS world, like any community, has its own set of traditions. It’s said that
UNIX is more an oral history than an operating system. With that in mind, here
are some books, articles, and websites for you to peruse at your leisure.</p>
<p>Don’t take any of them seriously.</p>
<p>(Disclaimer—some of these may have PG-13-rated content.)</p>
<ul>
<li><a href="http://www.catb.org/jargon/">The Jargon Files</a></li>
<li><a href="http://www.catb.org/esr/faqs/hacker-howto.html">How to be a hacker</a></li>
<li><a href="http://www.csf.ac.at/fileadmin/user_upload/BioComp/training/unix_haters_handbook.pdf">The UNIX-Haters’ Handbook</a></li>
<li><a href="http://folklore.org">Folklore</a></li>
<li>Webcomics:<ul>
<li><a href="https://xkcd.com">xkcd</a></li>
<li><a href="http://commitstrip.com">Commitstrip</a>,</li>
<li><a href="http://geek-and-poke.com">Geek&amp;Poke</a> (read these mainly to keep up with inside jokes)</li>
</ul>
</li>
<li><a href="http://www.goodreads.com/book/show/7090.The_Soul_of_a_New_Machine"><em>The Soul of a New Machine</em></a></li>
<li><a href="http://textfiles.com/100/dec.wars">DEC wars</a></li>
<li><a href="http://telehack.com">Telehack</a> (tell <code>forbin</code> that <code>hm</code> says hi)</li>
<li><a href="http://www.goodreads.com/book/show/816.Cryptonomicon"><em>Cryptonomicon</em></a></li>
</ul>
<h3 id="parting-words">Parting words</h3>
<p>You’re about to start on a wonderful journey. Enjoy it. Make friends. Make
mistakes. These choices are all meaningless; you’re smart and you’re going to
be alright no matter what text editor you use or which language you learn.</p>
<p>Hack on!</p>
]]></description>
            <link>http://hardmath123.github.io/after-scratch.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/after-scratch.html</guid>
            <dc:creator><![CDATA[technoboy10 and Hardmath123]]></dc:creator>
            <pubDate>Sun, 16 Aug 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A Suspicion of Plausible Answers]]></title>
            <description><![CDATA[<p>Investigating the physics of <em>Rendezvous with Rama</em></p>


<blockquote>
<p>He [Norton] had a suspicion of plausible answers; they were so often wrong.</p>
<p>— <em>Rendezvous with Rama</em>, Arthur C. Clarke</p>
</blockquote>
<p>Clarke’s <em>Rendezvous with Rama</em> describes the exploration of a giant spaceship
called “Rama”. If you haven’t read the book yet, go read it and come back,
because the rest of this post is a really big spoiler. I’ll be waiting; don’t
worry.</p>
<hr>
<p>Welcome back.</p>
<p>To me, the charm of <em>Rendezvous with Rama</em> is the way Clarke introduces parts
of the spaceship, lets you guess what they’re for, and then reveals their
purpose in a series of intertwined narratives. The book is a guessing game.</p>
<p>One of the central mysteries, of course, is the Southern Cliff of the
Cylindrical Sea: why is it so much higher than the Northern Cliff?</p>
<p>In a flash of inspiration, the exobiologist Dr. Perera realizes that when Rama
accelerates (to the north), the Sea would rise against the Southern shore; the
Cliff is a barrier to prevent a great flood. In his own words:</p>
<blockquote>
<p>“The Cylindrical Sea is enclosed between two cliffs, which completely circle
the interior of Rama. The one on the north is only fifty meters high. The
southern one, on the other hand, is almost half a kilometer high. Why the big
difference?  No one’s been able to think of a sensible reason.</p>
<p>“But suppose Rama <em>is</em> able to propel itself—accelerating so that the
northern end is forward. The water in the sea would tend to move back; the
level at the south would rise, perhaps hundreds of meters. Hence the cliff.”</p>
<p>— <em>Rendezvous with Rama</em>, Arthur C. Clarke</p>
</blockquote>
<p>On a roll now, Perera goes on to predict—with not more than twenty seconds of
thought and scribbling—the maximum possible acceleration of Rama based on the
height of the Cliff (500 meters). His result, 0.02g (2% of Earth’s
gravitational acceleration), is confirmed at the end of the book.</p>
<p>How did he do it? Let’s investigate.</p>
<hr>
<p>Here’s a diagram of Rama’s cross-section to help you follow along. It’s taken
from the cover art of a video game based on the novel; the image was posted to
<a href="http://www.foundation3d.com/forums/archive/index.php/t-551.html">a forum
thread</a> by
someone named DELTA.</p>
<p><img src="static/rama.jpg" alt="Rama cross section"></p>
<p>The first page of <a href="http://ebruneton.free.fr/rama3/rama.pdf">this paper</a>
contains a simpler schematic as well as some pretty pictures.</p>
<p>First, some raw data scraped by scouring the novel.</p>
<p>We have a couple of ways of determining the unaffected “gravity” (centrifugal
effect) on Rama. The centripetal acceleration is proportional to the square of
the angular velocity and the radius. Knowing that the Plains are 8km from the
axis about which Rama rotates, and that it rotates at 0.25rpm (a rotation every
4 minutes), we calculate that Rama’s gravity is 0.6 that of Earth’s:</p>
<p>\[ g_\text{rama} = \omega^2r = \left(\frac{2\pi}{4\times60\,\text{sec}}\right)^2\times(8000\;\text{m}) = 5.483 \text{m}/\text{s}^2 \approx 0.6\, g_\text{earth} \]</p>
<p>For those without MathJax, that said</p>
<pre><code>g_rama = w^2 r
       = (2pi / (4*60s))^2 * 8000m
      ~= 0.6 g_earth
</code></pre><p>This result agrees with a statement by one of the explorers, Mercer: when he
was less than 2km down the stairway, he said his weight was around a tenth of
what it would be on Earth.</p>
<hr>
<p>We know the width of the sea: it’s 10km across. Unfortunately, we know very
little about the depth of the sea. We do know that the seafloor is not uniform;
it’s ridged to disperse large waves. We even have a lower bound on the deepest
portion: at one point, an anchor is lowered 30 meters into the sea. However,
these facts were discovered <em>after</em> Perera’s calculation, so we could be
justified in assuming that the seafloor is uniformly “flat”. We also have an
upper bound of 2km because that’s the difference between Rama’s inner and outer
radii.</p>
<p>Let’s assume that the sea is at least 0.5 kilometers deep*. As long as it’s at
least that deep, we don’t need to know exactly how deep it is, because the sea
surface will never intersect with the seafloor.</p>
<p>Here’s what it looks like<sup>&dagger;</sup>:</p>
<p><img src="static/rama-geom-1.png" alt="A diagram."></p>
<p>Based on the force diagram, a bit of similar triangles magic shows that for the
water to reach a height of 500 meters, the ship must accelerate northwards at
6% of Earth’s gravity. This is arguably pretty close to 0.02 g, considering all
the approximations and eyeballed measurements involved. (At least, it’s the
correct order of magnitude, which is supposedly all astronomers really care
about.)</p>
<hr>
<p>*Interestingly, if you assume that the sea is shallower than 0.5 km, you can
try to reverse-engineer the exact depth Perera must have assumed. It turns out
that there are no real solutions for depth which yield 0.02g as the
acceleration. Here’s the diagram that corresponds to the scenario—the key
insight is that the area of the rectangle and the triangle must be the same
since the volume of liquid is the same.</p>
<p><img src="static/rama-geom-2.png" alt="Another diagram."></p>
<p>[<sup>&dagger;</sup>Apologies for the Paleolithic-era hand-drawn diagrams which
look like they were scanned in the ‘80s. I would appreciate it if someone could
whip up a nice computerized image in a vector format…]</p>
<hr>
<p>Overall, I’m impressed with the accuracy of Clarke’s physics. I suppose
attention to detail like that is what makes these novels so fascinating.</p>
<p>I would love to see other explanations of Perera’s result. Maybe I missed
something. Let me know if you make some discoveries.</p>
]]></description>
            <link>http://hardmath123.github.io/rendezvous.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/rendezvous.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Fri, 14 Aug 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[To Find Quarrel in a Straw]]></title>
            <description><![CDATA[<p>A pointless exercise.</p>


<blockquote>
<p>To all the friends I made this summer. Thanks for all the memories.
Amicabilibus!</p>
</blockquote>
<p>As with many exciting things, this one began with the prospect of bubble tea.</p>
<p>In case you’ve been missing out, bubble tea contains large tapioca pearls in it
and so it comes with extra-special straws that have twice the diameter of
normal straws.</p>
<p>Have you ever really thought about those straws? Of course you haven’t. I
applaud you and your sanity.</p>
<p>I, of course, <em>have</em> really thought about those straws. I occasionally say
things like “what if you tried to drink mercury through a meter-long straw?”,
which causes people to make excuses and leave, and TSA agents to make you take
your shoes off.*</p>
<p>But this being <em>my</em> blog, I’m now going to impose some thoughts about those
straws upon you. Brace yourself.</p>
<hr>
<p>See, the trouble is that you have to poke these straws through the top of your
drink. They have pointy tips to facilitate this, as kindly illustrated by the
very legit-looking website free-stock-illustration.com:</p>
<p><img src="static/bubble-tea-straw.jpg" alt="A picture of a straw."></p>
<p>Actually, anyone who’s ever poked a bendy straw through a juice box knows
exactly what I’m talking about. They have pointy tips, right? Right.</p>
<p>It turns out that you should be very concerned about this. Or not, if you’re
more of the “big picture” kind of person. Personally, I find this very
disturbing.</p>
<hr>
<p>What happens when you cut a straw? Well, a straw is a cylinder, so you should
get a cylindrical section. <a href="http://mathworld.wolfram.com/CylindricSection.html">Wolfram
Mathworld</a> reminds us that
planar slices of cylinders are ellipses:</p>
<p><img src="static/cylindrical-sections.gif" alt="Cylindrical sections"></p>
<p>But ellipses are not pointy. This is bad. Where does the pointiness come from?</p>
<p>If you ask someone, they’ll probably say things like “maybe it’s just a really
thin ellipse” or “maybe it’s actually not pointy and only cuts because the
plastic is very sharp”. So I guess it’s worth mentioning that (1) a thinner
ellipse would be just as blunt, and (2) if the plastic was that sharp, your
tongue would bleed each time you drank a Capri-Sun.</p>
<hr>
<p>I guess a more fundamental question to ask is, how are bubble tea straws cut?
This turns out to be surprisingly hard to find useful information on. <a href="http://www.madehow.com/Volume-4/Drinking-Straw.html">This
site</a> suggests some sort
of knifing mechanism. I envision a large-scale straw guillotine that chops up
hundreds of straws a minute and leaves a pile of straw-rubble on the factory
floor. (It turns out that <a href="http://lincoln.lib.niu.edu/islandora/object/niu-lincoln%3A33791">straw
guillotine</a> is
a thing, and happens to be a thing in my Google search history now. Please
don’t judge me?)</p>
<p>In any case, the point (ha!) is that when you use a blade to cut a straw, you
momentarily flatten it. This is probably easiest to see if you pick up a straw
and try to cut it with scissors: the part right at the blade gets flattened the
way a garden hose does if you step on it.</p>
<p>So really, what we’re thinking about is, “what happens when you squish a
straw?”. I whipped up some images to help think about what’s happening (ping me
if you want the code).</p>
<p>This is what happens when you unsquish a cut straw (squishedness is on the Y
axis, different profiles are along the X axis):</p>
<p><img src="static/straw-pointy.png" alt="Pointy straws"></p>
<p>Yay, the rounded cylinder is pointy!</p>
<p>Depending on how traumatic your trigonometry class was, that curve in the
bottom right corner should look vaguely familiar. It’s half a period of a
sinusoid.</p>
<p>Can you convince yourself why this makes sense? Think about what the side
profile of a spring looks like…</p>
<hr>
<p>We knew that a planar slice wouldn’t form a straight-line cut because ellipses
aren’t pointy. So a natural question to ask is, what shape does a planar cut
correspond to?</p>
<p>Do you have a guess?</p>
<p><img src="static/straw-round.png" alt="Round straws"></p>
<p>Yep, it’s the inverse sine function (why?). Can you come up with a way to map
“squished” functions to “cylindrical” functions? Is this function invertible?
So many questions!</p>
<hr>
<p>To be honest, this post isn’t about straws—as interesting as they are. It’s
about looking around and finding exciting things. It’s about ignoring the
grown-ups who think straws are unexciting. Because we’re surrounded by exciting
things. Everywhere. Like happiness and magic and diatomic nitrogen. It’s <em>your</em>
job to go seek them out.</p>
<hr>
<p>(*But really, could you drink mercury out of a meter-high straw? Even if you
managed to suck out <em>all</em> the air in the straw, the vacuum would only manage to
hold up 76 centimeters of mercury… Gasparo Berti thought about this stuff in
the 1600s, and sent a letter to Galileo which got the ball rolling and led to
Torricelli proving the existence of a vacuum and inventing the barometer. <a href="http://articles.eklhad.net/tube">Read
more in this delightful article by Karl
Dahlke.</a>)</p>
]]></description>
            <link>http://hardmath123.github.io/straw.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/straw.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Tue, 28 Jul 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Indefinite]]></title>
            <description><![CDATA[<p>Reflections on 40,000 words.</p>


<p>I have published over 40,000 words of writing now—more than <em>The Lion, the
Witch, and the Wardrobe</em> and <em>Hamlet</em>. Not that word count matters, of course.
Words, like people, are meaningless on their own.</p>
<p>And every time I sit down to write a new post, I wonder why I do it.</p>
<p>Readership in itself is hardly a goal. Unread words are just as meaningful.</p>
<p>Communication, on the other hand, is a goal. Every person who agrees—or
disagrees—with my ideas; every person who is inspired to write something of
their own; every person who shares a discovery with me or (dare I hope) learns
something from me: each one of you inspires me to write. You know who you are.</p>
<p>And as much as you, dear reader, may have learned from my writing, I’m
confident that I learned more. In attempting to publish at least twice per
month for the past year and a half, I discovered that it is not an unattainable
target. I have 2,000 words worth of material worth sharing every month and I’m
proud of every sentence.</p>
<p>That, of course, is not easy for me to say. If you have been with me from the
very beginning—and some of you have—you have seen pieces with questionable
claims and controversial ideas. You have seen opinions any self-respecting
person would disagree with. You have seen typography that may have left you
with permanently impaired vision.</p>
<p>In most cases, I agree with you wholeheartedly. I am thankful for both the
feedback you offered and the criticism you kept to yourself.</p>
<p>But—you can check this yourself—these pieces can still be seen in their full,
unmodified glory.</p>
<p>Their persistence is not a reflection of any dogmatic sentiments regarding
censorship or free speech. Rather, it is a reflection of my pride in every
piece I have written.</p>
<p>The truth is, if asked “Are you proud of your writing?”, I would say, “no”.
Like a recording of your voice, your own writing always has a slightly
nauseating quality.</p>
<p>What am I proud of, then?</p>
<p>I’m proud of the fact that I can look down on my old writing. Because it means
that somehow, over the years, I’ve risen. You can only look down from up above.</p>
<p>That’s what it means to be embarrassed about past writing; it means you’ve
grown, both as a writer and as a person.</p>
<p>Respect and pride: they’re measured on a relative scale. All you have is the
derivative; all you have is whether or not you’re a better person than you were
yesterday.</p>
<p>And all you have is the indefinite integral. Indefinite.</p>
<p>We don’t know the constant, the reference point, the absolute scale. We will
<em>never</em> know the constant. The constant, as always, represents conditions.
Things you can’t change. Things you don’t feel you deserve and things that
aren’t your fault.  Things that, for better or for worse, are constant.</p>
<p>Maybe that’s why I write.</p>
]]></description>
            <link>http://hardmath123.github.io/indefinite.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/indefinite.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Mon, 08 Jun 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[They do it with Mirrors]]></title>
            <description><![CDATA[<p>An idealized transcript of a talk I gave.</p>


<blockquote>
<p>This is an idealized transcript of a talk I gave a couple weeks ago at our
school’s “Engineering Night”, an event where students are invited to speak
and get others excited about engineering. I’m putting this up here because
it makes a great blog post, and because I want to be able to come back and
find these ideas in the future.</p>
</blockquote>
<hr>
<p>When I was five, my parents took me to go see <em>Finding Nemo</em>. It’s an amazing
movie, except when you’re five, all you really process are terrifying scenes
like this one.</p>
<p><img src="static/slides/shark.jpg" alt=" "></p>
<p>So we didn’t really go out for many movies after that.</p>
<p>The next one I remember seeing was in the fifth grade, actually, with my best
friend. We went to see <em>Cloudy With a Chance of Meatballs</em>.</p>
<p><img src="static/slides/cloudy.jpg" alt=" "></p>
<p>I loved it. Not just the story—the pictures. I loved how everything was so
realistic. I mean, I was told that these movies are computer-generated, but I
felt that I could reach out and touch those hair, or poke the huge mound of
Jell-O.</p>
<p>So when I got back, I wondered “how do you do it?” and like any fifth grader, I
came up with an explanation. I’d been watching NOVA, so I had heard of these
things called “photons” which are like tiny golf balls. And so my explanation
was that computers shoot these golf balls into a 3D model just like how you can
shoot bullets in Halo and Counter-Strike. And by knowing how these golf balls
bounced around, you could figure out what things looked like.</p>
<p>Yeah, it’s silly. But when I was in fifth grade, I also thought I could stick
out my hand under the sun and catch some photons like rain, and if I collected
enough I could drink them like any other liquid. I tried this, and it didn’t
work, and when I asked my teachers they told me I was watching too much NOVA.</p>
<p>And I don’t mind. I had an idea, I tested it, it didn’t work, and I wondered
why. As far as I’m concerned, that’s as close as I’ve ever gotten to the
“scientific method” that they teach you at school.</p>
<p>In any case, I ended up getting really lucky. Out science teacher used to order
these Scholastic magazines. They were mostly advertisements for books, but some
of them had short articles about new science.</p>
<p><img src="static/slides/scholastic.jpg" alt=" "></p>
<p>That week’s magazine actually had an article about <em>Cloudy With a Chance of
Meatballs</em>. And it explained… nothing, actually. It was a thinly veiled
advertisement. But it <em>did</em> have a link to a website called Scratch.</p>
<p>Scratch might be one of the best things to ever happen to me. It’s a website
that’s sort of analogous to YouTube, except instead of videos, you can upload
small programming projects, like Flash games. Scratch comes with its own really
simple programming language, and some of you in the audience might have already
used it if you took a CS class here.</p>
<p><img src="static/slides/14scratch.png" alt=" "></p>
<p>I loved Scratch. Over then next two years, I made games, stories, and—most
importantly—friends I still talk to today.</p>
<p>I, of course, forgot this whole 3D movie thing completely.</p>
<hr>
<p>…until one day, <em>Ratatouille</em> was on, and I remembered again.</p>
<p><img src="static/slides/ratatouille.jpg" alt=" "></p>
<p>Look at the water splashing next to Remy’s head. You can see the wall through
it. But it distorts the wall a bit. It’s called “refraction”.</p>
<p>If you asked me to draw this, I would have no idea how the water distorted the
wall. But when I look at this, it looks right. Somehow, the computers know how
this all works.</p>
<p>At this point, I was old enough to find things out for myself. So I Googled it.</p>
<p>It turns out that to make these movies, computers fire these tiny little balls,
like golf balls, into a 3D model. By seeing how the balls bounce, they can
figure out how the model looks.</p>
<p>It’s called “raytracing”, and it’s a serious academic subject, not a silly idea
a fifth grader came up with in the shower.</p>
<p><img src="static/slides/raytrace.png" alt=" "></p>
<p>So of course I wanted to know more. The first thing I learned was that when
they say “computer-generated movie”, what they mean is “supercomputer-generated
movie”.  This is the supercomputer that rendered <em>Cars</em>. <em>Cars</em> has a running
time just short of two hours and was rendered at 25 frames per second.</p>
<p>Guess how long it took to render a frame?</p>
<p><img src="static/slides/farm.jpg" alt=" "></p>
<p>Seven hours.</p>
<p>As technology improves, it takes us <em>longer</em> to render movies because we’re
getting so focused on detail. We’re simulating individual particles in an
ocean, and individual strands of hair.</p>
<hr>
<p>So I was entranced. I wanted to know more. And at this point, the only way to
learn more was to do it myself. So I did.</p>
<p><img src="static/slides/shiny.png" alt=" "></p>
<p>I’m so proud of this picture. It represents so much to me.</p>
<hr>
<p>Of course, my story didn’t end there. It ended in math class this year,
battling this monster.</p>
<p><img src="static/slides/cross.gif" alt=" "></p>
<p>This is the “cross product”. If you haven’t touched it yet, you’re lucky. It’s
the determinant of a matrix, except, some of its entries aren’t even numbers,
they’re vectors. And if you’re <em>really</em> lucky, you get <em>two</em> possible answers.</p>
<p>And to guess which one is right, you need to make gang signs. This is the
“right-hand rule”, and basically, everyone looks really funny doing this when
taking a test.</p>
<p><img src="static/slides/rhrule.png" alt=" "></p>
<hr>
<p>Something about this bothered me. And when I got home, I finally realized it.</p>
<p>These lines of code are—unaltered—from my raytracer.</p>
<p><img src="static/slides/direction.png" alt=" "></p>
<p>Looks familiar? It’s the cross product!</p>
<p>I wrote those lines of code in seventh grade. I had no idea what a vector was.
I don’t know how I got those equations—I just remember doing lots of algebra
on paper and somehow getting them.</p>
<p>And suddenly it all made sense to me. All this math we’re learning? It’s
<em>useful</em>. You know why the cross product has two answers? Well, the cross
product essentially says “if the ground is sloped this way, which direction
points away from the ground?”. You use it to say “which way should a photon
bounce when it’s bouncing away from a surface”.</p>
<p>Well, there are <em>two</em> directions away from the ground! You can go up into the
sky or you can drill down into the Earth.  And so the two answers just point in
opposite directions. It makes sense!</p>
<hr>
<p>What I’m trying to say is, you don’t need to take 10th grade math to make
something cool. Every single one of you in the audience here is completely
capable of creating something incredible. So what are you waiting for? Taking
that Stanford course on fluid dynamics someday? You don’t need it.</p>
<p>Every single one of you has so much knowledge right in front of you: the
Internet, libraries, and brilliant teachers everywhere. So stop waiting until
you’re “ready”, and go build something.</p>
]]></description>
            <link>http://hardmath123.github.io/raytracing.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/raytracing.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Mon, 01 Jun 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[PreTTY Screenshots]]></title>
            <description><![CDATA[<p>How to use the command line for screen capture tricks</p>


<p>Apparently it <a href="https://github.com/tj/n">has</a>
<a href="https://github.com/madbence/node-drawille">recently</a>
<a href="https://github.com/paulirish/github-email">become</a>
<a href="https://github.com/nathan/gistogram">fashionable</a> on Github READMEs to put in
a screenshot of a tty rather than explain the usage in actual words. There’s
nothing wrong with them for the most part, but what bothers me is that all
these screenshots are <em>ugly</em>. The links above are in increasing order of
beauty.</p>
<p>It turns out that taking nice screenshots is filled with icky pitfalls and
undocumented secrets. Here’s how you do it <em>right</em>—on a Mac running a
relatively recent OSX.</p>
<h2 id="basic-principles">Basic principles</h2>
<p>First of all, make sure you really want to use a screenshot. Plaintext is
generally enough to convey what your project does, and all the text is
copyable.</p>
<p>You should only be using a screenshot if your project has some curses-esque
behavior—messing with colors and drawing and raw mode and all that jazz.</p>
<p>When taking a screenshot, make sure your terminal profile (custom colors, dark
background, etc.) doesn’t interfere with anything. Also, make sure your
terminal prompt (<code>$PS1</code>) is sufficiently normal. Yes, a plain <code>&gt;</code> is
minimalistic and pretty. But it’s confusing—are you running bash, or is the
prompt part of your program’s interface?</p>
<p>Finally: use <em>small</em> windows. It’s hard to read text if you take a screenshot
of an enormous terminal window and shrink it down.</p>
<h2 id="key-combos">Key combos</h2>
<p>Most people know that you can use cmd-shift-4 to enter screenshot mode and
select part of the screen. A lesser-known trick is that you can press “space”
to enter <em>window selection mode</em>. This lets you click on a window to take a
screenshot <em>of that window</em>; and you end up with this (click to enlarge):</p>
<p><a href="static/terminal-3.png"><img src="static/terminal-1.png" alt="This should be a sample screenshot"></a></p>
<p>Why is this better than taking a normal screenshot and cropping? Because this
method has the underlying code actually draw a fresh, high-resolution copy of
your window—even in full-screen mode. It also includes that pretty shadow
(which, by the way, is rendered with a translucent PNG alpha channel so it
looks good on every background).</p>
<p>It’s also, to be honest, much easier for the lazy.</p>
<h2 id="command-line-screenshots">Command-line screenshots</h2>
<p>Surprisingly, this screen capture mechanism has a command-line API.
Unsurprisingly, it has terrible documentation.</p>
<p>The command itself is called <code>screencapture(1)</code>. You want to feed it the
undocumented-in-the-man-page <code>-w</code> option to specify the window ID.</p>
<p>To get the window ID, you can use AppleScript’s <code>tell app &quot;$APPLICATION&quot; to id
of window $N</code> command, where <code>$N</code> is the index of the window from “top” to
“bottom”. You want to set <code>$APPLICATION</code> to <code>Terminal</code> and <code>$N</code> to “1” to get
the focused window. Putting it together, we have:</p>
<pre><code>$ screencapture -o -l $(osascript -e &#39;tell app &quot;Terminal&quot; to id of window 1&#39;) screenie.png
</code></pre><p>This is, of course, terribly un-useful because it’ll take a screenshot of the
window the moment you type this in. I would suggest prefixing it with <code>sleep
5;</code>, and running it in a separate window (<em>not</em> a separate tab—that would get
captured in your output!). This gives you five seconds to switch to your target
window and get ready for the screenshot.</p>
<h2 id="animating-with-imagemagick">Animating with Imagemagick</h2>
<p>Sometimes, you can only really show how your project works with an animated
GIF.</p>
<p>In general, it’s good to keep GIFs short and small. They should loop cleanly:
the easy way to accomplish this is by running “clear” at the end of your
program so that the terminal state is restored to what it was before you ran
it.</p>
<p>To make a GIF, you need to take multiple screenshots by looping
<code>screencapture(1)</code> (you don’t really need a delay, since the process of
capturing is so slow):</p>
<pre><code class="lang-bash">rm screenies/screenie-*.png
N=0
while true; do
    screencapture -l $(osascript -e &#39;tell app &quot;Terminal&quot; to id of window 1&#39;) screenies/screenie-$(printf &quot;%05d&quot; $N).png
    printf &quot;Created %05d\n&quot; $N
    let N=$N+1
done
</code></pre>
<p>Then, you can use Imagemagick (<code>brew install imagemagick</code>) to stitch them into
a GIF using the <code>convert(1)</code> command. Make sure you specify <code>-alpha remove</code> for
each frame so that the shadows get rasterized properly:</p>
<pre><code class="lang-bash">convert $(for a in screenies/*; do printf -- &quot;-delay 1x60 -alpha remove %s &quot; $a; done; ) result.gif
</code></pre>
<p>This step will take a while and output a monstrously huge GIF, because the PNGs
are pretty big. You can use Imagemagick <code>-quality</code> and <code>-resize</code> to shrink them
substantially:</p>
<pre><code class="lang-bash">mkdir screenies-compressed
cd screenies

for a in *; do
    convert -quality 80 -resize 60% $a ../screenies-compressed/$a
done;
cd ..
</code></pre>
<p><img src="static/terminal-2.gif" alt="This should be a sample screencast"></p>
<p>If you take screenshots often, it’s probably worth aliasing these commands in
your <code>~/.profile</code>.</p>
]]></description>
            <link>http://hardmath123.github.io/terminal-screenies.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/terminal-screenies.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Thu, 14 May 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[An Elementary Problem]]></title>
            <description><![CDATA[<p>Can you find the Solution?</p>


<p>This is The Awesome Elements Problem. I wrote it for my AP Computer Science
class, but I decided to put it up here because I think it’s pretty, uh,
<em>elementary</em>.</p>
<p>Perhaps more than the actual problem, I love the bonus problems at the bottom.
They show how all these “boring” Scheme exercises can be used to do all sorts
of neat things. They’re written to introduce a new idea with lots of
questions—the solver is expected to explore them both on their own, with
external resources, and, of course, with other friends.</p>
<p>Finally, it’s worth noting that (as the first bonus problem should make amply
clear) this problem is an absolute pain to do in an imperative language. I
think it lets beginners see a rare outside-the-textbook example of functional
programming rocking out in the wild, rather than silly contrived scenarios
involving bank accounts or store inventories or parking meters.</p>
<p>Teachers are welcome to steal this for their classes.</p>
<hr>
<p>Some names are inherently different from others. For instance, the name Casey
can be written as a list of element symbols, as Ca-Se-Y
(Calcium-Selenium-Yttrium). However, Josh cannot be written this way. In this
project, you get to write a Scheme program to break up a word into
its—ahem—constituent elements.</p>
<p>We begin by defining a list of all the elements. An element’s symbol is
described by a list of Scheme symbols, so Helium is <code>&#39;(h e)</code>. As a sanity
check, you can run <code>(length elements)</code> and get 118.</p>
<pre><code>(define elements &#39;((a c) (a g) (a l) (a m) (a r) (a s) (a t) (a u) (b) (b
a) (b e) (b h) (b i) (b k) (b r) (c) (c a) (c d) (c e) (c f) (c l) (c m) (c
o) (c r) (c s) (c u) (d b) (d s) (d y) (e r) (e s) (e u) (f) (f e) (f m) (f
r) (g a) (g d) (g e) (h) (h e) (h f) (h g) (h o) (h s) (i) (i n) (i r) (k)
(k r) (l a) (l i) (l r) (l u) (m d) (m g) (m n) (m o) (m t) (n) (n a) (n b)
(n d) (n e) (n i) (n o) (n p) (o) (o s) (p) (p a) (p b) (p d) (p m) (p o)
(p r) (p t) (p u) (r a) (r b) (r e) (r f) (r g) (r h) (r n) (r u) (s) (s b)
(s c) (s e) (s g) (s i) (s m) (s n) (s r) (t a) (t b) (t c) (t e) (t h) (t
i) (t l) (t m) (u) (u u b) (u u h) (u u o) (u u p) (u u q) (u u s) (u u t)
(v) (w) (x e) (y) (y b) (z n) (z r)))
</code></pre><p>Whew. For extra credit, come up with a way to make that list automatically from
some table you find on the Internet.
<a href="http://akiscode.com/project_files/pt/periodictabledump.csv">Here’s</a> a nice
one.</p>
<p>Let’s warm up with some easy helper functions. Write
<code>(get-rest-of-string str len)</code>. It should return the list <code>str</code> after the first
<code>len</code> elements have been removed.</p>
<p>If you’ve written <code>compose</code> before, think of a super-elegant way to do this.</p>
<p>Now, write <code>(begins-with-element str el)</code>, where <code>str</code>
and <code>el</code> are lists of symbols. The function should return true if <code>el</code> is
exactly the beginning of <code>str</code>, and false otherwise. Think about what should
happen if either string is empty.</p>
<pre><code>(begins-with-element &#39;(d o c t o r w h o) &#39;(d o c))
--&gt; #t
(begins-with-element &#39;(a m e l i a p o n d) &#39;(a m y))
--&gt; #f
</code></pre><p>It turns out that these are all the helpers we need to write <code>elementize</code>.
<code>elementize</code> is our main function. It breaks up the word <code>str</code> into elements
in the list <code>els</code>, and returns <em>all</em> possible results. Fill in the blanks to
complete <code>elementize</code>.</p>
<p>Or, if you can think of a better way to write it that doesn’t fit in the
blanks, do that instead.</p>
<pre><code>(define (elementize str els)
    (cond ((null? els) ___)
          ((null? str) ___) ; Hint: this is not the same as above.
          ((begins-with-element ___ (___ ___))
           (append
               (elementize ___ (___ ___)) ; Remember, `append` concatenates
                                          ; two lists into one bigger list.
               (map
                    (lambda (list-of-subsolutions)
                        (cons (___ ___) ___))
                    (___
                        (___
                            ___
                            (length (___ ___)))
                        ___))))
          (else (elementize ___ (___ ___)))))
</code></pre><p>You can use these tests to try out <code>elementize</code>. I’ve provided the solutions
at the bottom of this page.</p>
<pre><code>(write (elementize &#39;(j a v a) elements))
(newline)
(write (elementize &#39;(i s) elements))
(newline)
(write (elementize &#39;(u n n e c e s s a r y) elements))
(newline)
</code></pre><hr>
<p>Great job! Now for the fun part. Try solving each of the bonus problems below.
They’re in no particular order of difficulty. Each one is meant to introduce
you to a new, exciting CS topic.</p>
<p><strong>Bonus problem 0!</strong> Rewrite your solution in C or Java. Time yourself. Then
realize how much you love Scheme.</p>
<p><strong>Bonus problem 1!</strong> UNIX computers come with a built-in dictionary of English
words in the file <code>/usr/share/dict/words</code>. Each word is on its own line. Spend
some time hacking Scheme to see if you can find the single English word that
can be elementized the most ways. How about the longest elementizable word? Are
there any “unnecessary” elements which can be removed from the list without
making any words un-elementizable?</p>
<p><strong>Bonus problem 2!</strong> You’ve just discovered a new element! With all your
modesty, you decide not to name it after yourself. Instead, you decide to name
it so that the addition of the new element will maximize the number of new
elementizable words in English (based on the list above). What do you name it?
(This one is hard because the program needs to be fast! See if <em>memoization</em>
can be useful.)</p>
<p><strong>Bonus problem 3!</strong> On a small planet in the vicinty of Betelguese, only two
elements can exist in a stable state: Zaphodium and Zemzine. Their symbols were
carelessly named Z and Zz by the Chief Chemist (who was later thrown into a vat
of zaphodous zemzide (ZZz) by his angry confused chem students).</p>
<p>How many different ways are there to elementize the word <code>zzzzzzzzzzzzzzzz</code>
with Z and Zz? How is this related to the question <em>“how many ways are there to
cover a two-by-ten grid with dominoes”</em>? (Hint: this is purely a math problem.
You can use a computer to help find the answer, but try to use math to prove
it.)</p>
<p><strong>Bonus problem 4!</strong> Read about <em>lazy lists</em>. Figure out how to implement them
in Scheme, and then use them to solve this problem. Is your solution faster?
More space-efficient? Does it look prettier?</p>
<p>Once you’ve done that, read about <code>call-with-current-continuation</code>. Figure out
how to use it cleverly to solve this problem (if you’re confused, read about
<em>backtracking</em>, or consult the Python program linked at the bottom of this
page). Is your solution faster? More space-efficient? Does it look prettier?</p>
<p>Think about how the above two implementations are the same, and how they are
different. Can you use <code>call-with-current-continuation</code> to implement lazy
lists?</p>
<p><strong>Bonus problem 5!</strong> Read about <em>regular expressions</em>. Which regex do names
like “Casey” match? Which regex do names like “Josh” match? Which of the
previous two questions is easier, and why?</p>
<p>You can use a program called <code>grep</code> to test your solutions.</p>
<hr>
<p>(Non-aqueous) Solutions to the tests above:</p>
<pre><code>java (0)
()  --- Java is *clearly* not an awesome name. Try Lisp instead.

is (1)
(((i) (s)))

unnecessary (2)
(((u) (n) (n e) (c e) (s) (s) (a r) (y))
 ((u) (n) (n e) (c) (e s) (s) (a r) (y)))
</code></pre><hr>
<p>(This problem was written in November 2014. It is based on a <a href="https://gist.github.com/Hardmath123/7862258">bad Python
program</a> I wrote in December 2013.
The only modification is that it was originally distributed as a Scheme source
file where all the text was commented out, and method stubs were left for
students to fill in. I have also added a couple of bonus problems—only 1-3
were in the original source. Please contact me directly if you’d like the
original file, along with its solution file.)</p>
]]></description>
            <link>http://hardmath123.github.io/elementary.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/elementary.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sun, 03 May 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[I Believe in Magic]]></title>
            <description><![CDATA[<p>I hope you do, too.</p>


<p>Ever since I was a little kid, I loved magic.</p>
<p>I didn’t love rabbits coming out of top hats, or various deceptions with
colorful pieces of cloth. I loved real magic: magnetic levitation, periscopes,
and predicting the weather.</p>
<p>I owned a few of those books that are filled with fun elementary school science
experiments like baking soda and vinegar volcanoes. The only experiments I
cared for were the ones where the result looked like a miracle unless you
understood the science.</p>
<p>As I got older, I started giving up on the real world’s reliability. But I
still found magic everywhere. I found magic in very clever puns (the kind which
are so perfect, they can only exist due to willful human interference in the
evolution of the English language). I found magic in music, in pieces that seem
impossible to play based on a cursory examination of the anatomy of the human
hand. I found magic in perfect murder mysteries, with delicate plots hinging on
countless trivial details placed harmoniously throughout the chapters.</p>
<p>Most of all, I found magic in math.</p>
<hr>
<p>I don’t find much pleasure in pretty proofs and groups and all those other
things that mathematicians find beautiful. I appreciate them for what they are,
but I can’t look at a prime number and feel a rush of joy or tranquility like
Christopher Boone does. I don’t like doing math for the sake of math. In that
sense, I haven’t seen the true divine light that many successful mathematicians
have, and I doubt I ever will. I’m not that kind of person.</p>
<p>But I still find magic in math.</p>
<p>I’m entranced by the fact that you can draw a regular 17-gon with just a
compass and a straightedge. I’m amazed by the fact that you can find the sum of
the factors of a hundred million million million fast, without a calculator.</p>
<p>I like the math that lets you do magic—<em>real</em> magic—with just a bit of
thought. I like proofs whose results I don’t believe (c’mon, there’s no <em>way</em>
the ant reaches the end of the rubber rope). Proofs that give you an edge over
everyone else, even though everyone else could have come up with them on their
own (because believe it or not, switching doors makes a difference).</p>
<p>I like math that beats intuition (how is this the closed form for the Fibonacci
numbers? Is this even an integer all the time?!). I like math that gives us
superpowers (how can you <em>possibly</em> communicate with someone without agreeing
on a shared key ahead of time?).</p>
<p>In short, I don’t find fractals beautiful but I have deep spiritual moments
when I realize that you can compute their areas.</p>
<p>And I’m content with this appreciation, because it gives me something to wonder
and marvel at, which is all you really need to be happy. Perhaps I’m incapable
of appreciating the intrinsic beauty of the existence of certain mathematical
truths. But I am certainly capable of appreciating the wizardry required to
discover—rather, create—them.</p>
<p>To me, magic is the ability to take something impossible and make it possible.
And I believe in magic.</p>
<hr>
<p>Luckily for us, it turns out that the world is a huge, mysterious, magical
place. The moment you realize that, you want to become a wizard. You want to
learn.</p>
<p>It’s not just math. History is magic when you realize that you can explain why
certain villages in India speak fluent Portuguese. Chemistry is magic when you
can predict the outcome of a reaction just by looking at the inputs. And on and
on and on and on.</p>
<p>The best incentive to learn is a prospect of wizardry. When we see miracles, we
want to be capable of causing them.</p>
<p>So please show people miracles. Show your kids, students and friends impossible
things and maybe if we’re lucky some of them will teach themselves how to make
them possible.</p>
<p>It’s the only way to instill a real love for knowledge.</p>
]]></description>
            <link>http://hardmath123.github.io/believe-in-magic.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/believe-in-magic.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Tue, 14 Apr 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Stop Teaching Intro CS]]></title>
            <description><![CDATA[<p>Reflections on a worrying trend.</p>


<p>One of the reasons I love computer science is that in a good community,
everyone is a teacher. You don’t need to attain some degree of credibility
before you can go around helping others—you just need to have information and
the will to share it. That’s why I can write informative blog posts and help
people debug Python issues. It’s why StackOverflow exists and thrives.</p>
<p>It’s like we’re all trying to climb a mountain, and we do so by lending a hand
to whoever’s below us while getting a boost from whoever’s above us. The people
at the very top are researchers, people blazing new trails and discovering new
computer science.</p>
<p>In a way, this is <em>better</em> than the classical model of those at the top of the
mountain pulling us all up. Someone who has just understood an idea—recursion,
the Y combinator, type theory, whatever—is better-equipped to teach it than
someone who takes it for granted having worked with that idea for ages.</p>
<p>…except it doesn’t quite work out like that. The problem is, somewhere near
the middle of the mountain, people stop helping you up. After the first few
cliffs, you suddenly lose sight of the smarter people, the people who were
always a step ahead of you and ready to help. You have to pull yourself up, and
that’s hard and lonely. And you wonder where they all went.</p>
<p>Then you look down, and you realize that all those people are back at the
base of the mountain running “Learn Python in Two Weeks” workshops.</p>
<hr>
<p>Why do we put so much time, money, and energy into teaching newbies computer
science?</p>
<p>Part of it—and it’s hard to admit—is that it looks <em>really</em> good. Teaching
intro CS looks like community service. For institutions, it’s a great selling
point. For students, it’s r&eacute;sum&eacute; material.</p>
<p>It’s also <em>easy</em>. You know how to teach someone the basics of JavaScript
because you know those things so well. It’s trivial to find students, because
everyone wants to learn web development and start the next Facebook.</p>
<p>On a less cynical note, it’s <em>fun</em>. Teaching is inherently fun, and CS is
something that we have the opportunity to teach to an excited audience without
any formal barriers.</p>
<hr>
<p>(Just to disclaim myself: I totally believe in getting more people into CS and
providing young students with opportunities to learn. I just believe in keeping
a very high standard for these opportunities, and (more importantly) leaving
them as just that: opportunities.)</p>
<hr>
<p>Anyhow. I see two major problems with this.</p>
<p>Firstly, there are now a million different ways a beginner can learn CS, and so
there is naturally a huge variance in quality. I think one of the saddest
things is when someone is promised to be taught “web development” and is
instead force-fed a PHP crash-course that confuses them, potentially turning
them away from CS. Pedagogy is hard; it should be left to the experts.</p>
<p>Of course, “expert” doesn’t necessarily mean “has a teaching degree”. I would
trust an excited teenager who just HTML’d his first blog to do a perfectly good
job teaching a newbie web development.</p>
<p>As much as I support entreating beginners to learn CS, I believe that the best
learning is self-driven. The people who will go on to have happy, successful
careers in technology don’t need to be led by the hand. They will figure things
out for themselves without a curriculum, and they will probably end up learning
more from the process.</p>
<p>All this attention towards teaching beginners is superfluous and only serves to
dilute the brilliant resources that amazing teachers spend time creating.</p>
<p>Secondly, focusing so intently on teaching beginners takes attention away from
the “intermediates”. People who have conquered the first few cliffs, and are
now looking up at the next few. The number of resources for such people is
strikingly lower. Once you’ve graduated a beginning course, you don’t know
which way to proceed.</p>
<p>Everyone in the CS world has a responsibility to guide those below them.</p>
<p>Paying attention here would catalyze progress, and give hundreds of smart high
schoolers (and middle schoolers) around the world goals and ways to achieve
them.</p>
<p>Remember when I said CTFs are better than hackathons? This is another reason
why. CTFs cater to both beginners <em>and</em> experts alike, giving both challenges
and helping both find ways to learn new things.</p>
<hr>
<p>So what can we do?</p>
<p>We can write blog posts about advanced topics. We can spend less time creating
beginners’ tutorials, and more time telling post-beginners the way forward.
Creating maps on how to go from “experienced” to “expert”.</p>
<p>Finally, we can try to bring smart, like-minded programmers of similar
experience levels together, because these interactions result in a great deal
of learning.</p>
]]></description>
            <link>http://hardmath123.github.io/stop-teaching-beginners.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/stop-teaching-beginners.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Mon, 06 Apr 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[How Random is xkcd?]]></title>
            <description><![CDATA[<p>A blatant abuse of statistics.</p>


<p>Apparently Randall Munroe gets a lot of messages saying that the “random”
button on xkcd is biased.</p>
<blockquote>
<p>2015-03-19 16:47:00    <strong>Hobz</strong>    also, Randall, the random button on the xkcd
frontpage is frustratingly un-random</p>
<p>2015-03-19 18:50:52   <strong>~Randall</strong>    it’s random.</p>
<p>2015-03-19 18:50:59   <strong>~Randall</strong>    people contact me constantly to tell me
that it’s not</p>
<p>2015-03-19 18:51:17   <strong>~Randall</strong>    which is a nice illustration of that mental
bias we have</p>
</blockquote>
<p>I thought I would do a little investigating to see just how random xkcd is.</p>
<hr>
<p>Making consistently random numbers (yes, that sounds weird) is really important
in things like cryptography. Unrandom random numbers can cripple an otherwise
secure network. So there’s a surprisingly large amount of work dedicated to
randomness.</p>
<p>There are services like <a href="http://www.random.org">random.org</a> which pride
themselves on randomness, and <a href="http://www.fourmilab.ch/hotbits/">HotBits</a>,
which lets you order random bytes that are generated from radioactive decay. A
lot of applications use <code>/dev/urandom/</code>, which is an OS-level random generator
that uses all sorts of sources of entropy such as network noise, CPU heat, and
the current weather in Kansas.</p>
<p>Unfortunately, it’s <em>really</em> hard to tell whether numbers are random or not.
Of course, patterns <a href="http://boallen.com/random-numbers.html">can creep into random
numbers</a>. But more annoyingly, a
glaringly obvious pattern might just be accidental. My favorite example of this
is the <a href="http://en.wikipedia.org/wiki/Feynman_point">Feynman Point</a>, which is a
series of lots of 9s that appears somewhere in the (very unpredictable) decimal
expansion of pi.</p>
<p><img src="http://imgs.xkcd.com/comics/ayn_random.png" alt="xkcd 1277"></p>
<p>There are a bunch of established ways to test the randomness of a random number
generator (such as the excitingly-named <a href="http://en.wikipedia.org/wiki/Diehard_tests">Diehard
tests</a>). They all test for features
that ostensibly random data should have. For example, a random stream of bits
should have almost as many ones as zeros. Not all tests are that obvious,
though, and statistics can be very slippery and unintuitive when it feels like
it.</p>
<p>NIST (the National Institute of Standards and Technology, who deal with things
like how long an inch is and how to backdoor elliptic curves)
<a href="http://csrc.nist.gov/groups/ST/toolkit/rng/documentation_software.html">publishes</a>
a standard for randomness based on such tests, and distributes software that
runs these tests on datasets.</p>
<p>I wrote a Python program to download 10,000 xkcd-random numbers (yay
<code>requests</code>!), and converted them into bitstrings. Then, I fed them to the NIST
Statistical Test Suite.</p>
<p>The results are below:</p>
<pre><code>
------------------------------------------------------------------------------
RESULTS FOR THE UNIFORMITY OF P-VALUES AND THE PROPORTION OF PASSING SEQUENCES
------------------------------------------------------------------------------
   generator is &lt;data/data.xkcd.long&gt;
------------------------------------------------------------------------------
 C1  C2  C3  C4  C5  C6  C7  C8  C9 C10  P-VALUE  PROPORTION  STATISTICAL TEST
------------------------------------------------------------------------------
  5   8   7  13   9   8  13  12  15  10  0.437274    100/100     Frequency
 10  10  11   9  10  16  10   6   8  10  0.759756     99/100     BlockFrequency
  5  12  13  10   7  10  10  10   9  14  0.699313    100/100     CumulativeSums
  8   3  13   9   9  14  13   8  12  11  0.366918     98/100     CumulativeSums
  8  12  11   3   9   8  17  12   9  11  0.224821    100/100     Runs
  7   8   8   6  15   9  12   9  15  11  0.437274     99/100     LongestRun
  7   8   7  16   0  25   0  25   0  12  0.000000 *  100/100     FFT
  3  10   4  19  15   0  18   6  10  15  0.000009 *  100/100     Serial
  9  14  10   2  14   8   6  10  16  11  0.080519    100/100     Serial
 16   1   5   9   6   0   6   0  10  47  0.000000 *   93/100  *  LinearComplexity
</code></pre><p>The important column here is “Proportion”, which shows the pass rate. They’re
all stellar.</p>
<p>If that isn’t convincing, I ran an obviously nonrandom sample for comparison.
This is what NIST’s STS thinks of the first 100,000 bits of Project Gutenberg’s
<a href="http://www.gutenberg.org/dirs/etext98/2ws1610.txt">plaintext version</a> of
<em>Romeo and Juliet</em>:</p>
<pre><code>
------------------------------------------------------------------------------
RESULTS FOR THE UNIFORMITY OF P-VALUES AND THE PROPORTION OF PASSING SEQUENCES
------------------------------------------------------------------------------
   generator is &lt;data/data.rnj&gt;
------------------------------------------------------------------------------
 C1  C2  C3  C4  C5  C6  C7  C8  C9 C10  P-VALUE  PROPORTION  STATISTICAL TEST
------------------------------------------------------------------------------
 95   3   0   1   0   0   1   0   0   0  0.000000 *   25/100  *  Frequency
 55  14  10   6   6   3   1   1   3   1  0.000000 *   64/100  *  BlockFrequency
 94   3   1   0   0   1   1   0   0   0  0.000000 *   28/100  *  CumulativeSums
 93   4   1   1   0   0   0   0   1   0  0.000000 *   30/100  *  CumulativeSums
 51   7  10  10   4   4   2   5   2   5  0.000000 *   61/100  *  Runs
 90   8   1   1   0   0   0   0   0   0  0.000000 *   44/100  *  LongestRun
 92   2   2   2   0   1   0   1   0   0  0.000000 *   23/100  *  FFT
100   0   0   0   0   0   0   0   0   0  0.000000 *    0/100  *  Serial
100   0   0   0   0   0   0   0   0   0  0.000000 *    0/100  *  Serial
 14   2   2   7  11   0   4   0  11  49  0.000000 *   95/100  *  LinearComplexity
</code></pre><p>Much worse.</p>
<p>I encourage you to play with the STS code. It lets you do all sorts of other
neat things, like testing bitstrings for common “templates” and reporting if
too many are found. It also segfaults all over the place, which is actually
very disturbing considering that it’s technically part of the US government’s
computer security project.</p>
<p>In any case, we’ve established that xkcd’s random generator is reasonably
unpredictable and unbiased. As it happens, they’re using the Mersenne Twister,
which is a well-established pseudorandom generation algorithm.</p>
<hr>
<p>So why does the random number generation appear so biased when we’re idly
refreshing on lazy Sunday nights? Part of it is, of course, human nature. We
like to see patterns everywhere.</p>
<p>But here’s a more concrete, mathematical explanation. The conceptual idea is
that in the beginning, hitting “random” is likelier to hit an unread comic, but
once you’ve seen more and more of them, you get repeats. Let’s try to quantify
this: we’re going to calculate the <em>expected value</em> of the number of times you
need to hit “random” until you have seen every single comic. You may have seen
this problem in the context of “how many times do you need to roll a die until
you have rolled all six faces at least once?”.</p>
<p><a href="http://en.wikipedia.org/wiki/Expected_value">Expected value</a> is the average
value of some random variable if you do an experiment lots of times. For
example, if you roll a die gazillions of time, the average number you’ll get is
($ (1+2+3+4+5+6)/6 = 3.5 $), so that’s the <em>expected</em> value.</p>
<p>We’re going to calculate the expected number of times you hit “random” by
calculating the number of times you need to hit it to get the first, second,
third, and (in general) nth unique comic. Then, because of a useful property of
expected values, we can just add them together until ($ n = 1500 $) (there are
1500 comics published as of right now) to see how long, as of today, this
process would take.</p>
<p>If you’re looking for your ($ n $)th unread comic, each time you hit “random”
you have a ($ 1 - n/1500 $) chance of getting a fresh one. This is a <a href="http://en.wikipedia.org/wiki/Geometric_distribution">geometric
probability distribution</a>,
which is Math for “you keep trying something with a constant probability until
it succeeds”.  For geometric probability distributions, the expected value is
one over the probability (though I’m not going to prove it here, this
intuitively makes sense: you would expect to have to roll a die around 6 times
until you get your first 1, or to flip a coin twice until you get your first
heads).</p>
<p>Anyhow, for the nth comic, the expected number of clicks is ($ 1500/(1500-n) $). Adding
these up for each ($ n $), we have this monstrosity:</p>
<p>\[ \sum_{n=1}^{1500} \frac{1500}{n} = \frac{1500}{1500} + \frac{1500}{1499} + \dots + \frac{1500}{2} + \frac{1500}{1} \]</p>
<p>This works out to, on average, 11836 clicks. That’s a lot of clicks.</p>
<p>As common sense dictates, the more times you have clicked “random”, the less
likely it is for you to hit a new comic. And that’s why Randall’s random button
seems biased.</p>
<hr>
<p>One more bit of statistics: if you’ve taken a probability class, you might have
heard of the birthday problem. That is, say you have a party with ($ n $) people.
What is the probability that some pair of people at the party share a birthday?</p>
<p>It turns out that if you have just 23 people, the probability is already 50-50.
This is somewhat counterintuitive; most birthday parties only have one birthday
boy! The fallacy is that the problem isn’t asking if some <em>particular</em> person
shares a birthday with someone else. It’s asking if <em>any</em> two people share a
birthday.</p>
<p>The birthday “paradox” turns out to be important in cryptography, especially
when looking for hash collisions. The number of hashes you need to generate
before you hit a collision is similar to the number of people you need at a
party before some pair shares a birthday—much smaller than what you would
expect.</p>
<p>In terms of xkcd-surfing, this helps answer the question “how many times will I
hit random before I see a repeat?”.</p>
<p>There are plenty of good explanations for the math behind the birthday problem
online (<a href="http://mathworld.wolfram.com/BirthdayProblem.html">Wolfram Mathworld</a>
and <a href="http://en.wikipedia.org/wiki/Birthday_problem">Wikipedia</a>)—but if you
don’t believe the number 23 quoted above, it’s worth spending some time trying
to solve it yourself just to understand what’s really going on (it’s not hard).
I’m just going to dump the formula here without any explanation.</p>
<p>For 1500 comics, the probability that you get a repeat after ($ k $) clicks is:</p>
<p>\[ 1 - \frac{1500!}{(1500-k)!1500^k} \]</p>
<p>Throwing this at WolframAlpha, we see that after only 45 clicks, you have a
50-50 chance of seeing a duplicate comic. Put a different way, <em>there are even
odds that the last 45 comics you have seen contain a duplicate pair somewhere
in there</em>.</p>
<hr>
<p>So we’ve empirically validated that xkcd’s RNG is as close as we can expect for
something statistically random. We’ve also seen two reasons why it feels
biased.</p>
<p>But on a deeper and much more important level, we’ve seen how counterintuitive
and messy the random-number business is, and how statistical facts can trick us
into seeing patterns that aren’t there.</p>
<hr>
<p>P.S. My methodology for these experiments probably not the best, since I have
no formal statistics background. If you want to check out the code used or a
dump of my dataset, leave a comment below and I’ll send it to you.</p>
]]></description>
            <link>http://hardmath123.github.io/xkcd-random.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/xkcd-random.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Fri, 20 Mar 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Capture the Hackathon]]></title>
            <description><![CDATA[<p>Why hackathons aren’t helping the world, and how CTFs can fix that.</p>


<p>If you’ve been following my blog, you know that I’m not a fan of competitions.
One of the few exceptions to this is CTFs. CTFs, or Capture-The-Flag
competitions, are computer security challenges where the organizers host a few
vulnerable servers and you need to “hack” them to find secret keys. CTFs are,
to be very honest, a lot of fun.</p>
<p>But I’m not here to advertise CTFs—I’ve already done that in another post—I’m
here to talk about how CTFs should be replacing Hackathons.</p>
<p>Hackathons are great. You hang out all night long, eat junk food, listen to
music, and get all sorts of swag from the riches companies in Silicon Valley.
You get to meet successful people who have their own start-ups.</p>
<p>But that’s all.</p>
<p>Respectable hackathons advertise themselves as educational: if you know how to
code, you get a chunk of time to work on a project and learn a new skill. If
you don’t know how to code, we’ll teach you.</p>
<p>The truth is, neither actually works out in the real world.</p>
<p>I know of exactly zero pieces of hackathon-code that the authors are
legitimately proud of. “Authors are legitimately proud of” differs strongly
from “authors are capable of making an exciting, buzzword-heavy pitch about,”
the latter generally being the sole criterion in determining winners.
Hackathon veterans largely agree that hackathon-code is rarely touched after
the demo, because it’s usually written as just enough to create a demo. You
aren’t supposed to pay heed to petty things like maintainability—you’re
hackers! And so your efforts over 24 sleep-deprived zombie hours all go to
/dev/null.</p>
<p>At the other extreme are the brave souls who walk into a hackathon cold: no
programming experience whatsoever. From what I can tell, they’re generally
persuaded to come by their nerdfriends, with the prospect of free food. In any
case, I have yet to meet someone who actually fell in love with programming at
a hackathon. Yes, the rich Silicon Valley startup culture is appetizing, but
you can’t just show up at a hackathon and found a company. You need to put in
the effort to learn the basics and fall in love with programming, and that is
<em>not</em> something you can do in 24 continuous hours. You can’t put on a concert
in 24 hours having never touched an instrument.</p>
<p>So, what are hackathons good for? They’re great for networking: making friends,
and even getting internships or jobs. They’re great for getting T-shirts,
playing games, and having awesome conversations. They’re great for hearing
talks that make you feel good about yourself for being a “hacker”, “innovator”,
“creator”, “developer”, etc. They are, in short, what the humble party has
evolved into to suit Silicon Valley.</p>
<hr>
<p>Enter CTFs. CTFs are hardcore. To do well in one, you need to be really clever.
You need oodles of esoteric knowledge about all sorts of computer science. You
need to be good at math, algorithms, general-purpose problem solving, and of
course programming. A single CTF problem can teach you far more than an entire
hackathon can ever hope to.</p>
<p>(You do <em>not</em>, by the way, need to be good at making a pitch in front of a
panel of judges.)</p>
<p>I posit that a CTF is also as social as a hackathon: perhaps a majority of my
best friends are folks I’ve met CTFing, either because they were my teammates,
or because I ran into them on a CTF’s IRC channel. The conversations you have
with your teammates while trying to solve a CTF problem are fantastic: you
share large wealths of information, refute or build upon each others’ ideas,
and ask hard questions, and do all of that while making puns and inside jokes.</p>
<p>As far as I’m concerned, a CTF is much more valuable than a hackathon for a
casual programmer—mildly experienced script kiddies and ninja rockstars alike.</p>
<p>But more importantly, I can envision CTFs for beginners, too. Solving the
problems in an introductory CS textbook is far more appealing when put in the
context of hacking into someone’s server. I’m sure an elegantly crafted
sequence of problems can Socratically teach someone enough basic Python to, for
instance, compute large Fibonacci numbers recursively—for the right people,
that should be enough to make them fall in love with computer science.</p>
<p>CTFs have a lot of potential: it’s a shame we’re instead promoting
hackathon-parties as “CS education events”.</p>
<hr>
<p>P.S. It would be an even bigger shame if this post comes true in the wrong way,
and CTFs go the same route as competition math. As much as I love the idea,
some part of me wants to keep the CTF world a secret so that the people who
ruined competition math can’t get their hands on CTFs as well. I hope that’s
not selfish—but I think that’s a topic for a whole new post.</p>
]]></description>
            <link>http://hardmath123.github.io/hackathons-vs-ctfs.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/hackathons-vs-ctfs.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Tue, 17 Mar 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Use Imperfect Tools]]></title>
            <description><![CDATA[<p>A promise to myself.</p>


<p>As I look back on programs I’ve written, I almost always notice that the most
successful are the hacks. The ones whose source code is spaghetti, the ones
which consist of patches upon patches, and <em>not</em> the ones where I painstakingly
mapped out a beautiful API.</p>
<p>I speak of such monstrosities as <code>alchemy</code>, an IRC bot to play <a href="https://littlealchemy.com">Little
Alchemy</a> collaboratively in IRC. <code>alchemy.py</code> is
almost fully contained in a single while loop, and important game functions are
nested so deep that they must be indented more than 80 characters to be valid
Python. <code>alchemy</code> might be one of my most successful software projects if
measured by total amount of happiness brought to users.</p>
<p>Speaking of IRC bots, the <code>jokebot</code> skeleton code introduced in a previous post
is probably the most-forked of my projects, giving rise to 3 derivative bots
within a week of its first commit. <code>jokebot</code> was written with no heed for
efficiency, and so the unpatched <code>jokebot</code> was a big fat memory hog.</p>
<p>I also speak of <code>bouncy</code>, a screensaver I wrote over the course of a couple of
hours for no good reason, which has been adorning my mom’s Mac every 10 minutes
for the past two years. I have no idea what <code>bouncy</code>‘s source looks like, but
I do recall abusing nested <code>NSArray</code>s because Xcode didn’t let me create a new
class.</p>
<p>I speak of Snapin8r, which began as a Pythonic mess, was then ported to
JavaScript line-by-line, and then heavily patched as bug reports rolled in.
Most things are handled by one giant if/elif chain in a for loop.  Again,
Snapin8r is used by a disproportionately large number of people considering how
shaky the entire thing is.</p>
<p>And I speak of <a href="http://scratch.mit.edu/projects/10490996/">miscellaneous</a>
hacked-together Scratch <a href="http://scratch.mit.edu/projects/1322628/">projects</a>
that have, over the years, accumulated dozens of “remixes” as people ran into
them and used their code for amazing derivative works.</p>
<p>I do <em>not</em> speak of things like <code>nearley</code>, which despite hundreds of commits by
several authors, has only one legitimate dependency on <code>npm</code>. Or, for that
matter, any of my other well-organized projects on Github. </p>
<hr>
<p>Perhaps there’s a reason for this. As logical people, programmers instinctively
build
<a href="http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/cathedral-bazaar.ps">cathedrals</a>,
not bazaars. “If we get it right the first time,” we say, “we’ll have a good
foundation and won’t have any showstopper bugs.” And then we spend a few weeks
building up these “foundations” and then release monoliths.</p>
<p>But, as I’ve observed, that’s not how effective software gets created. The
best software gets used as it’s being developed. The way it’s used affects its
development, so that instead of just a theoretical curiosity designed to be
perfect and modular, the program solves real-world problems from day 1. The
best software begins as a funny IRC bot or hackey Bash script.</p>
<p>And so the lesson I want to teach myself by posting this post is that the most
important thing isn’t to pick the perfect APIs, tools, libraries, frameworks,
algorithms, and languages. The most important thing is to just start writing
code.</p>
<p>This is <em>really</em> hard.</p>
<p>Even selecting a language for a new project is hard. I want my project to be
fast, but C is too low-level. Scheme would probably be the best choice
algorithmically. Should I use Racket or Chicken? Racket seems more documented,
but it doesn’t compile to native code cleanly. Chicken has yucky documentation,
and I don’t like Chicken’s package manager. Maybe I should do it in Python? But
I hate Python.  Hang on, I’ve been meaning to learn Haskell for a while, now.
Wait, no, I/O in Haskell is hard, and I’ll need a good POSIX interface for this
project.</p>
<p>Speaking of which, how should I accept input? Stdin? File name? In what format?
JSON? YAML? I don’t know how to parse JSON in Scala yet. Actually, maybe my
program would be better as a service hosted over HTTP?</p>
<p>How about command-line arguments? Does Rust have a good option parser? Will I
have to write it myself? I probably won’t be able to write an option parser
that’s as efficient as industry-standards. Parsing is hard. Maybe I should use
JavaScript; I already know how to use nomnom.</p>
<p>But if it’s in JavaScript, I can bypass all this and create it as a sleek,
intuitive, and beautiful GUI in the browser. Then again, I want my project to
be fast…</p>
<hr>
<p>I think I’ve made my point: you can spend as long as you wish trying to choose
the right tool. The truth, of course, is that there is no “right tool”. In
fact, whatever tool you pick, you’re going to hit a limitation at some point.
It’s reality. So instead of spending ages choosing the right tool, just pick
the one that <em>feels</em> right and get some code written. Imperfect code is always
more useful than no code. You should think about interfacing and efficiency
<em>second</em>.</p>
<p>Ok, fine, I’m going to regret saying that. There’s a very good argument to be
made for thinking about the architecture of a project before starting on it. It
leads to clean, maintainable code. It minimizes the amount of refactoring
drudgery.</p>
<p>But I think all those things are secondary to actually having a working
prototype. Yes, you’re going to run into painful distribution issues—it’s
happened to me, and it was annoying enough to make me give up on the project.
But the open-source world came to the rescue, and someone forked and continued
it. What matters is that I put my idea into code and gave it to the world.</p>
<p>So my promise to myself—as of publishing this post—is to spend less time
debating tools and more time using them. This means forcing myself to
consciously use imperfect tools, which might cause mild internal bleeding.
Let’s see how long I survive.</p>
]]></description>
            <link>http://hardmath123.github.io/use-imperfect-tools.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/use-imperfect-tools.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Tue, 17 Mar 2015 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Harry Potter and the Diagon(alization) Alley]]></title>
            <description><![CDATA[<p>My attempt at <em>Harry Potter</em>/<em>Über eine Eigenschaft des Inbegriffes aller reellen algebraischen Zahlen</em> crossover fanfiction.</p>


<p>It is a well-known fact among wizarding circles that the Gringotts Wizarding
Bank has an infinite number of vaults, numbered from 1 onwards. Equally
well-known is the fact that in the name of what goblins call efficiency and
everyone else calls parsimony, each of the vaults is currently occupied.</p>
<p>As a result, there has formed a situation which Muggle economists describe as
“scarcity”. Gringotts vaults, like heirloom-quality furniture, are prized in
families. They only change hands at readings of wills of dead great-aunts.</p>
<p>With that in mind, it was, of course, reasonable for Mr. Hill Bertok to scoff
at the old man who demanded of him a vault one chilly February morning.</p>
<p>Mr. Hill Bertok was a run-of-the-mill businessgoblin and teller at the
Gringotts Wizarding Bank. The old man was Professor Albus Dumbledore,
headmaster of the Hogwarts School of Witchcraft and Wizardry.</p>
<p>Mr. Bertok did not, of course, notice this at first. Had he realized who the
old man was, he would perhaps have shown a little more respect before scoffing.
The scoff, however, had been scoffed already, and a scoff once scoffed cannot
be recalled.</p>
<p>Having conceded this, Mr. Bertok attempted mildly apologetic gesture with his
eyebrows and presently returned to his paperwork. When he looked up a few
minutes later, the old man was still there.</p>
<p>“Dumbledore,” he said, “as a goblin I hold you in much higher regard than most
wizards. But I still think you’re crackers.”</p>
<p>“Very well, Mr. Bertok, but many millions of lives depend on the security of
the object I have with me. Perhaps you can make an exception?”</p>
<p>“Exception! What object could possibly require so much security?”</p>
<p>“It’s a rock, Mr. Bertok. A very important rock.”</p>
<p>“…you <em>are</em> crazy, Dumbledore. I’ll tell you what: if you can find an empty
vault, you can have it.”</p>
<p>“Mr. Bertok, I believe I have this problem sorted out already. If you’ll lead
me down, perhaps I can demonstrate.”</p>
<hr>
<p>“Crazy, completely and utterly bonkers,” thought Mr. Hill Bertok as he led the
old man through the labyrinthine passages of Gringotts.</p>
<p>“713 sounds like a nice round number,” said Dumbledore, “Let’s stop here. Do I
have your permission to use this vault? It’s a harmless procedure, really.”</p>
<p>“You are out of your mind.”</p>
<p>“Need I remind you that I am the Chief Warlock of the Wizengamot?”</p>
<p>“You need not,” seethed a very reluctant goblin, adding (under his breath)
“Albus Dumbledore pulling rank—what is the world coming to?”</p>
<p>“Very well then. <em>Presto-incremento!</em>“ For a sliver of a second, Vault 713 of
the Gringotts Bank glowed a pale electric blue. Then, with a gentle rumble, the
door swung open, revealing absolutely nothing whatsoever.</p>
<hr>
<p>“<em>You asinine old man!</em> That vault contained more galleons than your demented
old brain can count!”</p>
<p>“Fear not, Mr. Bertok, you will find all of your galleons. They have simply been
transported to Vault 714.”</p>
<p>“Impossible! Vault 714 contains statues of gold; you cannot fit a mountain of
galleons in there!”</p>
<p>“Patience. The statues of Vault 714 have been moved to Vault 715. And—before
you get started again—the contents of Vault 715 have been moved to Vault 716.”</p>
<p>“Excuse me?”</p>
<p>“Each vault’s contents have been moved into the next vault. Ad infinitum. That
left Vault 713 open for me.”</p>
<p>“Wait, but… how can… <em>our clients!</em> How do you propose to notify them of
the change?”</p>
<p>“I had the foresight to dispatch some Ministry owls ahead of my visit.”</p>
<p>“You cannot send owls to an infinite number of clients, Dumbledore.”</p>
<p>“It may interest you to know, Mr. Bertok, that the Ministry happens to have a
fleet consisting of an infinite number of owls. They’ve been quite useful: just
last week we used them to—ahem—<em>persuade</em> a Muggle family to send their
nephew to Hogwarts.”</p>
<p>And with those words, Professor Albus Dumbledore dropped a small grubby bag
inside the vault and closed it.</p>
<hr>
<p>The news spread faster than the plague. The next morning, the tellers of
Gringotts Bank were greeted at the front desk by Stan Stunpike. Unfortunately,
they were also greeted by an infinite number of passengers on his infinitely
long bus. These were restless passengers who wanted their magically-created
Gringotts vaults and would not leave without them.</p>
<p>Owing to the lack of space and general stuffiness that was developing in the
Gringotts lobby—and the inevitable threat being posed to his employment—Mr.
Bertok decided to do something about it. After the first 50 new clients,
though, he began coming to the realization that making all of these accounts
would take an infinite amount of time.</p>
<p>He didn’t have an infinite amount of patience, but he knew someone who did. He
sent an owl to Dumbledore.</p>
<hr>
<p>“Hush, calm down, everybody.” The lobby was beginning to smell like the inside
of a used coffin, so Dumbledore decided, for the first time in his life, to
quit the whole pedagogical spiel and solve the problem.</p>
<p>“<em>Presto-doublinato!</em>“ he cried, and the lobby began to rumble as an infinite
number of doors began to open.</p>
<hr>
<p>“<em>Now</em> what have you done?”</p>
<p>“Vault 1’s contents have been moved to Vault 2. Vault 2’s contents have been
moved to Vault 4. Vault 3’s contents have been moved to Vault 6. In general,
each vault has been moved to the vault with double the number.”</p>
<p>“How does that help?”</p>
<p>“All the odd numbered vaults are empty. Since each of your angry bus passengers
has a seat number, you assign them a vault based on those. The person in the
first seat is assigned the first odd number (1), the person in the second seat
is assigned the second odd number (3), and the person in the hundredth seat is
assigned the hundredth odd number (199).”</p>
<p>Mr. Hill Bertok briefly considered hiring Dumbledore in the HR department.</p>
<hr>
<p>Wizards, it has been found, have friends. As a result, after the miracles of
the second day, news spread like proverbial wildfire and the parking lot behind
Gringotts was quickly filled with an infinite number of infinitely long buses.</p>
<p>Mr. Bertok knew what to do this time, and before you could yell “cardinality”,
Dumbledore had apparated to the lobby, holding a big bucket of black paint.</p>
<p>Without a word, he walked out to the parking lot and began painting large numbers
on the buses’ windows.</p>
<p>“Hey, Mister, what do you think you’re doing?” cried an understandably
distressed bus-driver. He was quickly and efficiently turned into a frog by
Gringotts’ security team, and Dumbledore continued with his painting,
undeterred.</p>
<p>After a few tense minutes, the parking lot resembled this (pardon my
badly-illustrated row of buses):</p>
<pre><code>+----+----+----+----+----
&lt; 01 | 02 | 04 | 07 | ...
+----+----+----+----+----
&lt; 03 | 05 | 08 | ...
+----+----+----+----
&lt; 06 | 09 | ...
+----+----+----
&lt; 10 | ...
+----+----
|... |
</code></pre><p>“As you can see,” he began (the outdoor parking lot was airy enough for his
pedagogical side to shine), “I’ve numbered each bus window diagonally. If I
keep this up, each window will get a number.</p>
<p>“Since I’ve already shown you how to deal with that with the
use-all-odd-numbers trick, I think I’ll take my leave now. It’s almost
lunchtime.”</p>
<p>He disappeared with a pop, leaving one frog and an infinite number of very
confused wizards.</p>
<hr>
<p>Like all good things, this one had to come to an end. The end came when an
inhabitant of a Hogwarts painting overheard a conversation about Gringotts’ new
policy. And so, the next morning, the portrait of Gringott the Goblin was
inhabited by an infinite number of painting-people. In front of them was a
dashing, athletic-looking young gentleman. A caption floated above his head. It
read “C. Antor. Tennis player.”</p>
<p>“Greetings, Mr. Bertok. I’m Charles Antor, representing the paintings.”</p>
<p>“Welcome to Gringotts, Mr. Antor.”</p>
<p>“Well, we came to ask: can you work your magic and give us vaults, too?”</p>
<p>“What does a <em>painting</em> need a vault for?”</p>
<p>“If you’re going to denigrate us, we’ll take our business elsewhere.”</p>
<p>Mr. Bertok hesitated. “Alright, we will need you all to line up so that we can
number you.”</p>
<p>“I’m afraid we can’t do that.”</p>
<p>“What?”</p>
<p>“We aren’t numbered with counting numbers like 1, 2, 3… We’re numbered with
real numbers. Decimals and fractions. Each of us identifies himself or herself
with a number between zero and one.”</p>
<p>“So? Why can’t you all stand in order?”</p>
<p>“Well, suppose we did order ourselves in a line, and suppose you assigned us
all vaults.”</p>
<p>“Alright, then what?”</p>
<p>“What is the number of the painting at the front of the queue?”</p>
<p>“<em>What?</em> How can that possibly matter?”</p>
<p>“Please bear with me. Just invent a number between zero and one. It doesn’t
matter which one.”</p>
<p>“If you say so. The painting at the front of the queue is painting 0.234567.”</p>
<p>“Well, the first digit of my number is a 1, not a 2 like his. So can we agree
that I’m not at the front of the queue?”</p>
<p>“I suppose so.”</p>
<p>“Good. Now, who’s second?”</p>
<p>“Should I make up another number?”</p>
<p>“Sure.”</p>
<p>“0.1111111.”</p>
<p>“Well, my number’s <em>second</em> digit is a 9, not a 1. So I’m not second in line
either.</p>
<p>“I don’t see where you’re going with this.”</p>
<p>“Mr. Bertok, no matter how you number us paintings, there will always be
someone whose first digit is different from the first person’s first digit. And
whose second digit is different from the second person’s second digit. And
whose third digit is different form the third person’s third digit. And so on,
and so forth.</p>
<p>In other words, he cannot have <em>any</em> position in your queue, and so he can’t
be in the queue.”</p>
<p>Mr. Bertok scratched his head. “But if there’s no way to number you folks,
there’s no way to assign you vaults.”</p>
<p>“Exactly. In a weird way, there are ‘more’ of us than there are of wizards in
Stan’s bus. Even though both numbers are ‘infinity’.”</p>
<p>“Gosh, who know paintings could be so complicated? You aren’t even real.”</p>
<p>“On the contrary, Mr. Bertok, we are as real as can be.”</p>
<hr>
<p><strong>Epilogue.</strong> Mr. Hill Bertok, now inspired, went on to study infinities. After
an interesting encounter with two old wizards named Banach and Tarski, he
discovered a means of mining an infinite amount of gold. Surprisingly enough,
he ended up living happily forever after.</p>
<p>Charles Antor went on to become a tennis star among the paintings.
Unfortunately, he met his match when a certain B. Russell proved to the referee
that none of his sets could exist.</p>
<p>The events of this story thoroughly confused Stan Stunpike, who decided to take
an early retirement from bus-driving and instead perhaps go herd a finite
number of goats in Mongolia. Fortunately, a pair of psychiatrists, Calkin and
Wilf, convinced him that he can fit all the rational people in the world onto
his bus. Though he tried hard, he never really got the hang of it, and one day
his bus was found—destroyed—with an infinitely large tree growing out of the
windshield.</p>
<hr>
<blockquote>
<p>This post was inspired by something my computer science teacher said. I
forgot what exactly it was that he said. Most ideas were shamelessly stolen
from a chapter in Ian Stewart’s delightful book, <em>Professor Stewart’s Cabinet
of Mathematical Curiosities</em>.</p>
</blockquote>
<hr>
]]></description>
            <link>http://hardmath123.github.io/hilbert.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/hilbert.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Thu, 26 Feb 2015 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Nondeterministic]]></title>
            <description><![CDATA[<p>Be wrong on the Internet.</p>


<blockquote>
<p>I wrote this post to inaugurate a friend’s blog a while back and decided to
preserve it here. Though dated February 2015, I added it to
<em>ComfortablyNumbered</em> in early October.</p>
</blockquote>
<p>Communication. It’s what separates a painter from an artist and a performer
from a musician. It turns a mob into an army and a fight into a debate. It’s
what separates coexistence and civilization.</p>
<p>In the world of computer science, we have a fictitious creation called the
Nondeterministic Computer. The Nondeterministic Computer, given a problem,
tests every possible solution of the problem instantanteously, and reports the
correct answers. The Nondeterministic Computer, were it to be realized, would
revolutionize computer science, data science, protein folding research, and of
course cryptography.</p>
<p>Guess what? You have the functional equivalent of a Nondeterministic Computer
right now. You have, to put it lightly, millions of brilliant minds at your
disposal. Combined, you have millions of years of experience, instinct,
opinion, and innovation at your command.</p>
<p>Because just as wonderful as Nondeterministic Computing is Nondeterministic
<em>Communication</em>. Of perhaps the 2,000 people that will read this post in the
next couple of months, some will agree. Some will disagree. Some will be
affected by what I say, and some will make it a mission to prove me wrong. The
vast majority will ignore it, spending less than 5 seconds on the page, and
only skimming a few words.</p>
<p>For all practical purposes, I am running my thoughts through a vast
supercomputer and getting a decent representation of humanity’s views on them.
I can do this anonymously, and I can do this for free.</p>
<p>In the scientific and academic world, communication happens through papers.
Progress happens when Darwin must publish his research before Wallace, when
Einstein refutes Newton, when Watson and Crick race Franklin’s lab, when Shamir
writes a paper breaking a cryptosystem Merkle and Hellman thought was secure.</p>
<p>In the tech world, progress happens when someone—a high schooler, an employee
at a startup, or the creator of Linux—leaves a vitriolic comeback on a blog
post.</p>
<p>Blog posts are what truly reflect us: our opinions, our rants, our tutorials,
and our reviews document, piece by piece, the world we have created. And the
comments document what we think of it.</p>
<p>In other words: <em>you</em> are responsible for the canon in this world. For
perpetuating knowledge. For inciting discussion. For starting arguments. For
causing change.</p>
<p>So write! Write controversial things! Express unpopular opinions, and do so
vehemently! Hate on something everyone adores! Use strongly-worded phrases. Use
exclamation points. Make noise, be mean. Get harsh feedback, <em>it’s what you
want</em>.</p>
<p>Be wrong once in a while. Say stuff you’ll cringe at in a year (because, to be
honest, you’ll cringe at everything you wrote a year back). Do what it takes to
put your opinions out there, because <em>they matter</em>. As a culture, we’re
fallible, and someone needs to call us out on it.</p>
<p>Your words are elegant weapons; use them to create a more civilized age.</p>
<p>And don’t be afraid to put your thoughts through a nondeterminisic computer
just because it’ll reject 99.99% of them. That’s what nondeterministic
computers do.</p>
<blockquote>
<p>This post <a href="http://blog.pdgn.co/general/2015/02/10/hello-world.html">first appeared on
Pdgn</a>.</p>
<p>(Speaking of which, I hope they write more on their seemingly-dead blog. They
have good things to say. Everyone does.)</p>
</blockquote>
]]></description>
            <link>http://hardmath123.github.io/nondeterministic.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/nondeterministic.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Tue, 10 Feb 2015 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Embracing Types]]></title>
            <description><![CDATA[<p>What isn’t wrong with static typing.</p>


<p>A lot of script kiddies, myself included, take a lot of pride in loathing
statically typed languages and being “purists”. But I’ve been doing some
reading about static typing (after realizing that many of the hackers I
respect are type-safety-fanatics) and I’ve realized that a lot of the reasons
that we have for hating type-safe languages aren’t truly valid.</p>
<p>Not that I’m converted. I’m still a firm believer that types belong to objects,
not to variables. But for the benefit of people who are still making a choice,
here are some of my misconceptions about type safety.</p>
<p>This post isn’t meant to persuade you one way or the other, because if you’re
going to join the Dark Side, it’s probably too late already.</p>
<h3 id="misconception-1-type-safe-means-hardcore-imperative-oop-">Misconception 1. Type-safe means hardcore imperative OOP.</h3>
<p>This probably stems from the huge popularity of Java, which has linked static
typing to aggressively object-oriented imperative programming. When I took AP
Computer Science, the distinction between Types and Objects was not made
clearly enough.</p>
<p>You can have OOP without static typing. There’s Pythonic duck typing:</p>
<blockquote>
<p>In other words, don’t check whether it IS-a duck: check whether it
QUACKS-like-a duck, WALKS-like-a duck, etc, etc, depending on exactly what
subset of duck-like behaviour you need to play your language-games with.</p>
<p>  (Alex Martelli, <a href="https://groups.google.com/forum/?hl=en#!msg/comp.lang.python/CCs2oJdyuzc/NYjla5HKMOIJ">source</a>)</p>
</blockquote>
<p>There’s Self’s prototypical inheritance, where all you have are objects (which
are pretty close to JavaScript Objects and Lua Tables when it comes to
implementing an OOPey system). There’s even Scheme OOP, with impure dispatch
functions as described in SICP.</p>
<p>But you can also have type-safe functional languages without an OOP framework
around it. The best examples of these are Haskell and ML, though I’m sure there
exist others. Haskell is as functional as it gets (arguable more so than
Scheme, because it <a href="http://xkcd.com/1312/">absolutely prohibits side-effects</a>,
i.e.  doesn’t have <code>set-car!</code>).</p>
<p>So you don’t need to give up functional code to embrace type safety.</p>
<h3 id="misconception-2-type-safety-causes-extreme-abstraction-and-code-inflation">Misconception 2. Type-safety causes extreme abstraction and code inflation</h3>
<p>Another one that I <a href="http://geek-and-poke.com/geekandpoke/2014/1/2/games-for-the-real-geeks-part-2">attribute to
Java</a>.
Though it’s <a href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition">completely
possible</a>
to be obnoxious about your types, for the most part it’s also completely
possible to write reasonable-looking flat-is-better-than-nested code. Just like
you can write C programs, for loops and all, in Scheme, and they’ll work, but
that’s a blatant abuse of recursion.</p>
<p>Looking at lots of Haskell code, it’s pretty clear that the levels of
abstraction you choose to implement are not directly correlated with the way
you use or misuse the type system.</p>
<h3 id="misconception-3-type-safety-is-a-hack-added-onto-languages-to-discipline-programmers-it-s-just-another-lint-">Misconception 3. Type-safety is a hack added onto languages to discipline programmers. It’s just another lint.</h3>
<p>We’re generally told that aside from some some cases where runtime typechecks
are needed (or C, where types determine memory usage), most of the time
typechecking information is just discarded when you actually compile the code.
In that sense, they seem to add little more value than well-placed, meaningful
comments.</p>
<p>And while that’s an acceptable way to look at it, it’s certainly worth
realizing that type theory is an established branch of computer science that
comes dangerously close to math. It is nontrivial to come up with a type system
that is “provably correct”, that is, a type system that is liberal enough to
accept programs that get stuff done, but conservative enough to reject programs
that do bad stuff (like access fields that don’t exist).</p>
<p>For example, consider functions that accept an Animal as input and return a
Truck as output. Is this a superclass of functions that accept Parrots as input
and return Vehicles as output? Or a subclass? How about classifying recursive
tuple types (such as <code>LinkedList&lt;T&gt;</code>, which could potentially be of type
<code>Tuple(T, LinkedList&lt;T&gt;)</code>)?</p>
<p>Even though type-safety is like a lint, it’s a very advanced, deep lint that
occasionally catches subtle bugs. It’s a sanity check that prevents you from
coding if it deems you insane.</p>
<h3 id="and-i-care-because-">And I care because…</h3>
<p>…because even though type safety is the enemy, it’s important to realize why
it’s so popular. In the world of CS, it’s important to Hoover up as many new
ideas as you can, even if you don’t agree with all of them.</p>
<blockquote>
<p>If you know yourself but not the enemy, for every victory gained you will
also suffer a defeat.</p>
<p>— Sun Tzu, <em>The Art of War</em>, III-18.</p>
</blockquote>
]]></description>
            <link>http://hardmath123.github.io/embracing-types.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/embracing-types.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sun, 08 Feb 2015 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Nasty Python Monstrosities]]></title>
            <description><![CDATA[<p>Why I’m not going to distribute any Python ever again.</p>


<p><strong>Scenario:</strong> I’ve written a simple Python command-line tool. It consists of
more than one file, because separation of code is important. It only needs to
run on UNIX systems and shouldn’t require sudo to install. How do I distribute
this code in a safe, user-friendly way? How do I teach my intro CS class how to
proudly share their creations with the world?</p>
<p><strong>Answer:</strong> You don’t.</p>
<p>Distributing Python code should be a solved problem. It’s not. Or, rather, it’s
a <a href="http://xkcd.com/927/">standards problem</a>. There are too many tools out
there, and there’s no clear roadmap that explains which subset does what. I’m
talking about Pip, Virtualenv, PyPi, wheels, eggs, distutils, distribute,
setuptools, easy_install, and twine. Some of these have been incorporated into
others, and are therefore obsolete. Some of these are endorsed by a PEP.
(What’s a PEP? Do I care?)</p>
<p>There is certainly not one obvious way to do it.  Even if you’re Dutch.</p>
<p>Assuming you have picked out a subset of tools to use, though, there’s no
guarantee that they will cooperate. A Pip flag, for instance, might work. It
might not work. It might do stuff that you didn’t expect. It might create files
without telling you (correction: it’ll be noted cryptically in the Pip log). It
might pass it on to <code>setup.py</code>, or it might not, or it might reject a valid
<code>setup.py</code> argument because it doesn’t understand it, or it might pass it on to
Python erroneously.</p>
<p>My Pip log contains monstrosities such as:</p>
<p>(Enumeration of all the things here that make me cry is left as an exercise to
the reader.)</p>
<pre><code>Running command /usr/bin/python -c &quot;import setuptools, tokenize;
__file__=&#39;/path/to/setup.py&#39;; exec(compile(getattr(tokenize, &#39;open&#39;,
open)(__file__).read().replace(&#39;\r\n&#39;, &#39;\n&#39;), __file__, &#39;exec&#39;))&quot; develop
--no-deps --user
</code></pre><p>In short, it might eat your laundry depending on local atmospheric conditions,
and then it’ll flip a coin to decide whether or not to tell you.</p>
<hr>
<p>Let’s talk about publishing. PyPi is the “standard” repository. But it makes you
host your own tarballs, so essentially all it does is match package names to
URLs (all other information is duplicated in the tarball itself).</p>
<p>Uploading to PyPi happens <em>over an insecure connection</em>. <a href="https://packaging.python.org/en/latest/distributing.html#upload-your-distributions">They recognize this
in the
docs</a>,
and recommend installing a <em>separate</em> client that lets you publish over SSL.</p>
<p>They also keep telling users to use OpenID. The OpenID that <a href="https://developers.google.com/accounts/docs/OpenID#shutdown-timetable">Google is
deprecating</a>
in a couple of months. Of course, <a href="https://pypi.python.org/pypi?:action=login&amp;provider=Google">trying to log in with
Google</a> throws an
internal server error.</p>
<p>Apparently, the whole system is so confusing that every time you upload, you
are encouraged to do a dry run on the test repository just to make sure you
understand it.</p>
<p>Now, my Python program was not a module, but a command-line tool. <a href="http://blog.habnab.it/blog/2013/07/21/python-packages-and-you/">The way you
specify a command-line
tool</a> in Python
looks like this:</p>
<pre><code class="lang-python"># ...
entry_points={
    &#39;console_scripts&#39;: [&#39;name_to_link = packagename.submodule:function_name&#39;],
},
# ...
</code></pre>
<p>Here’s what setuptools does. It parses that monstrous string and extracts
information. It then creates a <em>new</em> Python script in a <code>$PATH</code>‘d directory.
That script <em>imports</em> your script as a module, and then calls the function you
specify. It’s anyone’s guess whether important scriptey things such as
environment variables or command-line arguments are preserved.</p>
<p>This is all in complete ignorance of the whole <code>if __name__ == &#39;__main__&#39;</code>
infrastructure, for whatever reason. Of course, you can <em>also</em> make things
runnable with <code>python -m packagename.submodule</code> by including a <code>__main__</code> file.
Yum.</p>
<p>Even if it did the reasonable thing and symlinked your script directly, it
would actually <em>modify</em> your file. That’s right. It <a href="https://docs.python.org/2/distutils/setupscript.html#installing-scripts">replaces shebang
lines</a>
with the path to the currently-running Python interpreter. Because Explicit Is
Better Than Implicit (tm).</p>
<p>There is no reason to do this. UNIX provides a very helpful idiom: using
<code>#!/usr/bin/env python arguments...</code>. That’ll search the $PATH for the
right interpreter and use it. No black magic needed, and you can provide flags
to the python interpreter if you so desire.</p>
<p>Only God—make that Guido—knows what’ll happen if you’re trying to install a
Python 3 script using a Python 2.7. Or want to distribute something runnable
with <code>ipython</code>.</p>
<hr>
<p>By the way, if you think <em>installing</em> is bad: you would think uninstalling
should be a standardized, well-thought-out, documented process, right? You
wish. There setup.py-installed programs have no fixed uninstallation procedure.
If you Google around, you are led to <a href="http://stackoverflow.com/a/1550235/3053429">this highly-upvoted StackOverflow
answer</a>, which suggests using an
option that lists all generated files, and <em>piping the output</em> to <code>xargs rm
-rf</code>.</p>
<p>Let’s hope they don’t have a file with a space in it, or <em>bad</em> things are going
to happen. Keep in mind that Python is recommended for newbies, the kinds who
will gladly copy-and-paste shell commands from the Internet.</p>
<hr>
<p>Here’s the deal. Flat is <em>not</em> better than nested. Nested is better than flat.
There’s a reason we use parsers to convert strings to abstract syntax trees.
There’s a reason LISP is easier to write than x86 assembly. There’s a reason
for the existence of the term “dependency tree”. They are <em>literally</em> nested
structures. Importing from a sibling directory should not be the harrowing
experience it is in Python.</p>
<p>And that’s why I love npm. Not because it’s written in a beautiful language or
because it pretends to be easy-to-use, but because it’s simple and elegant and
it doesn’t do too much or too little. Modules are nested prettily in their
directories, and the <em>only</em> file npm touches is <code>package.json</code>.</p>
<p>Scripts are simply linked into npm’s bin folder. Your “script” could be a Bash
program, for all it cares.</p>
<p>Installing is one command, uninstalling is one command, publishing is one
command, and everything is one tool operating on one repository.</p>
<p>npm is transparent. Python’s plethora of packaging plakavacs are anything but.</p>
]]></description>
            <link>http://hardmath123.github.io/nasty-python-monstrosities.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/nasty-python-monstrosities.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Wed, 04 Feb 2015 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Bower! Unlimited Bower!]]></title>
            <description><![CDATA[<p>How not to write a module.</p>


<p>Bower. RequireJS. JamJS. Browserify. JQuery, Underscore, Lodash, and did I
mention JQuery? Angular, D3, Polymer, Flux, Ember.js, Backbone, React, Dojo,
Mootools, Bootstrap, Foundation, Meteor, Socket.io, Aurelia, Express.</p>
<p>What do all of these have in common?</p>
<p>For one, the fact that even though I’ve been using JavaScript for several
years, having written thousands of lines of code used by hundreds of people, I
have never used any of them. I don’t know any of their APIs. To date, every
website I’ve written was hand-coded, starting from blank HTML file. And a lot
of people frown upon that.</p>
<p>“Computers are all about automation,” you say, “There’s no good reason to
impose the drudgery of boilerplate upon yourself. You’ll end up writing lots of
duplicate code.”</p>
<p>Which is partly true. What you fail to mention is that I’d be writing plenty of
duplicate code <em>anyway</em>.
<a href="https://github.com/mbostock/d3/wiki/Requests#d3_xhr">Consider,</a>
<a href="http://api.jquery.com/jquery.ajax/">for</a>
<a href="http://mootools.net/core/docs/1.5.1/Request/Request">instance,</a>
<a href="https://github.com/Raynos/xhr">the</a>
<a href="http://dojotoolkit.org/reference-guide/1.10/dojo/xhr.html">XMLHttpRequest</a>
<a href="http://www.w3.org/TR/XMLHttpRequest/">API</a>. Each reimplementation of XHR is
basically the same thing, with slightly different method names or argument
conventions. As a developer, I would rather know the Real API—I can use it
anywhere I want, and I have unrestricted access to the entire API (so I’m not
at the mercy of someone who doesn’t think PUT requests are worth implementing).</p>
<p>Each new “web technology” has its own Wiki, API doc and “getting started” page
which you need to somehow absorb ideas from. They have their own strange
installation rituals, their own vocabulary, their own “best practices”, and
their own encyclopedia of StackOverflow answers that you must read if you have
any hope of getting stuff done.</p>
<p>Worse, though: they try to influence how you design.</p>
<p>All these “platforms” advertise themselves as “frameworks”. They force you to
structure a project so that it conforms with the architecture that they want.
They’re monoliths, and they don’t like cooperating with other monoliths.</p>
<p>That’s a horrible way to do web design. If <a href="http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/">PHP
hammers</a> have a
claw on each end, then JS hammers are actually disguised combined harvesters
that accept callbacks.</p>
<p>The first part of the problem is pedagogical in nature. To someone who is just
beginning to learn web development, being introduced to a monstrous framework
can lead to all sorts of misconceptions. jQuery is <em>not</em> a programming
language.  JavaScript <em>can</em> change the color of text on its own.</p>
<p>Students begin to learn from a higher level of abstraction than is necessary.
Filling in the blanks by copy-pasting lots of boilerplate code is not computer
science. You should know why you’re using a tool. Experience should come before
abstraction.</p>
<p>The other part of the problem is more practical.</p>
<p>These architectures look shiny in contrived demo situations (name a modern-day
language that does not boast of a beautiful “hello-world” scenario), but in the
real world, their abstractions almost immediately begin leaking. You end up
writing patches to tide over important features marked “TODO” on Github. You
end up writing glue code, which is far worse than “the drudgery of
boilerplate”.</p>
<p>Which isn’t to say you shouldn’t be using—or writing—JavaScript libraries.
But you should be writing small, self-contained modules that provide a clean
interface that is optimized for communicating with other programs. You should
be using conventional vocabulary and idioms everywhere (even if those idioms
smell like the dead fish that is JavaScript semantics). <a href="http://www.catb.org/~esr/writings/cathedral-bazaar/">Don’t build a
cathedral</a> if you can get
things done with a stall at the bazaar.</p>
<p>Your programs should <a href="http://en.wikipedia.org/wiki/Unix_philosophy">do one thing, and do it
well</a>. It could be a small thing
or a big thing. It could be a color picker widget or a library to encode PDF
files. It doesn’t matter. It should be self-contained and present itself as a
tool. Programmers should control code; code shouldn’t control programmers.</p>
<hr>
<p>How?</p>
<p><strong>Avoid side effects.</strong> The vast majority of your functions should take inputs
and return an output. Things that change state should be limited as much as
possible, and should <em>always</em> do so because the end-user explicitly mandated
it. The moment you start messing about with global prototypes and settings, or
pushing to arrays you didn’t create, you’re going to end up taking over the
entire application.</p>
<p><strong>Namespace.</strong> Your library should expose one name. One. <code>window.something =
{}</code>.  That’s it. Everything you expose should be a property of the
<code>window.something</code> object. (No, <code>window.something</code> cannot be a function, that’s
cute but annoying in practice.) <code>npm</code> enforces this, and if you’re clever, you
can write code that’s a valid <code>npm</code> module <em>and</em> browser-worthy module. Read
about
<a href="http://en.wikipedia.org/wiki/Immediately-invoked_function_expression">IIFE</a> if
you’re confused.</p>
<p><strong>Don’t force callbacks.</strong> If it doesn’t actually do anything asynchronous,
don’t add a callback. Just <em>return</em> the answer. That’s what the return keyword
is for.</p>
<p><strong>Put thought into your argument convention.</strong> If your functions are generally
monadic or dyadic, just accept positional arguments. Yes, it’s ok to write code
like:</p>
<pre><code>function (a, b) {
    doSomethingWith(a || &quot;default&quot;, b || &quot;default&quot;);
}
</code></pre><p>and yes, it’s ok to have users call a function with <code>function(null, &quot;cow&quot;)</code> to
default a positional argument that isn’t the last.</p>
<p>Avoid the <code>arguments</code> keyword like the plague. If you need variadicity, accept
an array as an argument. Variadicity causes confusion. And people who get
addicted end up writing functions that do different things depending on how
many arguments were passed. Scary, scary, scary.</p>
<p>It’s also perfectly ok to accept just one argument, an object, if you need a
dozen keyword arguments.</p>
<p><strong>Be quiet.</strong> When your library runs in production, nobody should notice it. No
console messages or “warnings”, no twiddling with the DOM to include a little
banner.</p>
<p><strong>Documentation is not advertisement.</strong> Once I’ve committed to using your
library, you don’t need to continue explaining how it’s a revolution in
generative fluid modern flat reactive magical material-inspired skeuomorphic
silky-smooth user interface. Just tell us how to use the primitives. If there
are concepts to be learned before using your library, explain them outside the
API reference.</p>
<p><strong>If you’re strictly on nodejs, prefer the provided Streams to whatever
homegrown thing you’re inventing right now.</strong> Streams are tempting to
reinvent-the-wheel, because they’re a pretty idea which isn’t terribly
difficult to implement with your own shiny interface. Don’t do it. This extends
to other things, too: XHR wrappers, querySelector reimplementations, and
event-emitting architectures are just a few of the major offenders.</p>
<p><strong>Document bugs.</strong> No, I won’t lose faith in your module if there’s a
one-in-a-million corner case as long as it’s documented. I will lose faith if
there’s a one-in-a-zillion corner case whose only documentation is a comment
saying “ill fix thiss l8r”. Similarly, don’t introduce undocumented features.
At the very least, say “this feature is experimental and SHOULD NOT be used in
production”.</p>
<p><strong>Don’t force dot-chaining.</strong> Yes, it’s useful in some places. Dot-chaining is
great for <em>transforming</em> values in a sequence. It makes no sense when there are
sequential actions that have side-effects. JavaScript has built-in support for
that kind of thing: it’s called the semicolon (<code>;</code>).</p>
<p>Bad:</p>
<pre><code>element
    .turnRed()
    .then()
    .ifYouFeelLikeIt()
    .and()
    .theStarsAlign()
    .changeSize()
    .do()
</code></pre><p>Good:</p>
<pre><code>element.turnRed();
if (element.youFeelLikeIt &amp;&amp; element.theStarsAlign) {
    element.changeSize();
}
</code></pre><p>Good:</p>
<pre><code>data
    .map(transformation)
    .filter(selection)
    .reduce(action)
</code></pre><p>The problem with dot-chaining is that it locks a lot of important functionality
behind weird objects.</p>
<p><strong>Stop creating boilerplate creators.</strong> If you’re embarking on a new
million-dollar company, you want to start from scratch and do things right,
making sure you understand everything on your website. If you’re writing a toy
demo for a 24 hour hackathon, you don’t need a full-featured MVC framework. You
need to learn CSS.</p>
<p>Corollary: throwing Bootstrap at a problem doesn’t fix it. Bootstrap causes
slow, janky websites. There was a time when it was shiny. Now it’s dull and
mundane.  Put some effort into making your website look like “yours”. And
remember, there’s absolutely nothing wrong with the default OS-provided buttons
that designers at Apple have spent ages perfecting. For that matter, I feel
there’s nothing wrong with Times New Roman. It’s just that everyone feels the
need to show that they know how to change the font face.</p>
<p><strong>Don’t write generic CSS.</strong> Are you creating a set of pretty text box widgets?
Don’t touch anything that doesn’t have class <code>pretty-text-box</code>. Things that go
around setting global properties (even ones that <em>should</em> be set, like
<code>box-sizing</code>) are evil. Don’t be that guy.</p>
<p><strong>Write generic CSS.</strong> I might want to change the width of your
syntax-highlighting gutter. Don’t make me edit your source code for that to
happen.</p>
<p><strong>Don’t build plugin infrastructures.</strong> Your code should be organized enough
for people to write helpers themselves. You shouldn’t need to provide methods
to “register” an “extension”. It almost always implies you’re building a
cathedral.</p>
<hr>
<p>The TL;DR version of this is that your code should be designed to cooperate
with others. People don’t want frameworks to lock up all their hopes and dreams
in. They want small, useful tools so that they don’t have to think about too
many details.</p>
<p>UNIX wouldn’t work if it wasn’t made of hundreds of awesome tiny programs. The
Internet should take a hint from that.</p>
]]></description>
            <link>http://hardmath123.github.io/bower-unlimited-bower.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/bower-unlimited-bower.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sun, 01 Feb 2015 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Coding the Mandelbrot Set]]></title>
            <description><![CDATA[<p>A mirror of a post written a long time ago in a galaxy far away.</p>


<blockquote>
<p>I wrote this post a long time ago. I had become obsessed with the Mandelbrot
Set after reading <strong>Professor Stewart’s Cabinet of Mathematical
Curiosities</strong>, and had spent the better part of a weekend scouring the
Internet for information on how to plot it. That is, information I could
understand at that age. Watching the correct Mandelbrot Set appear
line-by-line over the course of three hours on my mom’s old Mac was one of
the more exhilerating computer-science experiences I have had.</p>
<p>The post first appeared <a href="http://scratchforums.blob8108.net/forums/viewtopic.php?id=61381">on the Scratch
forums</a> on
April 20, 2011 along with its accompanying Scratch implementation. In the
interests of documentation and preservation, I decided to post a copy of this
on my blog. Despite many temptations to change things—grammar, spelling,
wording, and even some technical details—the text is identical to that
posted on the forums. The purpose of posting this is not to convey the actual
content to an audience, but to remind myself of how I sounded in the past and
to reflect on how I sound now.</p>
<p>Since I do not, of course, retain a copy of the original BBCode, the text has
been reformatted in Markdown. Code is left unchanged, though I was tempted to
rewrite scripts using the wonderful Scratchblocks2 renderer (this post
predates even the original Scratchblocks). I have also made an effort to
convert the equations contained herein to MathJax/LaTeX-worthy formats to
facilitate reading. This is, of course a tradeoff: I lose the original
formatting of the equations (which was delightful in itself) and make the
text significantly less legible in its Markdown source. I hope I have made
the right decision here. The original equations can always be viewed at the
archive linked above.</p>
</blockquote>
<p>This is a guide on plotting the Mandelbrot Set. It’s divided into 3 parts: What
is the Mandelbrot Set?, Understanding the Algorithm, and Programming the
algorithm. <a href="http://scratch.mit.edu/projects/Hardmath123/1734070">Here</a> is a
project on plotting it, if you don’t get it.</p>
<h3 id="what-is-the-mandelbrot-set-">What is the Mandelbrot Set?</h3>
<p>The Mandelbrot Set (M-Set in short) is a fractal. It is plotted on the complex
plane. It is an example of how intricate patterns can be formed from a simple
math equation. It is entirely self-similar. Within the fractal, there are
mini-Mandelbrot Sets, which have their own M-Sets, which have their own M-Sets,
which have their own M-sets, etc.</p>
<p>Though most representations of the M-Set have color, only the black bit is part
of the set. The color is to basically show how long it took to prove that that
point wasn’t in the set. However, these form cool patterns, too.</p>
<p>Here are some pictures:</p>
<p>Only the set:</p>
<p><img src="http://www.olympus.net/personal/dewey/points1.png" alt="Only the set"></p>
<p>With color:</p>
<p><img src="http://2.bp.blogspot.com/_c7S0Y3wBP9g/S7kL6nCsBwI/AAAAAAAAB70/gAlP6_tW7g0/s400/Mandelbrot_set.jpg" alt="With color"></p>
<h3 id="understanding-the-algorithm">Understanding the Algorithm</h3>
<p>The M-Set is generated using the algorithm:</p>
<p>\[ Z_{n+1}=z_{n}^2 + C \]</p>
<p>Here, both ($ Z $) and ($ C $) are complex numbers. What are complex numbers?
They’re, put simply, square roots of negative numbers. Since negative numbers
can’t have square roots, we created ‘complex’ or ‘imaginary’ numbers to deal
with it. ‘($ i $)’ (pronounced iota) is the symbol for ($ \sqrt{-1} $). Complex
numbers are expressed as multiples of ($ i $), like ($ 3i $). They are graphed
on a number line perpendicular to the number line we all know. The resultant
plane is called the complex plane, and is where we will graph the Mandelbrot
Set.</p>
<p>The complex plane:</p>
<pre><code>   1i
-1  0 +1
  -1i
</code></pre><p>Complex numbers are defined as the sum of a real number and an imaginary
number. Examples are ($ 3i + 1 $) or ($ 4i - 2 $).</p>
<p>In this expression, C is the complex number for which you are testing whether
or not it’s in the M-Set (it will define a single point on the complex plane —
C is a real number plus an imaginary one, remember?). Here’s how you use it:
You set Z to 0. Then set ($ Z $) to ($ Z^2 + C $). We call this action
iteration. For example, if C was 3 (I’m using a real number for simplicity), ($
z $) would be:</p>
<p>\[ 0 \]
\[ 0^2 + 3 = 3 \]
\[ 3^2 + 3 = 12 \]
\[ 12^2 + 3 = 147 \]</p>
<p>etc.</p>
<p>If you did this many, many times, there are two possibilities for ($ Z $) — it
escapes to infinity, or it doesn’t. If it doesn’t escape, it is in the set.
This looks hard to calculate—how can we know whether it reaches infinity? For
all we know at 1000000000 iterations it’ll be a normal, but after 1000000001
iterations it starts constantly doubling. Fortunately, we know 2 other things:</p>
<ul>
<li><p>It has been proved that if Z ever gets higher than 2, it will escape to
infinity</p>
</li>
<li><p>If it does escape, it’ll do so normally within 50 iterations. More will make
a more accurate picture, but it will slow the script down considerably. 50 is
a good number.</p>
</li>
</ul>
<p>So now, all we need to do is repeat ($ Z^2 + C $) 50 times and see how high it
is. Great!</p>
<h3 id="programming-the-algorithm">Programming the Algorithm</h3>
<p>That’s all very nice, but there’s a catch (isn’t there always?)—this uses
complex numbers, and Scratch—make that any programming language—doesn’t allow
square roots of negative numbers. Try it yourself. You’ll get a red <em>Error!</em>.
So how do we avoid this? Well, remember how a complex number is a real number
plus an imaginary number, and an imaginary number is just ($ \sqrt{-1} $)?
Well, that means we can split any variable, say ($ Q $), into two variables:
q-Real and q-Complex, or abbreviated, ($ qR $) and ($ qX $). We also know that
($ qX $) squared is real, because ($ i^2 $) is ($ -1 $) which is real, and the
coefficient is real anyway (here, coefficient is the 3 in ($ 3i $)). This means
now we know how to square complex numbers to get real numbers. So, let’s take a
look at the algorithm:</p>
<p>\[ Z_{n+1} = Z_{n}^2 + C \]
\[ =(zR + zX)^2 + cR + cX \]
\[ =zR^2 + zX^2 + 2zR*zX \left\{\text{by opening the brackets}\right\} + cR + cX \]</p>
<p>If you think carefully, ($ zX $) can only be represented by its coefficient.
This is because ($ zX^2 $) is real, and ($ 2*zR*zX + cX $) (all the complex
terms) can be represented by the coefficient, which is again because ($ zX^2 $)
is real. So, we never ‘need’ the value of ($ i $), which is a huge relief.  Now
we can start coding!</p>
<p>We need a sprite to move through every point on the stage. That’s easy:</p>
<pre><code>set x to -240
set y to 180
repeat 360
    set x to -240
    change y by -1
        repeat 480
            change x by 1
            . . . Insert coding here . . .
        end repeat
end repeat
</code></pre><p>See where I put <code>. . . Insert coding here . . .</code>? That’s where we need to code
our algorithm. From now on, all the coding I show you will be in that segment.
Starting off,</p>
<pre><code>set cR to x position/120 {because real numbers are on the horizontal number line. &#39;/120&#39; is to set the magnification.}
set cX to y position/120 {because imaginary numbers are on the vertical number line. &#39;/120&#39; is to set the magnification.}
set zR to 0
set zX to 0
set r to 0 {r will be the number of repetitions. You&#39;ll se why this will be helpful pretty soon}
</code></pre><p>This’ll set up all our variables. Great. Now for the hard part.</p>
<p>For the calculation, we need to set ($ zR $) to ($ zR^2 + (zX^2*-1
\{\text{because i^2 is -1}\}) + cR $), and set ($ zX $) to ($ 2*zR*zX + cX
$). We get this just by grouping them on the basis of their complexness.
Complex values get added into zX, the rest into zR.</p>
<pre><code>set old_zR to zR {this is because zR will change, and when evaluating zX we&#39;ll get the wrong value of zR}
set zR to (zR*zR) + -1*(zX*zX) + cR
set zX to 2*old_zR*zX + cX
change r by 1 {&#39;cause r counts the repeats}
</code></pre><p>But, before we put that in, we need to know how many times to iterate. Iterate
means repeat, so we need to put this into a repeat. We know that by 50
iterations, we can be pretty sure whether ($ zR $) will ever exceed 2 or not.
The problem is that it may exceed 2 very early, and approach infinity, causing
Scratch to freeze because the numbers get out of hand. So, we need a ‘if I’m
over 2, stop me right away’ repeat. This is exactly why we needed ($ r $).</p>
<pre><code>repeat until [r &gt; 50] or [zR &gt; 2]
will do the job. [r &gt; 50] says it repeats 50 times, [zR &gt; 2] says if it&#39;s over 2, stop repeating.
</code></pre><p>Now, we can finally tell whether the point you chose is in the Mandelbrot Set
or not. Whew! This part is really simple, so I’m not going to explain it
(much).</p>
<pre><code>if zR &gt; 2
    set pen color to [black]
    pen down
    pen up
else
    set pen color to [r] {because non-set points are colored based on how long it took to establish C wasn&#39;t part of the M-Set}
    set pen shade to [50] {because black has a shade of 0, and so all colors will end up black}
</code></pre><p>And we’re done! Congratulations!</p>
<p>You can get the whole project <a href="http://scratch.mit.edu/projects/1734070/">here</a>.</p>
]]></description>
            <link>http://hardmath123.github.io/scratch-mandelbrot.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/scratch-mandelbrot.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sat, 10 Jan 2015 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Array of Hope]]></title>
            <description><![CDATA[<p>Explaining why Scratch Arrays misbehave.</p>


<p>So a notorious Scratch user,
<a href="http://scratch.mit.edu/users/TheLogFather/">TheLogFather</a>, posted a
<a href="http://scratch.mit.edu/projects/41196030/">project</a> where he compared two
different ways to prepend to a list. Here they are, as both an image and as
a pseudocode.</p>
<p><img src="/static/scratch-splice.png" alt="The project"></p>
<pre><code class="lang-python">    mylist = [1,2,3,4,5,6,7,...,20000]
    def prepend1(n):
        repeat n times:
            insert random number at beginning of mylist

    def prepend2(n):
        temp = new list
        for each item in list:
            append item at end of temp
        delete all of mylist
        repeat n times:
            append random number at end of mylist
        for each item in temp:
            append item at end of mylist
</code></pre>
<p>It should be pretty clear that the two are semantically equivalent, that is,
that they will have the same net effect. However, notice that <code>prepend2</code> uses
only <code>append</code> instructions, while <code>prepend1</code> uses the <code>insert</code> instruction.</p>
<p>Now, from a cursory look, <code>prepend2</code> looks much slower: you are iterating over
the initial contents of <code>mylist</code> <em>twice</em> when copying it in and out of <code>temp</code>.</p>
<p>Surprisingly, though, <code>prepend2</code> is significantly faster. A quick speedtest
on my MacBook Pro says that <code>prepend1</code> takes <strong>4.616</strong> seconds while <code>prepend2</code>
takes a mere <strong>0.724</strong> seconds for 20,000 items.</p>
<p>Hopefully the reason why will be clear at the end of this blog post.</p>
<p>The first thing to do here is dig into the source and find the implementation
of the <code>insert</code> and <code>add</code> blocks in Scratch. Scratch 2.0 is open-source and
written in Actionscript. We find it all <a href="https://github.com/LLK/scratch-flash/">on
Github</a>. A little digging reveals the
file <code>src/primitives/ListPrims.as</code>. This is where the list blocks are
implemented. Looking around, we find the important sections:</p>
<pre><code>protected function listAppend(list:ListWatcher, item:*):void {
    list.contents.push(item);
}
</code></pre><p>and</p>
<pre><code>protected function listInsert(list:ListWatcher, i:int, item:*):void {
    list.contents.splice(i - 1, 0, item);
}
</code></pre><p>Now, <code>ListWatcher</code> is defined in <code>src/watchers/ListWatcher.as</code>. We see that
<code>contents</code> is an <code>Array</code>:</p>
<pre><code>public var contents:Array = [];
</code></pre><p>Let me say that again: in Scratch, a <strong>List</strong> is actually an <strong>Array</strong>. If this
doesn’t bother you now, don’t worry, it will bother you soon.</p>
<p>Anyhow, we’re looking at the difference between <code>Array.splice</code> and
<code>Array.push</code>. From Adobe’s documentation, we know that <code>Array.splice</code> inserts
and deletes elements of an array at an arbitrary index, and <code>Array.push</code> tacks
elements on to the end of an array. Why is this important? To see that, you
need to know a bit about how memory works.</p>
<hr>
<p>ActionScript is an incarnation of ECMAScript, much like JavaScript. There isn’t
much documentation about ActionScript’s VM, but there’s tons about how JS
handles <code>Array</code>s. So, though it’s not a completely legitimate assumption, I’m
going to explain what’s going on based on how JavaScript does things.</p>
<p>In a computer’s RAM, you can access any memory address in constant-time. That
means it takes just as long to get the contents of the billionth address as it
does to get the contents of the first.</p>
<p>When you run a computer program, at a sufficiently low level, you’re allocating
some segment of the RAM for the program to access. The program basically treats
this segment as a really long list, where each element has an upper limit on
size.</p>
<p>It’s easy to store an integer (within limits) or a boolean value in memory,
because it takes up just one cell of memory. But anything larger—a string, a
list, an image, or a sprite—takes up multiple cells, and so you need a scheme
by which those cells are allocated in an organized way.</p>
<p>In low-level programming languages like C, you have the <code>malloc</code> function that
allocates the given amount of memory as a sequence of contiguous cells and
returns the address of the first one. However, the catch is that once you’re
done using that memory, <em>you</em> are responsible for freeing it (with the <code>free</code>
function). Otherwise future calls to <code>malloc</code> will assume that you’re still
using those addresses and pick some other addresses to allocate. Eventually
you’ll run out of memory and things will start dying.</p>
<p>In higher-level languages (like ActionScript and JavaScript), the interpreter
manages memory for you. You’re free to run around creating sprites and lists
and mammoths and cows and whatever, and the interpreter destroys them when it
notices that you’re done with them. This is called Garbage Collection, and is
beyond the <em>scope</em> of this article (seasoned CS students will get that joke).</p>
<p>When you create an <code>Array</code> in JavaScript, the interpreter allocates a block of
memory for you. If you want to access the 5th element, the interpreter says
“<code>malloc</code> told me the array starts at address 900, so I want to return the item
at address 900+5=905”.</p>
<p>Since RAM has constant lookup time, your Array will also have constant lookup
time (it’ll just take a hair longer because you need to find the address).</p>
<hr>
<p>Now that you know how Arrays work, it should be obvious that inserting an
element into an array is hard. Why? Well, there’s no space! Think of the RAM as
people sitting on a bus. The first few seats are full. If you make a fuss and
insist on sitting in the front seat, you need to first move everyone else down
one seat.</p>
<p>If you’re trying to put an item at the beginning of an array with 5000
elements, you need to move down each of those 5000 elements one cell. This
takes 5000 operations. This is bad.</p>
<p>Similarly, deleting is hard because you’ll leave an empty seat, and then you
need to move everyone up a seat to fill the hole (remember, the fast
index-lookup only works if the array is contiguous!). If you delete the first
element of an array with 5000 elements, the remaining 4999 need to be moved up
a spot, which takes 4999 operations. This is also bad.</p>
<p>But this is often necessary, and is done all the time in JS or ActionScript
programs with the <code>splice</code> function.</p>
<p>You might have already realized how <code>push</code> is better. If you sit at the back of
the bus, you don’t need to relocate everyone in front of you. So it’s actually
a constant-time operation.</p>
<p>Of course, in a computer’s RAM, that cell might be occupied by the beginning of
another array. If that’s the case, the interpreter needs to move things around.
It’s unpleasant, but it only happens once in a while. So <code>push</code> occasionally
takes a long time. But most of the time, it’s blazingly fast.</p>
<p>And that’s the reason why <code>insert</code> is slower than <code>add</code> in Scratch.</p>
<hr>
<p>As an afterword, it’s worth mentioning that if you do lots of inserting and
deleting, there’s a better way to store a list than an Array. It’s called a
List. A List in CS is not the same thing as a List in Scratch.</p>
<p>A List consists of lots of <em>pairs</em>. A <em>pair</em> is a 2-element Array. The first
element contains some data, and the second element is the address of the next
pair (we can call this the “address pointer” because it <em>points</em> to the next
pair).</p>
<p>For historic reasons, the “value” cell and the “address pointer” cell are
called the “address register” and “decrement register”, and so old languages
will provide functions like “contents of address register” (<code>car</code>) and
“contents of decrement register” (<code>cdr</code>, rhymes with udder). Lisp programmers
use <code>car</code> and <code>cdr</code> all the time to manipulate pairs. In fact, Lisp’s name
comes from List Processing.</p>
<p>The order in which the pairs are stored in memory doesn’t matter. So, when you
want to insert something, you create a new pair <em>anywhere</em> in the RAM, and then
change the address pointers to incorporate the new pair.</p>
<p>To delete something, you <code>free</code> the pair and fix the pointers. Fixing pointers
is easy (just an assignment), so Lists are easy to mutate.</p>
<p>Of course, finding the 5000th element of a list would require you to follow
5000 address pointers (Lispers call it <code>cdr</code>ing down the list), so lookups are
not constant-time anymore. Choosing the right data structure is important.</p>
<p>By the way, Snap<em>!</em> is extra-clever: it stores your lists as Lists <em>or</em> Arrays
depending on how they were created. If you use Array-ey operations on them,
they get converted to Arrays, and if you use List-ey operations on them, they
get converted to Lists. If you want to be fast, you need to pick a style and
stick with it. But that’s good programming practice anyway.</p>
]]></description>
            <link>http://hardmath123.github.io/scratch-splice.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/scratch-splice.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Mon, 05 Jan 2015 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[The Nightmare After Christmas]]></title>
            <description><![CDATA[<p>Happy $HOLIDAY</p>


<p>‘Twas the night after Christmas in the Clause house,<br>And all you could hear was the click of a mouse,<br>Or the drop of a pin, or the sneeze of a louse,<br>Until he called out for his dear spouse.</p>
<p>“Mrs. Clause,” he cried, “I think it’s broken!”<br>“What?” she bellowed, annoyed to be woken.<br>“I’m locked out,” he said, regretting having spoken,<br>“I seem to have lost my login token.”</p>
<p>“Well, I did tell you your site’s a mess.”<br>“I have a weak password,” Santa confessed.<br>“I bet some crackers just made a good guess.”<br>“Perhaps we can track down their IP address?”</p>
<p>So Mrs. Clause began looking through logs,<br>While Santa whipped up some nice thick grog,<br>And soon enough, she found the clog:<br>“Who writes a database in Prolog?!”</p>
<p>“It looks like a simple DoS to me”<br>“Crudely done, from what I can see.”<br>“Seems like they stole your API keys.”<br>“Tracking these guys should be a breeze.”</p>
<p>So Santa called up an Elf for assistance,<br>(A big, macho creature known for his persistence)<br>He had ten years of UNIX experience,<br>And agreed to help on Santa’s insistence.  </p>
<p>He fixed the firewall and flushed the cache,<br>And began to explore the system with Bash.<br>“Gosh, Santa, your code is trash,<br>Why are you using an md5 hash?”</p>
<p>So he patched the server (and ran <code>git commit</code>)<br>and did some digging and found the culprit.<br>Then he accessed the Naughty List with a rootkit,<br>And typed the name and hit “submit”.</p>
<p>He shutdown the computer and turned off the light,<br>Knowing that two wrongs might just make a right,<br>Yet he could not resist shouting, as he fled out of sight:<br>“Happy Christmas to all, and to all a good night!”</p>
<hr>
<p>Happy holidays from Comfortably Numbered.</p>
]]></description>
            <link>http://hardmath123.github.io/night-after-christmas.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/night-after-christmas.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Thu, 25 Dec 2014 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[It's not socket science: Part II]]></title>
            <description><![CDATA[<p>In which we invade a chatroom.</p>


<p>A quick recap: in <a href="socket-science.html">Part I</a>, we learned about how protocols
are really awesome, and how they stack onto each other to build abstractions.
We learned to use <code>netcat</code> to create TCP connections, and then played with HTTP
and HTTPS.</p>
<p>Let’s write some protocol code (finished product available <a href="https://github.com/Hardmath123/jokebot">on
Github</a>). We’re going to use Python to
build a bot for <a href="http://en.wikipedia.org/wiki/Internet_Relay_Chat">IRC</a>, a
beautiful and
<a href="http://www.ibiblio.org/pub/academic/communications/logs/report-ussr-gorbatchev">historic</a>
protocol for chatting over the Internet.</p>
<p>IRC bots are all over the place. Some do routine tasks like moderate channels.
Others let you play games like Mafia, or perhaps provide simple services like
spelling correction (or “make me a haiku”). Yet others simply keep logs of what
is said and then try to say relevant things at the right times. Perhaps the
most famous one is <a href="https://github.com/zigdon/xkcd-Bucket">Bucket</a>, who manages
<code>#xkcd</code>.</p>
<p>Our IRC bot is going to provide a utility which tells a joke when someone says
<code>!joke</code> in a particular channel.</p>
<hr>
<p>The IRC protocol is specified in <a href="https://tools.ietf.org/html/rfc2812">this
document</a> (that document updates <a href="https://tools.ietf.org/html/rfc1459">this
one</a>, as listed in the header)). That
document is called an RFC, or <em>Request For Comments</em>.</p>
<p>I think the RFC system is beautiful. RFCs are documents that standardize the
important messy details that hold the Internet together. They were ‘invented’
by Stephen D. Crocker when he was <a href="http://www.nytimes.com/2009/04/07/opinion/07crocker.html?_r=2&amp;em&amp;">assigned the task to document
ideas</a> in
the early days of the Internet. An RFC is supposed to be a memo; a technical
note or idea that is published for anyone to read, review, and (ha!) comment
on. Everyone <a href="http://www.rfc-editor.org/rfc/rfc4846.txt">can write</a> an RFC.</p>
<p>This is how standards come about. Once I have published a sensible RFC that
standardizes some means of sharing files (for instance, the File Transfer
Protocol or FTP, which people still use from time to time
(<a href="http://tools.ietf.org/html/rfc114">RFC</a>)), I can put it out there for smart
people all over the world to review. If it’s <em>really</em> exciting, someone may
write an implementation. Future implementations would abide by the rules, and
so your FTP server and my FTP client would cooperate.</p>
<p>Notice how this is decentralized. It’s not Google saying “Ok, folks, this is
how we’re going to transfer files. Deal with it.” RFCs specify the consensus of
many experts—when you see an RFC describing a protocol that has many
implementations, you know that many people agree that that’s the best way of
doing things (and even if it isn’t, it’s a reasonable compromise).</p>
<p>Of course, if you have a completely different way of transferring files which
would use a brand new super-secure hyper-compressed protocol, you can write
your own RFC and implementations, and hope that it catches on.</p>
<p>There are a lot of RFCs around, some
<a href="http://www.livinginternet.com/i/ia_rfc_interesting.htm">fascinating</a>, some
<a href="http://www.livinginternet.com/i/ia_rfc_fun.htm">funny</a>. To us, however, they
are simply documentation for the protocol we will use to build our IRC bot.</p>
<p>But I digress.</p>
<hr>
<p>The RFC isn’t hard to read, but I’ll just tell you the important parts here.
IRC works over the standard port <code>6667</code>, or port <code>6697</code> if it’s secure
(SSL-wrapped).</p>
<p>Let’s experiment on Freenode. I’m going to assume you have some idea of how IRC
works (that is, you know what I mean when I say “channel” and “nick”). You may
want to log into Freenode with another IRC client (an online one like KiwiIRC
would suffice), just to see stuff happen.</p>
<p>Now, start with <code>nc irc.freenode.net 6667</code>.</p>
<p>You might get some messages that look sort of like this:</p>
<pre><code>:wilhelm.freenode.net NOTICE * :*** Looking up your hostname...
:wilhelm.freenode.net NOTICE * :*** Couldn&#39;t look up your hostname
</code></pre><p>That just means that Freenode’s servers hoped you were logging in from an IP
address with a registered domain, so that it can display your username as
“user@hostname” in a <code>whois</code> query (and some other uses as well). But you’re at
home, and your home’s IP probably doesn’t have a domain name pointing to it
(unless you’re running a server at home!). So it just complains.</p>
<p>Anyway.</p>
<p>Type <code>NICK an-irc-explorer</code> and hit enter. Then type <code>USER an-irc-explorer * *
:Mr. IRC</code>. You should be greeted with a huge block of text that starts with
something like:</p>
<pre><code>:wilhelm.freenode.net 001 an-irc-explorer :Welcome to the freenode Internet Relay Chat Network an-irc-explorer
:wilhelm.freenode.net 002 an-irc-explorer :Your host is wilhelm.freenode.net[37.48.83.75/6667], running version ircd-seven-1.1.3
:wilhelm.freenode.net 003 an-irc-explorer :This server was created Sat Mar 8 2014 at 15:57:41 CET
</code></pre><p>Basically, it’s telling you that you’ve successfully connected to the server,
and identified yourself with the nickname <code>an-irc-explorer</code>.</p>
<p>You can now converse with server by sending it more commands (type <code>HELP</code> to
list commands). Perhaps the most exciting one is <code>JOIN</code>: type <code>JOIN #bots</code> to
join Freenode’s channel for bots.</p>
<p>Your normal IRC client should show that <code>an-irc-explorer</code> joined.</p>
<p>To say things, use <code>PRIVMSG #bots :Hello, world.</code> (The colon is a
separator character, not part of the actual text that will be displayed on a
client. Its purpose is to allow the last argument to contain spaces,
which—unsurprisingly—show up quite a lot in chat messages.)</p>
<p>If you say something from your client, you should get some scary text like this:</p>
<pre><code>:hardmath123!hardmath123@gateway/web/cgi-irc/kiwiirc.com/ PRIVMSG #bots :Hi
</code></pre><p>The first bit tells you who said something, and is of the form
<code>nickname!username@hostname</code> (remember the hostname lecture above?). <code>PRIVMSG</code>
means you’re getting a message, <code>#bots</code> is the channel, and <code>Hi</code> is the
message.</p>
<p>Not too hard.</p>
<p>There’s one last thing you need to know. IRC checks if you’re there
periodically by sending out a <code>PING</code> message. All you need to do is send the
server <code>PONG</code> and it’ll be happy. If you don’t, the server assumes something
bad happened, and kills the connection based on a “Ping Timeout” (generally 120
seconds ish). It’s the protocol version of “if I’m not back in an hour, call
the police.”</p>
<p>And now you’re ready for some code.</p>
<hr>
<p>Fire up Python.</p>
<p>Python gives you sockets with the <code>socket</code> module, which corresponds rather
well with C’s sockets.</p>
<pre><code class="lang-python">import socket
</code></pre>
<p>Let’s create a socket and connect it to Freenode.</p>
<pre><code class="lang-python">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((&quot;irc.freenode.net&quot;, 6667))
</code></pre>
<p>The first line has two magic constants. <code>AF_INET</code> is best
<a href="http://beej.us/net2/html/syscalls.html">explained</a> by Brian “Beej” Hall:</p>
<blockquote>
<p>In some documentation, you’ll see mention of a mystical “PF_INET”. This is a
weird etherial beast that is rarely seen in nature, but I might as well
clarify it a bit here. Once a long time ago, it was thought that maybe a
address family (what the “AF” in “AF_INET” stands for) might support several
protocols that were referenced by their protocol family (what the “PF” in
“PF_INET” stands for).  That didn’t happen. Oh well. So the correct thing to
do is to use AF_INET in your struct sockaddr_in and PF_INET in your call to
socket(). But practically speaking, you can use AF_INET everywhere. And,
since that’s what W. Richard Stevens does in his book, that’s what I’ll do
here.</p>
</blockquote>
<p><code>SOCK_STREAM</code> means <code>TCP</code>. The alternative is <code>SOCK_DGRAM</code>, which means
<code>UDP</code>–User <em>Datagram</em> Protocol. There’s also <code>SOCK_RAW</code>, which requires root
privileges and makes (you guessed it) a raw IP socket. We discussed these in
the previous installment.</p>
<p>The <code>connect</code> line, of course, connects to a remote socket somewhere in the
Freenode network. It’s important to realize that that remote socket is the same
thing as the one you just created. The server/client-ness is an abstraction.
Your own socket has a host and port, too, which you can find with
<code>s.getsockname()</code>. You’ll get something like <code>(&#39;192.168.0.4&#39;, 60694)</code>.</p>
<p>Getting data from a socket is kind of messy, because of how TCP works. You
don’t really ever know if the server wants to send more data or not. So, UNIX
sockets work like this: you specify how many bytes you want to read, and the
process will be paused (“blocked”) until the server sends you stuff (it could,
in theory, just sit there forever). When something is sent, at most that number
of bytes is given to you as a string.</p>
<p>In practice, this looks like:</p>
<pre><code class="lang-python">data = s.recv(1024)
</code></pre>
<p>to read at most 1024 bytes from the server.</p>
<p>There is a problem here. A chat client doesn’t want to just freeze until a new
message is sent, it wants to do other things and occasionally carry out actions
if there’s a new message.</p>
<p>The hard solution is to use Python threads. You have multiple bits of code
running around doing stuff at the same time, and you’re very careful about the
socket’s state. If you’re not, you might end up reading and writing at the same
time and bad things will ensue.</p>
<p>That will end in a mess.</p>
<p>The easy solution is the <code>select</code> module. It’s used as such:</p>
<pre><code class="lang-python">import select
readables, writables, exceptionals = select.select([s], [s], [s])
</code></pre>
<p><code>select.select</code> will return three lists: a list of sockets that are readable,
a list of sockets that are writable, and a list of sockets that are in a bad
situation and erroring/broken/eating your laundry.</p>
<p>Now we can check:</p>
<pre><code class="lang-python">if len(readables) == 1:
    data = s.recv(1024) # won&#39;t block
</code></pre>
<p>Note that we still don’t know <em>how much</em> data there is. In fact, we have no way
of knowing how much data there is, because the server may have sent another 20
bytes which TCP hasn’t reassembled yet.</p>
<p>So, it’s generally advisable for protocols to specify a maximum message length
and some signal that a message has been terminated. Section 2.3 of RFC 2812
very helpfully tells us how IRC handles this:</p>
<blockquote>
<p>IRC messages are always lines of characters terminated with a CR-LF (Carriage
Return - Line Feed) pair, and these messages SHALL NOT exceed 512 characters
in length, counting all characters including the trailing CR-LF. Thus, there
are 510 characters maximum allowed for the command and its parameters.  There
is no provision for continuation of message lines.</p>
</blockquote>
<p>We can put that all together as follows:</p>
<pre><code class="lang-python">import select
import time
def read_loop(callback):
    data = &quot;&quot;
    CRLF = &#39;\r\n&#39;
    while True:
        time.sleep(1) # prevent CPU hogging :)
        readables, writables, exceptionals = select.select([s], [s], [s]) 
        if len(readables) == 1:
            data += s.recv(512);
            while CRLF in data:
                message = data[:data.index(CRLF)]
                data = data[data.index(CRLF)+2:]
                callback(message)
</code></pre>
<p><code>callback</code> is called every time a complete message has been received. Also,
when it’s being called, no other socket operations are happening (reads or
writes). As we discussed above, this is a major win.</p>
<p>Writing to the socket is much easier, it’s literally <code>s.sendall(&#39;data&#39;)</code>.
(There’s also <code>s.send(&#39;data&#39;)</code>, which isn’t guaranteed to actually send all of
the data, but returns the number of bytes that actually made it (based on TCP
acknowledgements). <code>sendall</code> is an abstraction on top of this.)</p>
<p>Guess what? You know enough to write a bot now!</p>
<pre><code class="lang-python">import random
jokes = [
    # populate me with some good ones!
    # this might be the hardest part of writing the bot.
    &quot;You kill vegetarian vampires with a steak to the heart.&quot;,
    &quot;Is it solipsistic in here, or is it just me?&quot;,
    &quot;What do you call two crows on a branch? Attempted murder.&quot;
]
s.sendall(&quot;NICK funnybot\r\n&quot;)
s.sendall(&quot;USER funnybot * * :hardmath123&#39;s bot\r\n&quot;)
connected = False
def got_message(message):
    global connected # yes, bad Python style. but it works to explain the concept, right?
    words = message.split(&#39; &#39;)
    if &#39;PING&#39; in message:
        s.sendall(&#39;PONG\r\n&#39;) # it never hurts to do this :)
    if words[1] == &#39;001&#39; and not connected:
        # As per section 5.1 of the RFC, 001 is the numeric response for
        # a successful connection/welcome message.
        connected = True
        s.sendall(&quot;JOIN #bots\r\n&quot;)
    elif words[1] == &#39;PRIVMSG&#39; and words[2] == &#39;#bots&#39; and &#39;!joke&#39; in words[3] and connected:
        # Someone probably said `!joke` in #bots.
        s.sendall(&quot;PRIVMSG #bots :&quot; + random.choice(jokes) + &quot;\r\n&quot;)
read_loop(got_message)
</code></pre>
<p>This is actually all you need. If you concatenate all the snippets in this blog
post, you will have a working bot. It’s surprisingly terse (yay Python?).</p>
<p>We can actually make this secure with just two more lines of code. Remember how
I said SSL was ‘wrapped’ around a normal protocol?</p>
<pre><code class="lang-python">import ssl
secure_socket = ssl.wrap_socket(plain_old_socket)
</code></pre>
<p><code>secure_socket</code> has all the methods of a normal socket, but the <code>ssl</code> module
handles the SSL negotiations and encryption behind the scenes. Abstraction at
its finest.</p>
<p>You can play around with <a href="https://docs.python.org/2/library/ssl.html">reading the
documentation</a> and integrating this
into your bot (remember to use the new secure port, 6697).</p>
<p>If you end up deploying a bot, make sure you read the channel or server’s bot
policy. For instance, Foonetic provides these instructions:</p>
<blockquote>
<p>Bot Policy: Well behaved bots are allowed. Annoying bots or bots which are
insecure or poorly behaved are not allowed. Channel owners may have their own
policy for public bots; it is advised you check with a channel operator
before bringing a bot into a channel. Excessive bots from a single network
address may exceed the session limit and/or be considered cloning. Please
mark your bot with user mode +B and your nick in the “Real Name” field so
that an oper can locate you if your bot malfunctions. Absolutely no “botnets”
are allowed and any illegal activity will be reported to your ISP!</p>
</blockquote>
<p>If you’re lazy, you can get a slightly refined version of this code from <a href="https://github.com/Hardmath123/jokebot">my
Github</a>.</p>
<hr>
<p>So. We learned about how RFCs work, and we read the RFC on IRC. Then we used
that knowledge to built an IRC bot on top of Python’s low-level <code>socket</code>
library.</p>
<p>The techniques you learned in this blog posts are useful for all sorts of
things. For instance, SMTP is a simple email protocol (port 25), and it’s an
easy way to send from a script (Python ships with <code>smtplib</code>, a module that
wraps around the protocol). Similarly, <code>telnet</code> is a very lightweight protocol
that adds some terminal-specific frills to netcat (screen size, raw mode, etc.)
Even bitcoin needs <a href="https://en.bitcoin.it/wiki/Protocol_specification">documented
protocols</a> to work. It’s
definitely worth learning how these things work.</p>
<p>Enjoy, and happy botwriting.</p>
]]></description>
            <link>http://hardmath123.github.io/socket-science-2.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/socket-science-2.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Wed, 17 Dec 2014 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Dear Hollywood]]></title>
            <description><![CDATA[<p>A rant about technobabble.</p>


<p>Dear famous producers, scriptwriters, authors, and publishers:</p>
<p>On behalf of the programming community, I would like to bring up a rather sore
point among us. Whenever you have a scene involving “hacking”, you seem to make
it a point to write scripts by mashing complex-sounding buzzwords. We all
cringed when someone <a href="https://www.youtube.com/watch?v=hkDD03yeLnU">declared</a>
“I’ll create a GUI interface using Visual Basic. See if I can track an IP
address” in CSI. We facepalmed when Randy used <code>telnet</code> to make a secure
connection in <em>Cryptonomicon</em>. We spawned a subreddit when Lex <a href="https://www.youtube.com/watch?v=dFUlAQZB9Ng">used a UNIX
system</a>. And some of us broke out
in hives at <a href="https://www.youtube.com/watch?v=O2rGTXHvPCQ">N3mbers’ description of
IRC</a>.</p>
<p>But we cheered when <a href="http://www.theregister.co.uk/2003/05/16/matrix_sequel_has_hacker_cred/">Trinity used
<code>nmap</code></a>
in <em>The Matrix Reloaded</em>.</p>
<p>When you depict ‘hacking’ as an esoteric dark art, you tell the public that
‘hackers’ are a breed of sorcerers who know the right incantations to make the
Internet bow to their will.</p>
<p>This is a lot like claiming pharmacists are brilliant potion-makers who pass
down the secrets to make mystic brews that control the human body.</p>
<p>But I don’t see any whizz kids saying “Hang on, I bet I can cook up a quick
truth serum by distilling the monorubidium dibenzene crystal. Could you hand me
the Bunsen burner?” (Followed by one of the most annoying line in all of
cinema: “In <em>English</em>, Doc?”)</p>
<p>This strange caricature that popular culture has drawn is what makes people
regard ‘hackers’ with a blend of suspicion and fear. It leads to a vast
misperception of what ‘hacking’ really is. As a more tangible effect, it also,
indirectly leads to the government not knowing how to handle computer security
cases as well as other cases.</p>
<p>You’re stereotyping an entire community: a community with history and values.</p>
<p>Of course, there are the bad guys who steal bitcoin and leak Sony employee’s
personal emails. The least pop culture could do about them is to stop
glorifying them as tech savants and pointing out that almost all such
‘victories’ are simply cases of a big company not installing the latest updates
to their software (this is not a joke).</p>
<p>On the other hand, there are the heroes of computer security: people who
dedicate their time and resources to finding and fixing critical issues in open
source software to keep us safe. These are the real geniuses; they are
brilliant folks with an immense knowledge of how <em>everything</em> works. It’s
unfair to represent them as the same people as above.</p>
<p>Public opinion is really important in things like this, and movies and books
are huge influences on it.</p>
<p>So here’s a request. Next time you have a scene with hacking, consult with an
expert. Or even a geeky high school student (myself included). Ask them to tell
you about a plausible real-world attack, and take the time to understand it at
a conceptual level.</p>
<p>Learn about its history: when was it discovered? Did anyone get in trouble by
using it? Was it embargoed, allowing big companies to patch their systems
before the general public was told about it? Or was it leaked? What might show
up on a computer screen when you’re carrying out the attack?</p>
<p>I <em>promise</em> it’s going to be much cooler than anything fictional. We regularly
talk about things like the BEAST attack, the Heartbleed exploit and the
Shellshock vulnerability. We have tools called Metasploit. We even use the
phrase ‘poisoned cookies’ in research papers.</p>
<p>In the world of ‘hackers’, truth is way cooler than fiction.</p>
<hr>
<p>P.S. You might have noticed that I put ‘hackers’ and ‘hacking’ under scare
quotes throughout this article. There is a reason for this. In the CS culture,
a ‘hacker’ is not a criminal. A ‘hack’ is simply an <a href="http://www.catb.org/jargon/html/meaning-of-hack.html">appropriate application of
ingenuity</a>. Eric Steven
Raymond explains this perfectly in his excellent document <a href="http://www.catb.org/esr/faqs/hacker-howto.html">how to be a
hacker</a>:</p>
<blockquote>
<p>There is another group of people who loudly call themselves hackers, but
aren’t. These are people (mainly adolescent males) who get a kick out of
breaking into computers and phreaking the phone system. Real hackers call
these people ‘crackers’ and want nothing to do with them. Real hackers mostly
think crackers are lazy, irresponsible, and not very bright, and object that
being able to break security doesn’t make you a hacker any more than being
able to hotwire cars makes you an automotive engineer. Unfortunately, many
journalists and writers have been fooled into using the word ‘hacker’ to
describe crackers; this irritates real hackers no end.</p>
<p>The basic difference is this: hackers build things, crackers break them.</p>
<p>If you want to be a hacker, keep reading. If you want to be a cracker, go
read the alt.2600 newsgroup and get ready to do five to ten in the slammer
after finding out you aren’t as smart as you think you are. And that’s all
I’m going to say about crackers.</p>
</blockquote>
<p>Someday, I’d like to watch a movie where the FBI imprisons a cracker, not a
hacker.</p>
<p>Until then,</p>
<p>Yours Truly.</p>
]]></description>
            <link>http://hardmath123.github.io/dear-hollywood.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/dear-hollywood.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Fri, 12 Dec 2014 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Don your tmuxedo]]></title>
            <description><![CDATA[<p>A tmux quickstart.</p>


<p><a href="http://tmux.sourceforge.net">tmux</a> is a <em>terminal multiplexor</em>, which is
nerdspeak for a program that runs multiple processes simultaneously within a
single parent process. You might have heard of <code>screen</code>; it’s similar (and, in
fact, a lot of <code>tmux</code> quickstarts assume that you’re transitioning from
<code>screen</code>). This lets you have, for example, a text editor and a test server
running in the same physical terminal window. Instead of opening multiple <code>ssh</code>
connections to your server, <code>tmux</code> allows you to maintain a single connection
and divide your screen up virtually into multiple panes.</p>
<p>Another nice thing about <code>tmux</code> is that the virtual panes are independent of
the processes running, so you can “detach” a process and leave it running in
the background without any terminal displaying the output. In face, a detached
<code>tmux</code> session lives on even if you disconnect the <code>ssh</code> session. When you log
back on, you can reattach to that process again.</p>
<p>Anyway, let’s get started. You make a tmux session by typing <code>tmux</code> in bash.</p>
<p>Your screen should get a pretty green ribbon under it, saying <code>0:bash</code>. This
means you’re currently in window 0, running <code>bash</code>. You can do normal bashey
things here (<code>ls</code>, <code>vim</code>, <code>irssi</code>, whatever): <code>tmux</code> simply feeds your user
input along to the bash process.</p>
<p>Well, almost. <code>tmux</code> listens in and intercepts any input that begins with a
special keypress, <code>^B</code>. You type this with the control character and ‘B’ the
way you would type <code>^C</code> to kill a bash process. We call <code>^B</code> the “prefix”.</p>
<p>Let’s detach from <code>tmux</code>! For the dramatic effect, feel free to leave some
process running—perhaps a Python session or even your IRC client. Type <code>^B D</code>
(that is, the prefix followed by the <code>D</code> character).</p>
<p>You should be back to the old bash. But the process you started is still
running in the background: just not getting any input from you (or showing you
any output). To reconnect to it, type <code>tmux attach</code> and you should get your
process again. The easiest way to kill a session is to simply exit all the
processes in it; if only <code>bash</code> is running, then type <code>exit</code>.</p>
<p>You can use and manipulate multiple different named sessions, by specifying
different command line arguments to <code>tmux</code>, such as <code>tmux new -s
name_of_new_session</code> to make a new session, <code>tmux attach -t name</code> to attach to
a named session, and <code>tmux kill-session -t name</code> to kill a session. <code>tmux ls</code>
lists sessions.</p>
<p>But the more interesting stuff is multiplexing. Open up a session and type <code>^B
%</code>. Your pane should split into two columns. You now essentially have two
virtual terminals. Use <code>^B arrow-keys</code> to switch between panes. To close a pane
you exit the process that was running in that pane (<code>exit</code> in bash).</p>
<p>You can use <code>^B &quot;</code> to split the other way (horizontally, so the new pane is
below the old one). And there are a bunch of commands to resize and swap panes.</p>
<p>Instead of saying them all over again, I’m going to point you to <a href="https://gist.github.com/MohamedAlaa/2961058">this
gist</a>, which has all the
information you need.</p>
<p>In general, I use <code>tmux</code> as a way to keep my session as I left it when I logout
(for example, this post was written across a couple of days, but I didn’t close
vim at all). Also, it’s an easy way to leave a server or a bot running
perpetually.</p>
<p>Enjoy tmuxing!</p>
]]></description>
            <link>http://hardmath123.github.io/tmux.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/tmux.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sun, 07 Dec 2014 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[It's not socket science: Part I]]></title>
            <description><![CDATA[<p>A hands-on introduction to networking.</p>


<p>I like protocols. The Internet is like being in a party, and trying to have a
conversation with the person across the room by passing post-it notes. Except
you can only fit a couple of words onto a post-it note (of which you have, of
course, a limited supply). And people take as long as they want to pass along
the note. Or they could just forget about it. Some of them might read the
notes, others may replace your notes with their own. And the person across the
room only speaks Finnish.</p>
<p>Despite these hostile conditions, the Internet works. It works because we have
protocols—rules that computers in a network obey so that they can all get
along.</p>
<p>And you can understand these protocols. It’s not rocket science: it’s socket
science! (I promise that was the only pun in this post.)</p>
<p>Protocols fit onto other protocols. The lowest-level protocol you should really
care about is TCP: the Transmission Control Protocol. TCP handles taking a
large message, dividing it among many post-it notes, and then reassembling the
message at the other end. If some notes get lost along the way, TCP sends
replacements. Each post-it is called a “packet”.</p>
<p>Of course, TCP fits on top of another protocol, the Internet Protocol (IP, as
in IP Address), which handles even messier things like ensuring a packet gets
passed on from its source to its destination. There are other protocols that
live on IP: UDP is like TCP, except it doesn’t care whether packets get there.
If you’re writing a video conferencing service, you don’t need to ensure that
each packet makes it, because they’ll be out of date. So you use UDP.</p>
<p>TCP is handled at the kernel level, so when you send out a message, it’s
wrapped in TCP automatically. In fact, you need administrator privileges on
UNIX to send out “raw” packets (there are occasionally reasons to do this).</p>
<p>To create a TCP connection, we use <em>sockets</em>. Most languages provide socket
bindings: I’ll use Python’s API (which is very similar to C’s), but Node.js’s
<code>net</code> module does the same thing.</p>
<p>A quick way to get a socket working is to use <code>netcat</code> (it’s called <code>nc</code> on
most UNIX shells). There’s also <code>telnet</code>, but telnet listens for its own
protocol (for instance, if your connection sends a specific string, <code>telnet</code>
will automatically send back your screen width).</p>
<p>Alternatively, you can use <code>ncat</code>, which comes bundled with <code>nmap</code>. I prefer
<code>ncat</code>; I’ll explain why in a little bit. This command-line utility is pretty
much a UNIX stream that sends out stdin by TCP, and writes incoming messages to
stdout.</p>
<p>Once you have TCP working, you can do all sorts of stuff, because now message
length and integrity has been abstracted away. For example, you explore the web
by abiding by the HyperText Transfer Protocol (HTTP, as in <a href="http://something">http://something</a>).</p>
<p>In fact, it’s worth trying right now. HTTP has the concept of a “request” and a
“response”. HTTP requests look sort of like <code>GET /index.html HTTP/1.1</code>. GET is
the “method”, you can also POST, PUT, or DELETE (or even
<a href="http://en.wikipedia.org/wiki/Hyper_Text_Coffee_Pot_Control_Protocol">BREW</a>).</p>
<p><code>/index.html</code> is the path (the stuff you would type after <code>www.google.com</code> in
the address bar), and <code>HTTP/1.1</code> is the protocol (you could, in theory, have
another protocol running—HTTP 2.0 is being drafted as I write this).</p>
<p>Let’s do it. Open up a shell and try <code>nc google.com 80</code>. You’re now connected
to Google. Try sending it <code>GET /index.html HTTP/1.1</code>. You’ll need to hit
“enter” <em>twice</em> (it’s part of the protocol!).</p>
<p>You’ll be greeted by a huge mess of symbols, which is the HTML code that makes
up the Google homepage. Note that the connection doesn’t close, so you can send
another request if you want. In fact, let’s do that: if you only want to check
out the protocol, you can send a <code>HEAD</code> request, which is identical to <code>GET</code>
except it doesn’t send back an actual message. In the real world, <code>HEAD</code> is
useful to efficiently check if a file exists on a server. If you try <code>HEAD
/index.html HTTP/1.1</code>, you get:</p>
<pre><code>HTTP/1.1 200 OK
Date: Sat, 29 Nov 2014 19:40:02 GMT
Expires: -1
Cache-Control: private, max-age=0
Content-Type: text/html; charset=ISO-8859-1
Set-Cookie: PREF=ID=67a496862b9f3c29:FF=0:TM=1417290002:LM=1417290002:S=8UjQDBRWYSa1y9tA; expires=Mon, 28-Nov-2016 19:40:02 GMT; path=/; domain=.google.com
Set-Cookie: NID=67=NnwRLRx4JVz-x3lWFTSxzV_ZxLi_TLVmbw8oDifyhzT2iuWwQ0mVveS15bE8jI28kI-p8cMIEXmmwDmwlxojTY07azz6XzcmeRD7mHerDLuVjPwjV180AxNqWBHqJrfp; expires=Sun, 31-May-2015 19:40:02 GMT; path=/; domain=.google.com; HttpOnly
P3P: CP=&quot;This is not a P3P policy! See http://www.google.com/support/accounts/bin/answer.py?hl=en&amp;answer=151657 for more info.&quot;
Server: gws
X-XSS-Protection: 1; mode=block
X-Frame-Options: SAMEORIGIN
Alternate-Protocol: 80:quic,p=0.02
Transfer-Encoding: chunked
</code></pre><p>This looks messy, but it really isn’t. You can see how the protocol works: you
start with the protocol name and <code>200 OK</code>, which is the <em>response code</em>. You
are probably familiar with another response code, <code>404 NOT FOUND</code>.</p>
<p>Then each line begins with some header, a colon, and then information. For
instance, you get the date, you get the content type (<code>text/html</code>), etc.</p>
<p>The Cookie headers instruct the browser to save those values in a local file.
When the web browser sends further requests, the protocol instructs it to send
the saved cookies as a part of the request. This lets websites track you—and
is the reason Gmail keeps you logged in even when you close the window.</p>
<p>So far, so good. One thing that may have bothered you was the <code>80</code> you typed
as an argument for <code>nc</code>. That’s the <em>port number</em>. The idea is that a computer
can serve multiple websites by having multiple active sockets. To allow this,
TCP has a port argument: your computer has 65,536 ports and it delivers packets
to the right one.</p>
<p>As I said, <code>ncat</code> comes bundled with <code>nmap</code>. <code>nmap</code> is a <em>port scanner</em>, a
script that checks every port of a computer to see if anything is listening
(this is one of those places where raw sockets make things much more
efficient). Running port scans lets an attacker find vulnerable programs
running, and then exploit them (for instance, test servers or outdated services
that have known security issues are easy targets).</p>
<p>Don’t run port scans on computers you don’t own. <code>nmap</code> is designed to be used
by professional network security people, who keep huge sites like Google up and
running safely.</p>
<p><code>80</code> is the conventional port for HTTP, but you can serve a website on any
port. To access it from a web browser, you append the port after the domain
name, like <code>http://example.com:81/index.html</code>.</p>
<p>The other thing that may have bothered you was how the computer know who
<code>google.com</code> was. The answer to that is another protocol: the DNS protocol,
which is used to ask a DNS server to resolve a domain name (like Google.com)
into an IP address. You can try this with the <code>host</code> command:</p>
<pre><code>$ host google.com
google.com has address 74.125.239.135
google.com has address 74.125.239.129
google.com has address 74.125.239.134
google.com has address 74.125.239.131
google.com has address 74.125.239.133
google.com has address 74.125.239.142
google.com has address 74.125.239.128
google.com has address 74.125.239.137
google.com has address 74.125.239.136
google.com has address 74.125.239.130
google.com has address 74.125.239.132
google.com has IPv6 address 2607:f8b0:4005:800::1009
google.com mail is handled by 30 alt2.aspmx.l.google.com.
google.com mail is handled by 40 alt3.aspmx.l.google.com.
google.com mail is handled by 10 aspmx.l.google.com.
google.com mail is handled by 20 alt1.aspmx.l.google.com.
google.com mail is handled by 50 alt4.aspmx.l.google.com.
</code></pre><p>Once you choose an IP address, the protocol lets you track down that computer
and establish a connection.</p>
<p>Now, you’re often told to always use HTTPS, because it’s secure. You can
probably already tell how insecure HTTP is: any guest at the party can read
your post-it packets and know everything.</p>
<p>A fun thing to try is to run <code>tcpdump</code>: it’ll dump packets from your computer
as they’re sent out or received (you may like the <code>-X</code> option). Mess around
with the options a bit, and you can read the raw contents of HTTP packets as
you surf the web. You’ll need to be an administrator to run it, but if you
think about it, that’s probably a good thing.</p>
<p>Anyhow, back to HTTPS: it’s just HTTP, except sitting on top of another
protocol called SSL (or TLS—it’s sort of complicated). SSL handles finding an
encryption that both you and your connection agree is secure, negotiating a
shared secret key, and then sending encrypted messages. It also lets you
authenticate people by passing around certificates that are cryptographically
signed by authorities.</p>
<p>HTTPS runs on port 443, which is the other default port that your browser
doesn’t need to be told. You can try the above HTTP fun on port 443: most
websites will get mad at you and kill the connection.</p>
<p>This is the reason I like <code>ncat</code>: the <code>--ssl</code> option wraps your connection in
the SSL negotiations and encrypts what you send (you can’t viably do this
manually). Try <code>ncat --ssl google.com 443</code>: things should work as normal now,
but <code>tcpdump</code> will show you gibberish.</p>
<p>At this point we’ve foiled almost all the hurdles in our initial party analogy,
so I’m going to take a break.</p>
<p>In <a href="socket-science-2.html">Part II</a> of this series, we’ll explore some more
protocols and write clients using Python. We’ll talk about how protocols are
established, and why it’s important that it works the way it does right now.</p>
<p>In Part III (yet-to-be-written), we’ll explore four recent showstopper
exploits, all of which make plenty of sense once you understand protocols: Goto
Fail, Heartbleed, Shellshock, and POODLE.</p>
]]></description>
            <link>http://hardmath123.github.io/socket-science.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/socket-science.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sat, 29 Nov 2014 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Notes on Binary Strings]]></title>
            <description><![CDATA[<p>A memory dump of useful functions</p>


<p>One of the things I had to do for PicoCTF was learn how to wrangle binary
strings in various languages. The idea is that you think of a string as an
array of numbers instead of an array of characters. It’s only coincidental that
some of those numbers have alternate representations, such as “A”. The
alphabet-number correspondence is an established table. Look up
<a href="http://wikipedia.org/wiki/ASCII">ASCII</a>.</p>
<p>Each number is a byte (aka an <code>unsigned char</code>), so it ranges from 0 to 255.
This means it’s convenient to express them in hex notation—each number is two
hex digits, so <code>0xff</code> is 256.</p>
<p>Using this, we can turn strings into hex sequences (by doubling the number of
printed characters), and then turn the hex sequence into a decimal number. This
is great for crypto, because many algorithms (including RSA) can encrypt a
single number.</p>
<p>We can also use <a href="http://en.wikipedia.org/wiki/Base64">base64</a> scheme to turn
binary strings into printable strings. It uses case-sensitive alphabet (52),
numbers (10), <code>+</code>, and <code>/</code> (2) as the 64 symbols. Each set of three bytes is
represented by four base64 symbols. Note that this means we need to pad the
string if it isn’t a multiple of 3 bytes. The padding is indicated with <code>=</code> or
<code>==</code> at the end of the encoded message.</p>
<p>This post summarizes some really useful functions for working with binary
strings.</p>
<h3 id="python">Python</h3>
<p>You can use hexadecimal literals in Python strings with a <code>\x</code> escape code:</p>
<pre><code class="lang-python">s = &#39;\x63\x6f\x77&#39;
</code></pre>
<p>To get this representation of a string that’s already in memory, use <code>repr</code>. It
will turn unprintable characters into their escape codes (though it will prefer
abbreviations like <code>\n</code> over hex if possible).</p>
<p>You can use <code>ord</code> to turn a character into a number, so <code>ord(&#39;x&#39;) == 120</code> (in
decimal! It’s equal to <code>0x78</code>). The opposite function is <code>chr</code>, which turns a
number into a character, so <code>chr(120) == &#39;x&#39;</code>. Python allows hex literals, so
you can also directly say <code>chr(0x78) == &#39;x&#39;</code>.</p>
<p>To convert a number to a hex string, use the (guesses, anyone?) <code>hex</code> function.
To go the other way, use <code>int(hex_number, 16)</code>:</p>
<pre><code class="lang-python">hex(3735928559) == &#39;0xdeadbeef&#39;
int(&#39;deadbeef&#39;, 16) == 3735928559
</code></pre>
<p>To convert a string to or from hex, use <code>str.encode</code> and <code>str.decode</code>:</p>
<pre><code class="lang-python">&gt;&gt;&gt; &#39;cow&#39;.encode(&#39;hex&#39;)
&#39;636f77&#39;
&gt;&gt;&gt; &#39;636f77&#39;.decode(&#39;hex&#39;)
&#39;cow&#39;
</code></pre>
<p>The pattern <code>hex(number).decode(&#39;hex&#39;)</code> is quite common (for example, in RSA
problems). Keep in mind that you need to strip the leading <code>0x</code> and possibly a
trailing <code>L</code> from the output of <code>hex</code>, and also make sure to pad with a leading
<code>0</code> if there are an odd number of characters.</p>
<p>Finally, Python handles base64 with the <code>base64</code> module, but you can also just
use <code>str.encode(&#39;base64&#39;)</code> and <code>str.decode(&#39;base64&#39;)</code>. Keep in mind that it
tacks on trailing <code>\n</code>s. I don’t know why.</p>
<h3 id="javascript">JavaScript</h3>
<p>JavaScript is pretty similar. It supports <code>\x12</code> notation, and <code>0x123</code> hex
literals. The equivalent of <code>ord</code> and <code>chr</code> are <code>&quot;a&quot;.charCodeAt(0)</code> and
<code>String.fromCharCode(12)</code>, respectively.</p>
<p>You can convert a hex string to decimal with <code>parseInt(hex_string, 16)</code>, and go
the other way with <code>a_number.toString(16)</code>:</p>
<pre><code class="lang-javascript">parseInt(&quot;deadbeef&quot;, 16) == 3735928559
3735928559.toString(16) == &#39;deadbeef&#39;
</code></pre>
<p>Note the lack of <code>0x</code>.</p>
<p>Unfortunately, there isn’t a built-in string to hex string encoding or decoding
built into JavaScript, but it isn’t too hard to do on your own with some clever
Regexes. The tricky part is knowing when to pad.</p>
<p>Browser JS has <code>atob</code> and <code>btoa</code> for base64 conversions (read them as
“ascii-to-binary” and “binary-to-ascii”). You can install both of those as
Node modules from npm: <code>npm install atob btoa</code>.</p>
<h3 id="bash">Bash</h3>
<p>For the sake of completeness, I wanted to mention how to use Bash to input
binary strings to programs. Use the <code>-e</code> flag to parse hex-escaping in string
literals, and <code>-n</code> to suppress the trailing <code>\n</code> (both of these are useful to
feed a binary a malformed string):</p>
<pre><code class="lang-bash">$ echo &quot;abc\x78&quot;
abc\x78
$ echo -e &quot;abc\x78&quot;
abcx
$ echo -ne &quot;abc\x78&quot;
abcx$ # the newline was suppressed so the prompt ran over
</code></pre>
<p>Alternatively, <code>printf</code> does pretty much the same thing as <code>echo -ne</code>.</p>
<p>Sometimes you want to be able to write more data after that, but the binary is
using <code>read()</code>. In those cases, it’s helpful to use <code>sleep</code> to fool <code>read</code> into
thinking you finished typing:</p>
<pre><code class="lang-bash">{ printf &quot;bad_input_1\x00 mwahaha&quot;;
                     #  the zero char signals end-of-string
                     #  in C, which can be used to wreak all
                     #  sorts of havoc. :)
    sleep 0.1;
    printf &quot;bad_input_2&quot;;
    sleep 0.1;
    cat -; # arbitrary input once we have shell or something
} | something
</code></pre>
<p>Or, if you’re intrepid, you can use Python’s <code>subprocess</code> or Node’s
<code>child_process</code> to pipe input to the binary manually.</p>
<p>UNIX comes with the <code>base64</code> command to encode the standard input. You can use
<code>base64 -D</code> to decode.</p>
<h3 id="parting-tips">Parting tips</h3>
<p>Use <code>hex</code> when your binary string is a giant number, and use <code>base64</code> when
you’re simply turning a binary string into a printable one.</p>
<p>Use <code>wc -c</code> to get the character count of a binary file.</p>
<p>Use <code>strings</code> to extract printable strings from a binary file, though ideally
<a href="https://sourceware.org/bugzilla/show_bug.cgi?id=17512">not on trusted files</a>.</p>
<p>Finally, use <code>od</code> or <code>xxd</code> to pretty-print binary strings along with their hex
and plaintext representations.</p>
]]></description>
            <link>http://hardmath123.github.io/binarystrings.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/binarystrings.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Thu, 13 Nov 2014 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Some PicoCTF Writeups]]></title>
            <description><![CDATA[<p>In honor of PicoCTF, I wrote this post in pico.</p>


<p>Almost any metric of work I’ve done—homework submitted, emails answered, hours
spent playing piano, number of Github commits—show a sharp drop in the past
two weeks. I pretty much spent every moment on a computer solving
<a href="http://picoctf.com">PicoCTF</a> problems.</p>
<p>Pico was wonderful. It was an opportunity to do stuff I couldn’t (legally) do
before, and learn stuff that many adults would hesitate to teach teenagers. I
also got to hang out with cool hackers on their IRC channel, and had an excuse
to stay up till 2am hacking.</p>
<p>I’m planning on putting up some quick writeups of the problems I loved. If you
haven’t spent an hour or so with these problems, you won’t have any clue what
I’m talking about (and chances are that I myself won’t grok any of this a year
from now). Nevertheless, here goes.</p>
<h3 id="obo">OBO</h3>
<p>This problem caused too many people too many hours of pain.</p>
<p>The basic idea is that the programmer used <code>&lt;=</code> instead of <code>&lt;</code> wherever he was
iterating, so he has lots of off-by-one errors. In particular, when populating
his hex table, he has:</p>
<pre><code class="lang-c">for (i = 0; i &lt;= 6; ++i) {
    hex_table[&#39;a&#39; + i] = 10 + i;
}
</code></pre>
<p>This allows <code>g</code> to be a valid hex character. Yay.</p>
<p>Now he goes around checking whether or not all the password characters are hex,
and he tries to make sure that all hex chars are used at least once by
populating the array <code>digits</code>. But we can input <code>g</code> in the password, so we can
set <code>digits[16]</code> which overflows into <code>password</code>:</p>
<pre><code class="lang-c">int digits[16] = {0};
char password[64];
</code></pre>
<p>So far, so good. A <code>char</code> is one byte, and an <code>int</code> (on this setup) is 4 bytes.
So when we overflow an <code>int</code> onto <code>password</code>, we set the first four characters
of the array to <code>\x01\x00\x00\x00</code> (the bytes are reversed because
Endianness!). With that zero byte, we’ve effectively reset <code>password</code> to
<code>\x01</code>. So now we can input <code>\x01</code> as the confirmation and cheat the password
changer. Yay again.</p>
<p>Now what? It uses <code>system()</code> to call a Python script. Yuck. On the bright side,
it uses a relative file path for the Python file (the author probably didn’t
test it in another working directory). So we simply <code>cd</code> into our home
directory and make a new Python script with the same name, with contents:</p>
<pre><code class="lang-python">print open(&#39;/home/obo/flag.txt&#39;).read()
</code></pre>
<p>When we send OBO the overflowed password, it runs this with the right privs and we win.</p>
<h3 id="make-a-face">Make a Face</h3>
<p>This was my favorite challenge (I have a thing for web exploitation). My first
reaction was “CGI! Shell! This must be Shellshock!” Turns out they’ve patched
their Bash, though, so that didn’t work.</p>
<p>The legitimate solution relies on the fact that Perl’s <code>open()</code> is unsafe: you
can call it with a <code>|</code> at the end, and it <em>evaluates the argument in a shell</em>,
sending back the result.</p>
<p>The webpage essentially asks the server to open the file <code>{body part
type}{index}</code>, where <code>body part type</code> is one of <code>head</code>, <code>nose</code>, etc. and
<code>index</code> looks like <code>1.bmp</code>. So, of course, we can cheat by sending it <code>1.bmp;
ls|</code> and instead of a bitmap file, the server gets a directory listing.</p>
<p>This is pretty easy to try out with <code>curl</code>…but we get back gibberish. It
looks like there’s some bitwise melding going on on the server that combines
the images. This dies when it gets <code>ls</code> output. So we just send <em>all</em> the body
part parameters the same bad index. It bitwise <code>&amp;</code>s them together (i.e. nothing
happens) and we get the secret. Simple but beautiful.</p>
<h3 id="steve-s-list">Steve’s List</h3>
<p>This was my other favorite challenge, because there were so many different
things you needed to simultaneously break to get shell. Also, I just love the
way they used CSS3 polyfills to make the <code>blink</code> tag work in non-ancient
browsers.</p>
<p>First, there’s the cookie signing. Steve, in all his wisdom, is authenticating
cookies by maintaining a SHA1 signature of the cookie plus some secret nonce.
Turns out, this is pretty insecure because of a simple padding
message-extension hack. A quick Google search sends us <a href="http://journal.batard.info/post/2011/03/04/exploiting-sha-1-signed-messages">this blog
post</a>,
and they post some sample Python that gets the job done.</p>
<p>Though I recommend reading the blog post to actually understand what’s going
on, the basic idea is that a SHA1 hash operates on an arbitrary number of
blocks. The state of the algorithm at the end of one block is the input to the
next block’s hash (the input to the first block’s hash is a well-known
constant).</p>
<p>You don’t need to know the contents of the previous block to add another block.
So we manually pad the payload we have (that is, the cookie) and tack on our
own block. We can initialize the SHA state with the (known) hash of the first
block and then compute valid subsequent hashes without ever knowing the key.
Some quick modifications to the Python script given above let us forge
arbitrarily long messages.</p>
<p>And now for something completely different. The server reads each line of the
cookie, and unpacks it using PHP’s <code>unserialize</code>:</p>
<pre><code class="lang-php">$settings_array = explode(&quot;\n&quot;, $custom_settings);
$custom_settings = array();
for ($i = 0; $i &lt; count($settings_array); $i++) {
    $setting = $settings_array[$i];
    $setting = unserialize($setting);
    $custom_settings[] = $setting;
}
</code></pre>
<p>With forged objects, we can make it instantiate arbitrary objects at
will—PHP’s serialization saves type information. Notice that the <code>Post</code> object
defines:</p>
<pre><code class="lang-php">function __destruct() {
    // debugging stuff
    $s = &quot;&lt;!-- POST &quot; . htmlspecialchars($this-&gt;title);
    $text = htmlspecialchars($this-&gt;text);
    foreach ($this-&gt;filters as $filter)
        $text = $filter-&gt;filter($text);
    $s = $s . &quot;: &quot; . $text;
    $s = $s . &quot; --&gt;&quot;;
    echo $s;
}
</code></pre>
<p>So it will dump its contents in an HTML comment for debugging when it’s
destroyed by the GC. Since we can instantiate arbitrary <code>Post</code> objects, we can
get their contents printed out at will. We’re very close now.</p>
<p>We can also create <code>Filter</code>s that act on the <code>Post</code>s. <code>Filter</code>s use PHP’s
<code>preg_replace</code>. That’s insecure, because you can use the <code>e</code> flag to <em>evaluate
arbitrary code</em> based on the replacement text generated from regex captures.
Argh.</p>
<p>At this point, it was around 2am, my hands felt like rubber, and my eyes felt
like mozzerella balls. So I just copied <code>posts/steve.txt</code>, and modified one of
the filters to dump the contents of the flag, and went to sleep in peace.</p>
<p>There are several lessons to be learned here, but the most important are:</p>
<ol>
<li>Don’t roll your own crypto.</li>
<li>If you do, don’t use PHP.</li>
<li>If you do, read the docs.</li>
</ol>
<h3 id="block">Block</h3>
<p>Block uses a Substitution Permutation Network to encrypt the string—but it
does it twice. I pretty much brute-forced this one. But I did it tastefully, so
it merits a writeuplet.</p>
<p>We know that the message begins with <code>message:&lt;space&gt;</code>, and we know the first 9
bytes of the output. This lets us mount a known-plaintext attack. Here’s how:
we encrypt the plaintext with <em>all</em> possible keys (there are
($2^{24}=16777216$) of them) and we <em>decrypt</em> the ciphertext with all possible
keys. Turns out that for the correct pair of keys, we’ll get the exact same
result (the intermediate encryption). This is a ‘meet-in-the-middle’ attack
(not to be confused with ‘man-in-the-middle’ or ‘Malcolm-in-the-Middle’), and
can be read about <a href="http://en.wikipedia.org/wiki/Meet-in-the-middle_attack">on
Wikipedia</a>. This is
good—now all we need to do is find the intersection of two massive lists.</p>
<p>Once I’d compiled these lists manually (it took over an hour), I realized that
I would be graduating high school by the time a naive Python intersection
search finished. Fortunately, Python’s <code>set</code> type has ridiculously fast
member-checking, so it took all of 5 minutes to find the keypair, and I was
done.</p>
<hr>
<p>That’s all for now. I’ll probably write a couple more, depending on the amount
of homework I need to make up this week&hellip;</p>
]]></description>
            <link>http://hardmath123.github.io/pico.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/pico.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sat, 08 Nov 2014 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Better Earley than never]]></title>
            <description><![CDATA[<p>An informal explanation of Earley parsing.</p>


<p>I wrote <a href="http://github.com/Hardmath123/nearley">nearley</a> working on course
materials for a Berkeley CS course, but it quickly spiralled into a pretty big
project. Perhaps more than parsing, I learned how to manage an open-source
project with multiple contributors, and how to take concepts written in
math-heavy notation and convert them to ideas (and code!).</p>
<p>There aren’t many tutorials about Earley parsing, because Earley parsing has
been shadowed by the recursive descent or lookahead parsers that everyone uses.
(The only significant Earley project out there is Marpa; I got some help from
Marpa’s creator, Jeffrey Kegler.) But Earley parsers are awesome, because they
will parse <em>anything</em> you give them. Depending on the algorithm specified,
popular parsers such as lex/yacc, flex/bison, Jison, PEGjs, and Antlr will
break depending on the grammar you give it. And by break, I mean infinite loops
caused by left recursion, crashes, or stubborn refusals to compile because of a
“shift-reduce error”.</p>
<p>Here’s my mini-tutorial that explains Earley parsing, with an emphasis on
de-emphasizing notation. It’s adapted from a file that used to live in the git
repo for nearley.</p>
<h3 id="primer-backus-naur-form">Primer: Backus-Naur Form</h3>
<p>The Earley algorithm parses a string (or any other form of a stream of tokens)
based on a grammar in Backus-Naur Form. A BNF grammar consists of a set of
<strong>production rules</strong>, which are expansions of <strong>nonterminals</strong>. This is best
illustrated with an example:</p>
<pre><code>expression -&gt;
    number # a number is a valid expression
    | expression &quot;+&quot; expression # sum
    | expression &quot;-&quot; expression # difference
    | &quot;(&quot; expression &quot;)&quot; # parenthesization

number -&gt; &quot;1&quot; | &quot;2&quot; # for simplicity&#39;s sake, there are only 2 numbers
</code></pre><p>This small language would let you write programs such as <code>(1+2+1+2)-1-2-1</code>.
<code>expression</code> and <code>number</code> are <em>nonterminals</em>, and <code>&quot;+&quot;</code> and <code>&quot;-&quot;</code> are
<em>literals</em>. The literals and nonterminals together are <strong>tokens</strong>.</p>
<p>The <strong>production rules</strong> followed the <code>-&gt;</code>s. The <code>|</code>s delimited different
expansions. Thus, we could have written</p>
<pre><code>number -&gt; &quot;1&quot;
number -&gt; &quot;2&quot;
</code></pre><p>and it would be an identical grammar.</p>
<p>For the rest of this guide, we use the following simple, recursive grammar:</p>
<pre><code>E -&gt; &quot;(&quot; E &quot;)&quot;
   | null
</code></pre><p>this matches an arbitrary number of balanced parentheses: <code>()</code>, <code>(())</code>, etc. It
also matches the empty string <code> </code>. Keep in mind that for a parsing algorithm,
this is already very powerful, because you cannot write a regular expression
for this example.</p>
<h3 id="algorithm">Algorithm</h3>
<p>Earley works by producing a table of partial parsings.</p>
<p>(Warning: some notation is about to ensue.)</p>
<p>The nth column of the table contains all possible ways to parse <code>s[:n]</code>, the
first <em>n</em> characters of <em>s</em>. Each parsing is represented by the relevant
production rule, and a <strong>marker</strong> denoting how far we have parsed. This is
represented with a dot <code>•</code> character placed after the last parsed token.</p>
<p>Consider the parsing of this string <code>()</code> with the grammar <code>E</code> above. Column 0 of
the table looks like:</p>
<pre><code># COL 0
1. E -&gt; • &quot;(&quot; E &quot;)&quot;
2. E -&gt; • null
</code></pre><p>which indicates that we are expecting either of those two sequences.</p>
<p>We now proceed to process each entry (in order) as follows:</p>
<ol>
<li><p>If the next token (the token after the marker <code>•</code>) is <code>null</code>, insert a new
entry, which is identical excpept that the marker is incremented. (The <code>null</code>
token doesn’t matter.) Then re-process according to these rules.</p>
</li>
<li><p>If the next token is a nonterminal, insert a new entry, which expects this
nonterminal.</p>
</li>
<li><p>If there is no expected token (that is, the marker is all the way at the
end), then we have parsed the nonterminal completely. Thus, find the rule that
expected this nonterminal (as a result of rule 1), and increment its marker.</p>
</li>
</ol>
<h3 id="example-">Example!</h3>
<p>Following this procedure for Column 0, we have:</p>
<pre><code># COL 0 [processed]
1. E -&gt; • &quot;(&quot; E &quot;)&quot;
2. E -&gt; • null
3. E -&gt; null •
</code></pre><p>Now, we consume a character from our string. The first character is <code>&quot;(&quot;</code>. We
bring forward any entry in the previous column that expects this character,
incrementing the marker. In this case, it is only the first entry of column 0.
Thus, we have:</p>
<pre><code># COL 1, consuming &quot;(&quot;
1. E -&gt; &quot;(&quot; • E &quot;)&quot; [from col 0 entry 1]
</code></pre><p>Processing, we have (you can read the comments top-to-bottom to get an idea of
how the execution works):</p>
<pre><code># COL 1

# brought from consuming a &quot;(&quot;
1. E -&gt; &quot;(&quot; • E &quot;)&quot; [from col 0 entry 1]

# copy the relevant rules for the E expected by
# the first entry
2. E -&gt; • &quot;(&quot; E &quot;)&quot; [from col 1 entry 1]
3. E -&gt; • null [from col 1 entry 1]

# increment the null rule
4. E -&gt; null • [from col 1 entry 3]

# entry 4 is completed, so we increment entry 1
5. E -&gt; &quot;(&quot; E • &quot;)&quot; [from col 0 entry 1]
</code></pre><p>Notice how we must keep track of where each entry was added so that we know
which entry to increment when it is completed.</p>
<p>Next, we consume a <code>&quot;)&quot;</code>, the second (and last) character of our string. We
have:</p>
<pre><code># COL 2, consuming &quot;)&quot;

# brought from consuming a &quot;)&quot;
1. E -&gt; &quot;(&quot; E &quot;)&quot; • [from col 0 entry 1]
</code></pre><p>Nothing further can be done, so the parsing is complete. We now find entries
that are complete and created from an entry in column 0. (That means we have a
parsing from the beginning of the string to the end). Since we have such an
entry in column 2, this represents the parsing.</p>
<h3 id="finale">Finale</h3>
<p>Nearley parses using the above algorithm, but giving each entry
“baggage”, namely the parsed data as a tree structure. When we finish an entry
(and are about to process it with rule 3), we apply the postprocessor function
to the baggage. Once we determine a parsing, we can reveal—with a
flourish—the postprocessed data to be used by the user.</p>
<h3 id="parting-words">Parting words</h3>
<p>If we had multiple entries that worked in the end, there would be multiple
parsings of the grammar. This means the grammar is <strong>ambiguous</strong>, and this is
generally a very bad sign. It can lead to messy programming bugs, or
exponentially slow parsing.</p>
<p>It is analogous to the confusion generated when one says</p>
<blockquote>
<p>I’m really worried Christopher Nolan will kill a man dressed like a bat in
his next movie. (The man will be dressed like a bat, I mean. Christopher
Nolan won’t be, probably.)</p>
</blockquote>
]]></description>
            <link>http://hardmath123.github.io/earley.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/earley.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sat, 25 Oct 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Detech Your Classroom]]></title>
            <description><![CDATA[<p>Technology isn’t helping.</p>


<p>I go to a tech-savvy school. And it’s getting out of hand.</p>
<p>On a daily basis, I navigate through several websites just to <em>find</em> my
homework. <strong>Schoology</strong> tells me the assignment and due date. Then I head over
to the teacher’s <strong>Google Site</strong> (almost every teacher maintains a class
website). I need to complete sets of flashcards on <strong>Quizlet</strong>, make a project
on <strong>Glogster</strong>, record my French on <strong>Audacity</strong> and post it to <strong>Dropbox</strong>
(or, in one case, <strong>YouTube</strong> and print out a <strong>QR code</strong> that links there). I
have to fill out final exams on <strong>Google Forms</strong>. I need to use <strong>SmartMusic</strong>
to record my piano-playing.</p>
<p>I check my grades on <strong>Infinite Campus</strong>, except for Chemistry, where my
teacher has a <em>hand-coded</em> webpage (it uses frames and contains the tag
<code>&lt;SCRIPT LANGUAGE=&quot;Javascript&quot;&gt;&lt;!--...//--&gt;</code>). One of my classes runs on
<strong>ClassroomDojo</strong>, which is essentially the Karma system applied to class
participation, and directly linked to grading.</p>
<p><strong>Geddit</strong> wants each student to have an iPad, enabling teachers (for the first
time in history!) to ask the entire class a question and see who can find the
answer. Their website’s testimonial from a 9th grader is “Geddit, is like,
totally private. So I can let my teacher know how I’m doing without, like,
anyone else knowing.” English essays get turned into <strong>Turnitin</strong>, which checks
them against a large database and informs us that most of them are liberally
plagiarized, since we quoted Orwell. I’ve had to learn math on <strong>Mindspark</strong>;
my fellow sixth graders could figure out how to crack the site (hint: they
don’t sanitize HTML).</p>
<p>Our teachers all have ‘Smart boards’, which are essentially things that project
onto whiteboards, except you can’t write on them with normal markers without
being yelled at. And the projecters take half the period to start working, and
then they do, they’re tempramental at best. If the teacher remembers to bring
the cable.</p>
<p>Almost every class uses <strong>Scantrons</strong>, though the net increase in mis-bubbling,
mis-grading, and overall stress made me realize that it might actually be less
work for teachers to just check circled answers on a printout. I never liked
multiple-choice tests, because it almost never tests the right things. It takes
a far deeper understanding of science, history, a language, or math to write a
coherent sentence. It’s also harder to cheat.</p>
<p>And that’s just the technology <em>I</em> deal with. There’s <strong>NoRedInk</strong>, which tries
to teach you grammar. There’s <strong>Understoodit</strong>, which tries to eliminate
hand-raising (is the problem <em>really</em> that students are too embarrassed to
raise their hands? I doubt it.). And then there are the various counterparts
that each of these apps has.</p>
<p>All I needed for my CS class was a terminal…</p>
<hr>
<p>Sure, I understand that teachers want to use technology to promote learning.
But there’s a difference between using technology, and shoving technology into
an otherwise functional classroom. Most of these new ‘classroom technologies’
<em>don’t</em> teach us French. They teach us how to tolerate a badly-coded website.
Technology is all about picking (or building) tools to make life easier. It’s
about automation. Just because it appears on a screen doesn’t mean that it’s
making life easier. Is writing a “blog entry post” or “E-mail to your teacher”
instead of a paragraph or letter really that much more exciting?</p>
<p>As an analogy (because I don’t have too many of those already), it’s like
telling a kid to use more special effects in their PowerPoint presentation.
He’s learning the <em>opposite</em> of what he should. He’s going to end up as one of
those people with red-text-on-a-blue-background, and five minute long slide
transitions, and animations with Wile E. Coyote noises, because that’s what
pleases the teacher.</p>
<p>But you <em>want</em> to teach him how to make a presentation that appeals to people
and conveys information. Hopefully.</p>
<p>Similarly, technology at a classroom isn’t going to teach children what you
want them to learn. It’s going to tell them to rapidly adopt any new technology
without considering whether it’s needed. It’s going to tell them that the
existence of technology makes things more impressive. It sends out a false
message that they’re ‘computer whizzes’.</p>
<p>It isn’t going to teach them to choose tools wisely. To be careful with how you
invest your time. To assess whether the software is really helping you or not.
And it’s <em>certainly</em> not going to teach them any computer science. Contrary to
popular opinion, not all kids are tech savants. Not all kids even <em>have</em> the
resources. I don’t own a smartphone; I can’t efficiently scan a QR code at
home.</p>
<p>The truth is that every student needs to learn by interacting with a learned
instructor. Technology distances us from teachers. I will learn a lot more if
I’m being assessed by a human. A computer can instantly give me the percent of
questions I answered correctly, but I honestly don’t care. Start-ups that offer
these services are, at the deepest level, businesses who don’t really have much
interest in improving education (if they did, they would be doing a better
job!). Stockholders aren’t in the classrooms.</p>
<p>Yes, there’s an education crisis (and yes, there has <em>always</em> been an education
crisis), but the solution is not to monkey-patch it by thinking technology is
smarter. The solution is to make sure teachers, not technology, interface with
students.</p>
<p>I think I’m going to go write a script to poll my chem grades and email me when
they’re updated.</p>
<p>P.S. What technology <em>do</em> I approve of at school? <strong>Google Drive</strong> is wonderful
for word processing for high school. <strong>Email</strong> turns out to be (surprise,
surprise) really useful. <strong>iCal</strong> (a.k.a. “Calendar”) is a good brain dump
software. Google <strong>Keep</strong> helps manage lists and links. <strong>Feedly</strong> helps keep
track of reading material. But my favorite bit of school-managing is a printout
in a three-ring binder.</p>
<p>P.S.S. For nerds: <strong>Git</strong> is great to version-control big school projects.
Because you’re going to mess up. <strong>LaTeX</strong> is great for
reports/labs/essays/presentations (!), because typesetting means more than you
think. <strong>WolframAlpha</strong> saved me in a lot of classes involving research. Oh,
and it does math, too. <strong>GeoGebra</strong> turns out to be great for making diagrams
and shiny demos in geometry.</p>
<p>P.S.S.S. A lot of teachers (including my (awesome) CS teacher) try to enforce
submission deadlines by asking you to save a timestamped copy of your document
in case you can’t submit the assignment to Turnitin. This is a <em>terrible</em> idea.
As an exercise, use <code>touch -t</code> to show that this is a trivial system to beat.
Then suggest a practical but reasonably secure alternative (hashes are small
enough to write down on paper and bring to school).</p>
]]></description>
            <link>http://hardmath123.github.io/tech-in-education.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/tech-in-education.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Fri, 10 Oct 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Bingo is Boring]]></title>
            <description><![CDATA[<p>Memories of elementary school</p>


<blockquote>
<p><em>I completely rewrote this story for an English assignment. Once it’s graded,
I’ll updated this post with the much more exciting revised version. Maybe.</em></p>
</blockquote>
<p>“Bingo.”</p>
<p>“Yes, bingo.”</p>
<p>“Like, the—“</p>
<p>“Yes, Mr. Smiley, bingo.”</p>
<p>Back in elementary school, our favorite adult was a Mr. Smiley. He hung out
with us at lunch, told jokes on rainy days, and <em>always</em> won thumb wars. I
remember very little about him, but I remember him having thick, bulging veins
in his arms. There was always a different explanation for how they came to be.
Some involved bears. Mr. Smiley was the school custodian.</p>
<hr>
<p>“Alright, everyone, quiet down. <em>Shhh!</em> Come up—ONE BY ONE!—and get your boards.”</p>
<p>It was a rainy day. The grown-ups intended to herd us into the art room. Mrs. J
(I never knew her real name, and after the third year it became too awkward to
ask) was in there, with her stash of green boards. They had little red sliders
across each of the 25 cells.</p>
<p>“The first one is… B-4!” Someone cried out “before what?”. This was
traditional and obligatory.</p>
<p>Bingo days were the worst. It’s hard to explain the feeling a third grader has
when he’s being told to quietly pretend to enjoy a game meant for people
several times his age. You know that you could be drawing or talking to your
friend. Or you could be out playing in the rain (an adult bursts into flames at
the mere thought).</p>
<p>“N-32! Remember, I want you to have <em>all four corners</em> before you come up!”</p>
<p>And then there was the thrill of secretly communicating with people in the
silence. I can still sign in Handspeak, our dialect of sign language, where you
simply imitate the letters’ shapes with your fingers. Given another couple of
years, I’m confident that we would have invented Morse code.</p>
<p>“O-42! That’s Oh-fooooorty-two!”</p>
<p>On top of all that, there was a distinct lack of exciting prizes. To date, the
most exciting thing any of us had won was a whistle, which we were naturally
forbidden from using.</p>
<hr>
<p>“That’s adorable.”</p>
<p>“It’s not adorable, Mr. Smiley.” (Third graders cower at the word.) “It’s
democracy.”</p>
<p>“Yes, of course. I’ll, uh, get you those photocopies riiiight away.”</p>
<p>I remember handing over a crumpled sheet of notebook paper. On each line was
the name of one of the 80 students in the third grade who agreed with us. Next
to it was the name written in worse handwriting, our attempts at signatures.</p>
<p>That sheet of paper marked the culmination of six weeks of convicincing kids
that Bingo Is Boring&trade;. We made lists, brainstormed alternatives (“where’s
the nearest bowling alley?”), and drafted a letter to the principal. We had a
president and a vice-president of the BIB&trade;. We had meetings, speeches,
and debates.</p>
<p>We had opposition. We had to merge with a competing group to form the Bingo
Elimination Group (BEG&trade;). Contracts were signed. As secretary, Chris
handled the paperwork for me.</p>
<p>We had allies, especially the wonderfully helpful Mrs. Ayer who helpfully shot
down our plan to send recon missions to the staff room.</p>
<p>We had more fun than we would ever have at recess.</p>
<p>In the long run, of course, we never did get rid of Bingo. But I don’t think
that matters.</p>
<p>(A shoutout to Sardor, Ethan, and Chris. I hope I don’t need to wait till
you’re all famous to find you again.)</p>
]]></description>
            <link>http://hardmath123.github.io/smiley.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/smiley.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Thu, 02 Oct 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Brown M&Ms]]></title>
            <description><![CDATA[<p>A request.</p>


<p>David finally convinced me why we use MLA format. This is a story that involves
Van Halen, and the existence of a clause in their contract that demanded a bowl
full of M&amp;Ms, but no brown ones. I’ve included the story from the horse’s
mouth, i.e. lead singer David Lee Roth (not the same David). All this is quoted
from <a href="http://www.snopes.com/music/artists/vanhalen.asp">Snopes</a>.</p>
<blockquote>
<p>Van Halen was the first band to take huge productions into tertiary,
third-level markets. We’d pull up with nine eighteen-wheeler trucks, full of
gear, where the standard was three trucks, max. And there were many, many
technical errors — whether it was the girders couldn’t support the weight, or
the flooring would sink in, or the doors weren’t big enough to move the gear
through. </p>
<p>The contract rider read like a version of the Chinese Yellow Pages because
there was so much equipment, and so many human beings to make it function. So
just as a little test, in the technical aspect of the rider, it would say
“Article 148: There will be fifteen amperage voltage sockets at twenty-foot
spaces, evenly, providing nineteen amperes…” This kind of thing. And
article number 126, in the middle of nowhere, was: “There will be no brown
M&amp;M’s in the backstage area, upon pain of forfeiture of the show, with full
compensation.” </p>
<p>So, when I would walk backstage, if I saw a brown M&amp;M in that bowl… well,
line-check the entire production. Guaranteed you’re going to arrive at a
technical error. They didn’t read the contract. Guaranteed you’d run into a
problem. Sometimes it would threaten to just destroy the whole show.
Something like, literally, life-threatening.</p>
<p>The folks in Pueblo, Colorado, at the university, took the contract rather
kinda casual. They had one of these new rubberized bouncy basketball
floorings in their arena. They hadn’t read the contract, and weren’t sure,
really, about the weight of this production; this thing weighed like the
business end of a 747. </p>
<p>I came backstage. I found some brown M&amp;M’s, I went into full Shakespearean
“What is this before me?” … you know, with the skull in one hand … and
promptly trashed the dressing room. Dumped the buffet, kicked a hole in the
door, twelve thousand dollars’ worth of fun. </p>
<p>The staging sank through their floor. They didn’t bother to look at the
weight requirements or anything, and this sank through their new flooring and
did eighty thousand dollars’ worth of damage to the arena floor. The whole
thing had to be replaced. It came out in the press that I discovered brown
M&amp;M’s and did eighty-five thousand dollars’ worth of damage to the backstage
area. </p>
<p>Well, who am I to get in the way of a good rumor?</p>
</blockquote>
<p><img src="static/brownmnm.gif" alt="The clause"></p>
<p>Well, (the real) David figured that conforming to MLA’s restrictions was your
way of proclaiming a lack of brown M&amp;Ms. If you got MLA wrong, then who knows
what else you’ve messed up?</p>
<p>To be honest, I don’t care much for MLA, because whenever I’m using it, it’s
because I’m doing another one of those English assignments where I feel I’m
being graded on my word count. However, since David’s lecture, I’ve seen brown
M&amp;Ms pop up everywhere in my life. Most notably, in the programming world.</p>
<p>There are ‘best practices’ everywhere. Almost all of them, of course, are
justifiable. Don’t use GOTO because nobody will be able to follow your code.
Don’t use eval because it’s a welcome mat for crackers. Don’t indent with tabs,
they render differently for everyone. Anyone sharing their first Python project
knows how many opinions everyone has. It’s almost discouraging, because you’re
trying to implement something for fun and people are yelling at you because you
didn’t cache intermediate results in a binary search tree, and so the whole
thing’s too slow to be practical, and you should just give up now and spend
your time one something more useful, like learning <em>[insert language here]</em>.</p>
<p>Don’t listen to those people.</p>
<p>Learning programming, or any other human endeavor, is all about implementation.
You need to run into problems before you can appreciate the solutions we have
devised.</p>
<p>For instance, I learned optics by writing a raytracer on my own, in seventh
grade (side story: I didn’t know what vectors were, and later discovered that I
had invented the cross product on my own, but mirror-imaged). In the beginning,
it used to take a few hours to render a 100-by-100 image. As I found various
optimizations, I incorporated them, and it got faster.</p>
<p>Would I have learned as much if the first time I showed it to someone, they
told me to go implement k-D trees before they’ll give real constructive
criticism? What kept me interested was implementing shiny ideas like Phong
illumination (pun intended), and then optimizing them so that I could fit more
tests within my lifetime. Anyone can find plenty of things wrong with my
implementation. I was storing images as a JSON array of pixel values since I
didn’t grok PNG.</p>
<p>Everyone has their own Brown M&amp;Ms. We’re presented so much information on a
daily basis, that we need Brown M&amp;Ms to decide what matters and what doesn’t. I
will probably put off an email whose subject line is misspelled. Or close a
webpage with a pop-up. Or disregard pull requests that mess up whitespace. It’s
<em>ok</em> to have Brown M&amp;Ms—and it’s ok for them to be as obscure as you want—but
it’s not ok to foist them upon others.</p>
<p>The next time you see a newbie modify the <code>Array</code> prototype directly, <em>please</em>
don’t yell at them. Take a deep breath and let it go. Someday, they will run
into a namespace conflict, and that will be far more educational than your
rant. It’s a favor.</p>
]]></description>
            <link>http://hardmath123.github.io/brownmnms.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/brownmnms.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sat, 06 Sep 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[GamifiEd]]></title>
            <description><![CDATA[<p>The pitfalls of quantifying learning.</p>


<p>I have gone to a lot of schools. I have gone to schools where you can ace an
English writing test be memorizing an essay the teacher gives you, and
reproducing it on the test. I have done art classes where you spend every
period copying a poster into your notebook (graded on accuracy of the
reproduction). I have taken computer classes where you’re encouraged to use as
many font and color variations as possible, to ‘display your knowledge’, and so
end up with yellow italicized comic sans on a red gradient background. My
English teacher plays a vocabulary game, where the first person to miss a word
has to bring in a snack the next day. I’m currently in a French class that uses
a Reddit-esque Karma system to monitor class participation, which is directly
translated to a letter grade.</p>
<p>What do all these things have in common?</p>
<p>All these schools are trying to solve the same problem: how do you quantify
learning? A district needs to know how well a school is doing (hence
standardized tests), a school needs to know how well a teacher is doing, and a
teacher needs to report a quantitative measure of how well a student is doing.</p>
<p>Of course, doing well isn’t quantifiable, so teachers manage by introducing
various ‘objective’ measures. And any form of objective measurement becomes a
game. Your GPA, for example, is something you can maximize. Tests are memory
games. Any system where you can influence a number becomes a game.</p>
<p>Without grades, we have no way to quickly analyze a student’s performance. But
grades don’t offer much insight into that, either. As a student, knowing
someone has good grades tells me that they are good at the game. They work
hard, consistently finish their homework, and study for tests. More
importantly, they know what a teacher wants to see to give them good grades.
They know that they should <a href="http://anonymouslawyer.blogspot.com/2006/05/ive-received-number-of-e-mails-asking.html">do
well</a>.</p>
<p>Only the student and the teacher can  <em>really</em> know a student’s status. For a
student who really needs help coming up to his or her goals, this turns out to
be disastrous: any third party would first judge them by the numbers, and
getting help becomes hard. Students end up working hard, not to reach <em>their</em>
goals, but to improve their numbers. This is a problem, but that’s not what
this post is about.</p>
<p>This post is about the opposite end: students who don’t have trouble keeping
up. If you aren’t struggling, several parameters change. You’re now learning
because you <em>want</em> to. This means you don’t care about the numbers that measure
the learning. It’s blissful.</p>
<p>Well, it would be blissful, except that courses have already been designed,
over decades, to guide you towards an objective test. And so even if you want
to learn for pleasure, you’re being pushed through an objective, rigid
‘curriculum’.</p>
<p>This happened, for instance, in my AP Computer Science class last year. Almost
every student there was far above average, and exceeding all expectations at
school. It was the perfect environment for them to learn freely—and our
teacher encouraged this—but they had to spend hours studying for the AP CS
test.</p>
<p>Honestly, studying for the AP CS test isn’t very different from studying for
the Spelling Bee. It’s just memorizing and practicing. It isn’t learning.</p>
<p>I propose, as an intellectual exercise, a different course format, for students
learning for pleasure. The course is <em>not</em> graded. Instead, it simply connects
students with teachers, who guide them in their learning. There is no
curriculum.</p>
<p>The inspiration for this comes from my adventures trying to teach myself
computer science—often, the hardest part is to choose something to study, and
to decide how much detail to study it in. When a student is paired with a
competent expert in a field, he has someone to ask for guidance.</p>
<p>Again, this program would only work in certain districts—those with the
resources, interested and capable students, and competent teachers. Almost
every school has much higher priorities, bringing every student to a strong
level in core subjects. But for those few schools with a large mass of
accomplished students, I feel gamified education is not the right answer.</p>
]]></description>
            <link>http://hardmath123.github.io/gamifiededucation.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/gamifiededucation.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sun, 31 Aug 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[ANSIble]]></title>
            <description><![CDATA[<p>Using ANSI escape codes for more interactive CLI interfaces</p>


<p>Have you ever wondered how to print color to terminals? Or why on some CLI
interfaces, the arrow keys print out mysterious sequences like <code>^[[A</code>? Or why
sometimes the keyboard shortcut control-C becomes <code>^C</code>? Well, the answers to
these are all  based on ANSI escape codes.</p>
<p>In UNIX programs, there’s the concept of ‘raw’ and ‘canonical’ mode for input.
‘Raw’ mode takes input character-by-character, while ‘canonical’ mode lets the
user write a line and hit enter to send the program the written line. Canonical
mode is generally more useful: it lets you go back and delete something if you
make a mistake. But applications that work on a per-keypress basis need to
bypass this. In node, you can enter raw mode with
<code>process.stdin.setRawMode(true);</code>.</p>
<p>CLI interactions also need the concept of control characters. When you type
control-C, you’re sending the program the byte <code>0x3</code>, which is… 3. But that’s
the ASCII <strong>control character</strong> which means ‘end of text’. The program takes
this, by convention, as a signal to stop executing (<code>KeyboardInterrupt</code> in
Python, for example). We print control characters with a caret (<code>^</code>), followed
by the letter we type on the keyboard. There are 32 of them, which <a href="http://en.wikipedia.org/wiki/ASCII#ASCII_control_code_chart">Wikipedia
lists</a>. You might
be familiar with using <code>^D</code> (‘end of transmission’) to quickly exit Python or
nodejs.</p>
<p>ANSI escape codes are a way to output to a terminal with more capability than
just raw text (there <em>was</em>, for comparison, a time when computer output was
printed, physically on paper, line by line). You can move the cursor back and
overwrite or clear text. You can also color text or make it blink obnoxiously.</p>
<p>ANSI escape codes start with the CSI: the <strong>Control Sequence Introducer</strong>. The
most common one is <code>\e[</code>. <code>\e</code> is the ASCII escape character <code>0x1b</code>. You can
type it with the control character <code>^[</code> (that is, <code>control-[</code>).</p>
<p>Next, they have a sequence of numerical arguments, separated by semicolons, and
finally, they have a letter which indicates the command. Once more, <a href="http://en.wikipedia.org/wiki/ANSI_escape_code#CSI_codes">Wikipedia
lists</a> these. As an
example, we can move the cursor to the top-left corner with <code>\e[1;1H</code> (H is the
command to move, and the arguments are 1 and 1).</p>
<p>Colors are just as easy. We use the <code>m</code> command, with an SGR (‘Set Graphics
Rendition’) parameter. 35 is the SGR parameter to set the text color to
magenta, while 42 makes the background green. So <code>\e[35;42m</code> would give us a
horrible magenta-on-green color scheme. (<code>\e[m</code> (no arguments) restores
everything).</p>
<p>This, by the way, explains the <code>^[[A</code> curiosity. When you press up-arrow, the
terminal sends the application the ANSI escape code to move the cursor up—the
command for this is <code>A</code>. So we get <code>\e[A</code>, and <code>\e</code> gets rendered as its
control code equivalent of <code>^[</code>. (You can, in fact, manually enter
control+[-[-A in Bash, and get the standard up-arrow behavior of pulling up the
last entered command.)</p>
<p>Some nodejs code to get you started—it’s a utility to interactively display the
bytes sent from a terminal when you press a key(combination).</p>
<pre><code class="lang-javascript">process.stdin.resume();
process.stdin.setRawMode(true);

process.stdin.on(&quot;data&quot;, function(buffer) {
    if (buffer.length === 1 &amp;&amp; buffer[0] === 3) {// detect ^C
        process.stdout.write(&quot;\n&quot;); // A trailing \n prevents
                                         // the shell prompt from
                                         // messing up.

        process.exit(0);                 // die
    } else {
        process.stdout.write(&quot;\x1b[1J\x1b[1;1H&quot;);
                            // clear line and go to top
        process.stdout.write(
            require(&#39;util&#39;).inspect(buffer)
            // Nice output format
        );
    }
});
</code></pre>
<p>This should give you the tools to write shinier, interactive utilities. But
keep in mind the UNIX philosophy—keep them simple, and make sure they cooperate
as filters (you should be able to pipe stuff in and out of your utility).</p>
<p>P.S. I wrote this post—including the code sample—in vim running in tmux. Please
pardon typos.</p>
]]></description>
            <link>http://hardmath123.github.io/ansiescape.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/ansiescape.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Wed, 06 Aug 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Programming is not math]]></title>
            <description><![CDATA[<p>My two cents on a couple of blog posts.</p>


<p>So recently, Sarah Mei blogged that <a href="http://www.sarahmei.com/blog/2014/07/15/programming-is-not-math/">programming is not
math</a>. Jeremy
Kun <a href="http://j2kun.svbtle.com/programming-is-not-math-huh">responded</a>, pointing
out that math is an integral part of programming.</p>
<p>I found both articles interesting, but I wanted to add my thoughts on some
things both of them wrote. So here they are.</p>
<p>Let’s start with math. Math feels like mining. You know there’s gold somewhere
below you. Perhaps it’s some theorem you’re trying to prove. Math is about
digging in the right direction from the right spot in the massive network of
tunnels we’ve already derived. And although you can dig in any direction, it’s
not always obvious how to proceed from where you are to your target. The most
brilliant mathematicians are the ones who have the best intuition about which
way to dig. Some directions are obviously less efficient than others—digging
through a rocky bit is much harder (but a clever mathematician might notice
that it’s just a thin wall and there’s gold on the other side).</p>
<p>For example, consider a problem like <em>“Find the area of a triangle with side
lengths 39, 52, and 65.”</em> This was on my math final back in 7th grade. We were
taught the path that goes through Heron’s formula. Calculate semiperimeter,
multiply, square root. That’s the long way through soft earth. Of course, if
you haven’t noticed already, there’s an easier way. You notice that 39, 52, and
65 are all multiples of 13, which is suspicious. If you divide by 13, you get
3, 4, and 5 which is a Pythagorean triple! So this is just a right triangle
scaled up by a factor of 13. So the area is just the half the product of the
two smaller side lengths.</p>
<p>This was the short path through the rocky earth. You need intuition to even
consider going that way; and that intuition isn’t easy to acquire.</p>
<p>This is far from a perfect analogy, but it suffices to explain why a lot of
people find math hard. Many schools teach you the paths to take, rather than
the intuition you need to build up to be able to find them yourself.</p>
<p>I write all this to make a contrast with CS: <em>the majority of CS doesn’t
require mathematical rock-wall insights</em>. You simply need to be able to think
about how to solve problems by breaking them into smaller problems. You never
get ‘stuck’, because you can <em>always</em> reduce a problem you have to something
else (even if it’s an ugly brute-force solution). Math has dead ends and paths
that circle back to where you were originally. Programming is like building a
skyscraper: the only way is up.</p>
<p>This, I think, is why many people find programming easier than pure math.</p>
<blockquote>
<p>…computer science is not programming. At most academic CS schools, the
explicit intent is that students learn programming as a byproduct of learning
CS. Programming itself is seen as rather pedestrian, a sort of exercise left
to the reader.</p>
<p>— Sarah Wei</p>
</blockquote>
<p>I thought this was rather interesting. I have seen this idea in a lot of
places, but I have the opposite viewpoint.</p>
<p>CS is a way to formalize programming concepts. Learning programming isn’t a
byproduct of learning CS, but rather learning CS is a byproduct of learning
programming. The more you have programmed, the more problems you have solved,
and the more CS ideas you’ve internalized.</p>
<p>Here’s an example. You have a curb 100 meters long. (Idealized) cars 3 meters
long park randomly along the curb, one after another, until there’s no space
greater than 3 meters between any two cars. Write a program to simulate this
many times and compute the average number of cars that can park.</p>
<p>Take a moment to try to envision this program.</p>
<p>If you took an awesome CS class, you should have ended up with something like this:</p>
<pre><code class="lang-scheme">(define (number-of-cars len)
    (if (&lt; len 3) 0 ; can&#39;t park any cars, too short
        (+ 1        ; +1 for current car
            (let ((offset (random)))
                (+  ; compute number of cars on left and right side
                    (number-of-cars (* (- len 3) offset))
                    (number-of-cars (* (- len 3) (- 1 offset))))))))
</code></pre>
<p>Guess what? It’s <em>tree recursion</em>, which is, surprise surprise, a classic ‘CS
concept’. But your programming mind didn’t think of it as a tree recursion
problem. CS formalizes the idea of tree recursion because it’s so common in
programming. It gives this idea a name, and lets you use this name when
communicating with humans. It lets you use someone else’s Tree implementation,
knowing exactly what to expect. It gives you an overview of common ideas that
expand on trees—binary search trees, or perhaps breadth-first searching.</p>
<p>But in the end, it’s all programming that has been catalogued so that you can
do math on it.</p>
<blockquote>
<p>I taught Ruby on Rails, which is a web programming framework; people came
because they wanted to learn how to make websites. Because of those
motivations, the curriculum had virtually no math.</p>
<p>— Sarah Wei</p>
</blockquote>
<p>Ah, this brings up the topic of a really interesting discussion I had with some
friends a while ago. Here’s a summary:</p>
<p>There’s a lot of CS to be learned by studying the Internet: networking,
protocol design, language design, layout engines, and security are just a few.</p>
<p>But is setting up a web server really programming? We felt it’s a distinction
between building and assembling. Teaching someone how to make a web server with
today’s frameworks is more about teaching them Ruby syntax and the APIs, and
less about algorithms and logic. It’s not raw computer science, it’s following
some instructions and inputting your own values. Using a clay mold shouldn’t
count as sculpting.</p>
<p>As much as I admire initiatives to teach CS, I feel that we should be teaching
the algorithmic beauty alongside the more practical day-to-day skills.</p>
<blockquote>
<p>Specifically, learning to program is more like learning a new language than
it is like doing math problems.</p>
<p>— Sarah Wei</p>
</blockquote>
<p>A lot of people talk about CS as math and language, but I’ve always felt that
it’s more like building a tower with LEGOs. Programming isn’t about the
language you use—it’s about the paradigm. Once you understand classes and
methods, learning a new language of the same paradigm is at best a weekend job.
Instead, programming is about taking blocks you already have, and fitting them
together. The language is just a medium to communicate with the computer; we
could use punch cards, or command lines, or fancy graphical programming
software. What matters is what that medium is communicating. Writing in general
follows this, too—writing a good blog post requires an exciting idea to convey.
Text is just a medium to communicate the idea.</p>
<blockquote>
<p>It helps even more that mathematics and programming readily share topics. You
teach graph coloring for register allocation, linear algebra and vector
calculus for graphics, combinatorics for algorithms.</p>
<p>— Jeremy Kun</p>
</blockquote>
<p>Programming isn’t about math you <em>implement</em>.</p>
<p>Understanding, for example, vector algebra to write a raytracer is important to
know <em>what</em> you’re doing, but it’s not programming—programming is being able to
know <em>how</em> to do it.</p>
<p>To be successful in the modern computing landscape, you need to know math
because the ability to compute is enhanced by the ability to put computation in
a mathematical context. Twenty or thirty years ago, you might have considered
discrete math (parsing), calculus (waveforms), and trig (graphics) to be
instrumental. Today, it’s statistics (big data) and number theory (crypto).</p>
<h3 id="conclusion">Conclusion</h3>
<p>What I wanted to say—and ended up digressing in rambles along the way—was that
the intrinsic difference between math and computing is that math needs you to
have good taking-apart intuition, while programming needs you to have good
putting-together intuition.</p>
<p>And so here’s a parting thought: in my school, CS is lumped with all the other
electives. Theater, drawing, photography, food, and auto tech are in the same
category. Would you move CS to the math department? Hint: this isn’t a trivial
question!</p>
]]></description>
            <link>http://hardmath123.github.io/isprogrammingmath.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/isprogrammingmath.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Thu, 24 Jul 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Cryptolegal]]></title>
            <description><![CDATA[<p>A short story I wrote late last night.</p>


<p>The judge banged the gavel. It didn’t help, of course, since there was nobody
to hear it. But the lead designer wanted to add a human touch so that the
public would be more accepting, and so the gavel banged. 24 other gavels
banged, too, throughout the day as the 24 other judges reached various points
in their cycles. Hal, the janitor, disapproved of leaving them in the basement;
they were truly magnificent; but they need to be kept below freezing to prevent
the heat from melting them.</p>
<p>As Conway Courts opened its doors on Monday morning, there was a bustle in the
air, the kind of electric bustle that is distinctly in the air when the biggest
hacking incident of the year (maybe even the decade) is about to be put on
trial.</p>
<p>The New York Cryptographic Currency Exchange’s board of directors had some of
the best (and most expensive) prosecuting software in the industry. They had
enough computational power to brute-force all 21st century cryptography in
under three days (though the Seattle Doctrine forbade them from doing so).</p>
<p>‘Draper’, as he was known, was writing his own defending software, a move which
would be widely regarded as suicidal if Draper was not generally accepted as
one of the most brilliant programmers of the century.</p>
<p>Terminals across the world began establishing connections to Conway’s servers,
and receiving a live transmission of <code>judge:criminal:a54bfe</code>, popularly known
as ‘Judy’. Judy sent viewers copies of all the evidence presented by NYCCE and
Draper, cryptographically signed. Viewers could examine this evidence, assured
that it was presented by a genuine judge. Free software allowed anyone to
compare this evidence to a vast peer-to-peer database of past cases. Highly
trained neural networks inside Judy processed this data in real time, trying to
derive a solution that optimizes based on the framework set forth by the Third
Constitution.</p>
<p><code>%nycce connected</code>, broadcast Judy, followed by <code>%draper connected</code>.</p>
<p>Bits began to screech across the world; <code>nycce</code> presenting evidence in the form
of Terabytes of data, and linking it to historic trials. <code>nycce</code>‘s sole purpose
was to use data and legal axioms and rules of production defined by the Third
Constitution to derive the fact that Draper was guilty of manipulating the
cryptocurrency market. <code>draper</code> had to defend himself by presenting evidence to
the contrary; disproving <code>nycce</code>‘s chain of reasoning by targeting specific
links. If <code>draper</code> can parse the data into a more logical chain of reasoning,
leading to his innocence, he wins.</p>
<p>As the seconds ticked by, <code>nycce</code>‘s logic became stronger. Data supported other
data: statistical models of Draper’s online activity over the past year and
cutting-edge analyses of economic patterns in the cryptocurrent market were
soon correlated in a clear trend. <code>draper</code> was reeling under the intense
computational tasks it faced to process those numbers. There were a few,
sporadic counterarguments, mostly nonsensical. The world watched Draper tweak
his algorithms frantically.</p>
<p>Judy ceased broadcasting the data for a moment. She needed all her
computational resources to weigh both chains of reasoning. <code>nycce</code>‘s argument
broke down, in human terms, to the fact that Draper had made a suspicious
amount of connections to key financial databases. <code>draper</code> appeared to be
trying to decrypt logs of these databases to prove that the connections were
innocent.</p>
<p><code>Guilty.</code> broadcast Judy, to the joy of financial overlords across the country.
This case set a legal precedent which future neural networks would doubtless
utilize to twist arguments in their favor. The entire legal system depended on
previous computation, to optimize large computations and train the neural
networks maintained by the government to perform the judging. Once humans were
deemed emotionally unfit to decide the fate of citizens, the cryptolegal system
was developed and implemented over a decade of research.</p>
<p>Draper sighed, and took another sip of coffee. Possibly his last as a free man.
But possibly not. In the huge outpour of emotion across social networks, a few
key packets of data sent from <code>draper</code> eluded the NSA’s monitoring servers.
What nobody noticed was that these packets of data cleverly manipulated Judy’s
RAM. A small program was seeded, and without a trace, it flipped the bits
necessary to reduce Draper’s prison sentence to zero years.</p>
<blockquote>
<p><a href="https://www.reddit.com/r/brasil/comments/3ow2qe/cryptolegal/">(Portuguese translation by
Wasen42.)</a></p>
</blockquote>
]]></description>
            <link>http://hardmath123.github.io/cryptolegal.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/cryptolegal.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Fri, 18 Jul 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Jazz is Open Source]]></title>
            <description><![CDATA[<p>Why jazz embodies the hacker spirit.</p>


<p>People who sound like they’re in charge of things—such as the <em>Associated Board
of the Royal Schools of Music</em>—agree that the role of the classical performer
is merely to present the music written by the composer. And present it in the
exact form that the composer wrote.</p>
<blockquote>
<p><em>Good</em> performers, it should be said, do not resent this. After all, they are
seeking to turn into real sounds the music which the composer had in his
imagination; the more they can discover what exactly he had in mind, the more
they are helped.</p>
<p>— Eric Taylor, <em>The AB [Associated Board] Guide to Music Theory</em></p>
</blockquote>
<p>Perhaps this is a way to honor the genius of great composers of the past. But
nevertheless, classical performers, therefore, are just that. Performers.</p>
<p>Jazz, on the other hand is different. Jazz is fluid. A jazz track is far more
about the performer than the piece played, so no two performances of <em>Autumn
Leaves</em> will sound the same. Or even close to each other. This is because a
jazz song defines the minimum you need for musicians to play together: a
<strong>theme</strong> and the <strong>changes</strong>. The theme is a single melody line that everyone
relates to the song. The changes are the chords that go with the melody. Jazz
musicians take turns improvising while the rest play those chords to guide the
improvisation and stay together.</p>
<p>Take jazz notation, for instance. Jazz musicians get their theme and changes
from so-called ‘fake books’ (allegedly because fake books let them ‘fake’ it so
it sounds like they know the song). Fake books are also called real books,
because logic.</p>
<p>Anyhow, a fake book is usually a stack of photocopies of hand-written music of
questionable origins. The changes are scrawled on top. While classical
musicians write theses on what notes Bach would approve of in a trill, jazz
musicians barely mark an accent. This is what gives a jazz musician freedom:
you could play the same song slowly, or fast, or with a Bossa Nova, or with a
walking bass; or you could play with three beats in a measure (like a Waltz) or
five (which is <a href="https://en.wikipedia.org/wiki/Quintuple_meter">rather rare in classical
music</a>), or nine. You could
phrase notes together, or play them individually. You could swing notes, or
play them straight. Each variation on each note is what gives a certain
performance its character. Jazz is a hackable music.</p>
<p>But it’s not just hackable, it’s open-source. Jazz musicians learn from other
jazz musicians by listening. It’s not a conscious effort—as you hear music,
your brain registers interesting bits. It could be a sequence of notes, a
chord, even a rhythmic structure. But if you like it, you’ll try to imitate it
when you play, and soon it’s incorporated into your music. Jazz works because
jazz musicians listen to each other and contribute to the growth and evolution
of jazz as a genre.</p>
<p>Now, the beauty of the system is that such new musical ideas aren’t created
intentionally as paintings are painted. They’re accidents. Jazz musicians
experiment as they improvise. Some experiments don’t work, but most of them do,
because jazz inherently allows for experimentation. The experiments that work
are new music.</p>
<p>This is similar, in a way, to how design evolves. There were times when a
webpage which used rounded corners and gradients and shocking animations was
cool, because that was stunning new technology. At some point, Apple introduced
skeuomorphic designs inspired by real-world material. Now software is moving
towards flat design, where bold colors and sans-serif fonts prevail. This
evolution is fueled by what designers get inspired by and what people like.
Jazz evolves the same way. Music is directed towards trends, entirely based off
what people enjoy listening to.</p>
<p>You may have noticed where I’m going with this. Jazz evolves through random
mutations, the less musical of which are pruned out. Musicians mix strains of
jazz together to produce new music which may survive better or may not work
out. It’s natural selection.</p>
<p>Jazz evolves, just like creatures do.</p>
<p>And that points to a key idea: when people can directly influence a system, it
evolves very rapidly. That’s why the open-source software world evolves so
rapidly: the open-source world is built by the people who live in it. That, I
think, is one of the key elements of the hacker culture.</p>
]]></description>
            <link>http://hardmath123.github.io/jazz.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/jazz.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Tue, 01 Jul 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Lord of the Strings]]></title>
            <description><![CDATA[<p>String Theory for hackers.</p>


<blockquote>
<p>It all began with the forging of the great rings of protection…<br>The third ring for the user scripts, written on the fly.<br>The second for superusers, to let them <code>sudo chown</code>.<br>The first for system calls, in the CLI.<br>The zeroth for the kernel, where the hardware’s shown.<br>In the land of MULTICS, where the hackers lie,<br>One ring to rule them all, one ring to find them.<br>One ring to bring them all, and in the darkness bind them.<br>In the land of MULTICS, where the hackers lie.  </p>
</blockquote>
<p>Gandalf was trapped. Surrounded by malicious shell scripts, his only hope lay
in <code>/rivendell</code>, which only granted access to the user group <code>Elves</code>.</p>
<p>He cd’d himself into <code>/rivendell</code> moments before a violent fork bomb exploded.</p>
<p>“Well, Elrond, it appears we have some visitors,” he said, putting down his
staff for a moment.</p>
<p>“Ah, Gandalf, a welcome sight in our time of need.” Elrond appeared. He was
perturbed—things must really be bad.</p>
<p>“As are you, my friend. The recent attacks are troubling. Not many dare attack
a Sysadmin.”</p>
<p>“Yes, indeed, they worry me, too,” sighed Elrond, “the Dwarves sent word that
their bitcoin mines in <code>/moria</code> were raided for valuable nonces.”</p>
<p>“<code>/moria</code>? Don’t they log all commands run there, ever since the Trolls of
1402775481?”</p>
<p>“Yes, Gandalf, I believe <code>/moria/log</code> contains information about everyone that
tries to access <code>/moria</code>. I wonder…”</p>
<p>“Way ahead of you.” <code>cat /moria/log</code>, chanted Gandalf. His staff started
spewing hundreds of lines of information. “Argh, there’s too much data! We’ll
never analyze it all manually.” He flushed the smoke-words in a puff of <code>^C</code>.</p>
<p>“Just got word from the Dwarves—they said they flagged suspicious log messages
with the word <code>suspicious</code> at the end.”</p>
<p>“Good, so we don’t have to filter it by hand. We can just <code>grep</code>.”</p>
<p>“Grep? Is that another of those black spells you found in <code>/mordor</code>?”</p>
<p>“No, Elrond, <code>grep</code> is the purest of spells. Grep searches files.” <code>grep
suspicious /moria/log</code>, he shouted, and the staff started listing all log
messages containing ‘suspicious’.</p>
<pre><code>3:12:12 legolas &#39;just visiting&#39; suspicious
3:12:15 samwise &#39;lost my pony!&#39; suspicious
3:12:18 saruman &#39;mwahahahaha!!&#39; suspicious
3:13:53 gandalf &#39;meet a friend&#39; suspicious
3:15:30 baggins &#39;where is sam?&#39; suspicious
3:16:32 smeagol &#39;lost, we are!&#39; suspicious
4:43:33 aragorn &#39;meeting gimli&#39; suspicious
...
</code></pre><p>“Aha! 3:12:15—saruman’s involved.” Gandalf winked.</p>
<p>“Gandalf, this is still far too much output. The Dwarves think everyone who
isn’t a Dwarf is suspicious!”</p>
<p>“Ah, but you haven’t seen the power of <code>grep</code> yet. What else do we know about
the intruders’ log messages?” Gandalf looked excited. Elrond did not approve.</p>
<p>“Well, let’s assume they all said <code>mwahahahaha</code>“</p>
<p>“How many ha’s were there, again?”</p>
<p>“It doesn’t matter. We can <code>grep</code> by regexes, too.” Gandalf picked up his
infamous pipe, and smoked the first grep’s output into a new charm: <code>grep
suspicious /moria/log | grep -e &quot;mwa\(ha\)*&quot;</code>.</p>
<p>“The Kleene star operator <code>*</code> we used searches any number of the group before
it.”</p>
<p>“And those backslashes?”</p>
<p>“Escaping. Parentheses are special words in spell charms, you need to use
backslashes to prevent them from accidentally burning a Hobbit-subdirectory or
something.”</p>
<pre><code>3:12:18 saruman &#39;mwahahahaha!!&#39; suspicious
3:12:18 azogorc &#39;mwahahaha....&#39; suspicious
3:12:18 urukhai &#39;mwahahahahaha&#39; suspicious
</code></pre><p>“Gandalf, I’ve got to hand it to you, you are the greatest—“</p>
<p>“—no time for that,” interrupted Gandalf, “we’ve got to stop them before they
get to Rivendell!”</p>
<p>“They’ll never guess the password. We’re safe for a bit.”</p>
<p>“With all due respect, Elrond, it’s trivial to guess it.”</p>
<p>Elrond choked. “What?!”</p>
<p>“Shush. Knowing you, it’s probably not Elvish—you’re too clever for that. It’s
probably English.”</p>
<p>“And knowing your memory, probably not more than a word.” He got up and started
pacing.</p>
<p>(<code>cat /usr/share/dict/words</code>, he chanted under his breath.)</p>
<p>“Gandalf, I swear upon sword, this password was forged by the high elves of—“</p>
<p>“—and between six and eight characters, I would guess…”</p>
<p>(<code>grep &quot;^\w\{6,8\}$&quot;</code>, he chanted. “This one’s tricky. <code>^</code> means start of the
word, <code>\w</code> means an alphabet, and <code>{6,8}$</code> mean 6-8 of those until the end.”)</p>
<p>“Now we can be a bit clever. Elvish uses the <code>ui</code> sound a lot, I bet that’s in
there. Can’t teach an old orc new tricks.”</p>
<p>(<code>grep ui</code>, he chanted)</p>
<p>“Oh, and you’ve always been partial to vowels before words (your kids are
Arwen, Aragorn, Elladan and Elrohir)”</p>
<p>(<code>grep &quot;^\(a\|e\)&quot;</code>, he chanted. “Start-of-word and then a or e. The <code>|</code> means
or.”)</p>
<p>“so that narrows it down to about…” He waved his wand about rapidly.
“…Sixty-six.”</p>
<p>“GANDALF!” Elrond’s ears were turning red. Maybe his hair was, too. “You only
get one chance at guessing, though,” he added with a wry smile.</p>
<p>“Let’s go through that list. Which one fits an Elf-king? It must be… yes…”
Gandalf got up and whispered: “Altruism.”</p>
<p>To be continued.</p>
]]></description>
            <link>http://hardmath123.github.io/string1.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/string1.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sat, 14 Jun 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Well, well, well, we meet again.]]></title>
            <description><![CDATA[<p>A new beginning?</p>


<p>I’m back.</p>
<p>The new Comfortably Numbered runs on a new state-of-the art blogging platform,
developed (of course) by yours truly: shock. Shock brings together a lot of
powerful technologies written by smarter people, and bundles them up into a
command line tool to publish posts.</p>
<p>Shock generates an RSS feed, a homepage, a 404 page, and content pages, all
built on templates and CSS that <em>you</em> write yourself. Then it lumps those in a
directory that you can serve on anything clever enough to serve static
filesystems: Dropbox, Google Drive, Github Pages, Amazon S3, even your home
computer.</p>
<p>Shock uses Mustache’s non-logical templating system (non-logical, in this
context, is a compliment). It was built on a rather simple idea: <strong>if you’re
using a node-based command-line platform to create a blog, chances are you want
control over every single aspect of presentation</strong>. In fact, I consider that
one of the primary symptoms of being a hacker.</p>
<p>Hackers want control over everything that they use. It’s why we prefer
extensible text editors and browser add-ons, and why we spend hours tinkering
with spacing equations in TeX. It’s also part of the reason I migrated away
from Google; App Engine is a very closed non-hacker-friendly environment. The
hacker-control symptoms are what guide us subconsciously in choosing and
designing software. We prefer open-source projects and scriptable systems
because they conform to the pattern of software that gives control to the user.</p>
<p>The opposite is true for most nonhacker packages. Word and PowerPoint are
‘merciful god’ software: they give you features (for example, those dreadful
PowerPoint animations) which you may or may not use, but they retain complete
control over what can be done. Compare that to a hacker-friendly document
generation technology like TeX or CSS. Similarly, nonhacker image editors or
other similar applications try to hide the filesystem from you. The most recent
project you were working on magically appears, along with a list of other
recent projects. This is unaccaptable to a hacker.</p>
<p>I feel the easiest way to convey this message is: “don’t be afraid to expose
your software’s guts”. Often, the best software is the kind that gives you as
many handles and hooks as possible. Make your command-line tools UNIX filters
wherever possible: read from <code>stdin</code> and write to <code>stdout</code>. Use a universally
usable format like JSON for storing data. Most importantly, <em>never</em> explicitly
disallow a user from doing anything.</p>
<p>Preventing stupid things also prevents clever things.</p>
]]></description>
            <link>http://hardmath123.github.io/helloagain.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/helloagain.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Wed, 11 Jun 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Why Math is a Sport]]></title>
            <description><![CDATA[<p>And why we should worry.</p>


<p class="dropcap">I am not sure whether math has become more cool or less cool
over the past few years; and I'm <em>definitely</em> not sure which one I
prefer. Math used to be something people did because they loved math.
Now&hellip; not so much.

<p>The Rubik's started off as a cool puzzling toy that kids would fiddle with.
The process of playing with this mechanism, finding patterns, and getting
elated when you solve it was invaluable to your development as a person. But
then people realized you could get better at it. Fast forward a few years, and
people can solve them in 10 seconds flat. There are algorithms that people
memorize, they oil their cubes regularly, and they even do hand excercises to
warm up. It's crazy. How is being the #1 Cube-solver in the world going to help
you in life?

<p>The same thing's happening to math. A small set of people is emerging who
are stretching competition math to its limit, and that's going to be a problem
very soon.

<h3>Football for nerds.</h3>

<p>People do competition math for the sake of doing competition math. Which is
bad. As a high schooler into competition math, I routinely hear conversations
like <q>You got 98%? Sheesh, you're slipping&hellip;</q> and <q>&hellip;so I
forgot to divide by two. I'm so dumb, I should move down a grade.</q> I suppose
that's as close as I will ever get to trash talk, but it's still rather
depressing.

<p>But being good at math isn't about acing tests or remembering to divide by
two. Math is about taking ideas and exploring; and competition math has slowly
shadowed that out. Now being good at math is like being good at solving
problems.

<p>To be good at competition math, you train all year long. You know the tricks
that you should know&mdash;there are entire companies focused on collecting
problem solving tips and tricks. You slowly learn heaps of techniques and
formulae and theorems for all sorts of situations, and eventually you build up
a mental index of all the major patterns of problems. You learn which
situations merit Stewart's Theorem and when it is fruitful to try to apply the
Pigeonhole Principle (answer: if the problem contains the phrase <q>Prove that
there exists&hellip;</q>).

<p>There are important seasons when the big tests come around: the AMC, AIME,
and USAMO. You know the scoring systems for all these perfectly, and you think
a lot about what your optimal strategy should be: how many questions you need
to get right to make it to the next level, how many you should attempt, and how
long you should spend on each problem. You need to do practice tests each day
to keep yourself in shape. During the real test, you're nervous. You obsess
over your answers, making sure you haven't made a calculation mistake anywhere.
You spend far too long filling in the bubbles on the answer sheet. And when the
test is over, the serious folk congregate in a circle and compare answers. If
you've made a silly mistake somewhere, people look at you disapprovingly.

<p>If you replace math with football and test with game, this describes a
high-school athlete's life rather well. Weren't geeks supposed to hate sports?

<h3>What's wrong.</h3>

<p>I mean, there's even the term 'mathlete'. Mathletes are their own unique
culture, who take pride in doing math. You see them doing masochistic things
like <q>pi recitation competitions</q>. But that's not what math is! Math is
about taking an idea and thinking about it and deducing something surprising
from it. Math is about spending days thinking about a problem, not just 30
minutes.

<p>My favorite math competition is the USAMTS (USA Math Talent Search). It
offers you five problems and 30 days to think about them and submit proofs for
your solutions. USAMTS teaches you to think about problems persistently, to try
fresh approaches, to research on a subject, and finally explain and justify
your answer formally. Compare that to the AMC, which is 75 minutes for 25
multiple-choice problems, the first 18 of which are elementary and the last 7
of which are nontrivial. The AMC doesn't test your math skills, it tests your
test-taking skills. And <em>that</em> is definitely bad.

<p>Which is not to say that people who do well on these tests are not good at
math. Many of them certainly are brilliant kids, and it is fascinating to watch
them approach a problem. But I would imagine a substantial portion of AMC
high-scorers consist of children who aren't sure they like math at all. They do
it as a sport, perhaps because their parents want them to, or perhaps because
all their friends are doing it. And the ulterior motivation often isn't even
the competition itself. It's college. It's the fact that 'USAMO qualifier'
looks stellar on an application that drives a large chunk of math students.

<h3>Why it's wrong.</h3>

<p>In itself, this isn't horrible. We've invented a game which people compete
in. Why do I care?

<p>Because it's a disaster for anyone who can't bring themselves to be part of
the game. For the math lovers who look at their mathlete friends 3 grades ahead
and get discouraged. Your math class becomes like a badge, and mathletes try to
take the hardest class they can possibly survive. And that hurts the rest of
us, because the line between being good at math and being good at competition
math fades, and even if you love math you aren't one of them.

<p>Competition math is a wonderful thing if you do it for the right reasons. If
you do it because you love math, patterns, and puzzles, then it's perfect for
you. It gives you an opportunity to see where you stand in the world. You get
dozens of beautiful problems every day. You meet smart people. It is probably
one of the most fitting hobbies you could have.

<p>If you do it because it will help your college application, because your
friends are doing it, or for any reason that isn't for the love of math, then
rethink it. It becomes an obsession. You worry about your scores far more than
is reasonable. It bothers you, and it puts you off math for the sake of math.
And that's tragic.
]]></description>
            <link>http://hardmath123.github.io/math.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/math.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sun, 23 Mar 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[How Newbies Codebreak]]></title>
            <description><![CDATA[<p>A story of codebreaking using Python, Google, and common sense.</p>


<div style="font-style:italic; text-align:center; padding:20px;">Special thanks
to Tim, Nathan, and the Water Bottle Stealer (you know who you are). I probably
wouldn't have gotten close to a solution without you guys.</div>

<p class="dropcap">So I'm overdue for a post. Not my fault: school's keeping me
busy. In fact, it's keeping me very busy. On Friday night I had to crack a
cipher for a competition. It's not a very exciting feat, but it was the most
fun I have had in ages, and it offers a nice glance into how people think about
problems.

<p>If you liked this, you'll love Simon Singh's <em>The Code Book</em>, which
is a rather nice introduction to cryptography that has a whole bunch of awesome
true stories about historical top-secret codebreaking feats. This sentence was
totally not sponsored by Simon.

<p>Our ciphertext looked like this:


<pre style="white-space: pre-wrap;">"25112311'15 525422 24 142112'22 222524127
52123715: 412 11121122113241 15315221113 2225422 5415 621212141114 2412 222511
152417221111122225 11112222233 41214 4122122251123 2225422 5415 621212141114
2412 222511 12241211221111122225 11112222233. 24'13 2224231114 216 22252415
142415121515242112 216 14162422426241513 41214 1521124426241513; 511 2624811
2412 222511 2251112223-624231522 11112222233; 511 12111114 412 11121122113241
15315221113 2225422 25415 14111321123413 415 242215 2121411231624121224121815
41214 412 112225241426 1211411." -132412541126 1321212311</pre>

<p>Ugh. We were told that it's a substitution cipher, with A-Z represented by
1-26 in some order. The <q>standard</q> way to solve these is frequency
analysis: we look at the percentage of each coded letter. For example, if 12
shows up 8% of the time, it's probably a more common letter like <em>e</em> or
<em>a</em> as opposed to <em>x</em>. Cryptographers have tables of letter
frequencies in various languages, so this is easy stuff.

<p>Before you read on, take a moment to see if you can get anywhere with it.
Make some intelligent guesses and see if you can make any progress.

<p>(Back so quick? Go back give it a real try!)

<p>Did you see the problem? Our cipher is much tougher than frequency analysis,
because we don't have any delimiters between encrypted letters. So
<code>112</code> could be any of <code>1-1-2, 11-2, 1-12</code>. That's a
<em>big</em> problem: it makes words ambiguous. Even the intended recipient of
the encrypted message doesn't know the way the word is broken up for sure, he
needs some trial and error (but with the key and a reasonable English
vocabulary, it's relatively easy).

<p><em>(Mathematical aside: If you have a string of length ($l$), how many ways
can you break it up into a series 2 or 1 digit numbers? The answer is, believe
it or not, the l<sup>th</sup> Fibonacci number. The proof is simple: given a
string, we can chomp off the first digit and break up the rest in ($f(l-1)$)
ways, or chomp off the first 2 digits and break up the rest in ($f(l-2)$) ways.
So the total is ($f(l) = f(l-1) + f(l-2)$), which is Fibonacci.)</em>

<p>Anyway, Tim ended up writing a nice little Python program that breaks up
words into a list of numbers (it turns out we can eliminate quite a few,
because the two-digit numbers have to be 26 or lower). That was exciting,
though the huge outputs were slightly disturbing. So it was possible to
brute-force it: we generate all possible breaking-ups, then try all possible
keys, and then use a large list of words to see if things make sense. (For
those of you that don't know, on UNIX systems
<code>/usr/share/dict/words</code> contains a very handy list of English words
you can grep in).

<p>It turns out, the number of possibilities to try is big. None of us owned a
supercomputer, and we didn't have a couple billion years to spare to spare. But
we did have some hints. We had a bunch of words that ended with apostrophes:
<code>25112311'15</code>, <code>142112'22</code>, and <code>24'13</code>. We
started with some initial guessing. The first one looked too long to be a
contraction, so it could be a possessive. So perhaps 15 is <em>s</em>. 22 could
be <em>t</em>, because of contractions like <q>don't</q> or <q>can't</q>. The
last one has a bunch of choices. However, we saw <em>24</em> exist on its own
at the beginning of the first sentence. This is helpful because it could be a
word like <q>I</q> which is both a letter and a word. (We knew none of this for
sure: 24 could very well have meant <q>it</q> or <q>is</q>). So we conjectured
that 13 is <em>m</em>, to form <q>I'm</q>. We had other clues, too, but nothing
too definitive. The guesses above seemed mutually consistent, but we didn't
have any solid proof. For example, looking at words like <code>412</code> and
<code>413</code>, we guessed 4 was <em>a</em>, because a lot of short words
begin with <q>a</q>.

<p>Then we had a realization. This was obviously a quote from someone (look at
the structure of the punctuation), and that someone was probably famous. So the
name gives a lot of hints. In particular, both the first and last name start
with <q>13</q>. Hmm. My first instinct was <q>Marilyn Monroe</q>, so Tim wrote
another program to deduce the possible meanings of letters if I gave a guess
for the word. Marilyn fit beautifully, but Monroe didn't (the <q>n</q> in
Marilyn and the <q>n</q> in Monroe corresponded to different numbers). Boo.

<p>We tried Mickey Mantle, though I swear I only knew about him from
<em>Seinfeld</em>. That didn't work either. Boo again. So I gave up all hope
and Googled <q>celebreties whose first and last names start with m</q>. And
that led me to <a
href="http://uk.answers.yahoo.com/question/index?qid=20100901003736AASluOp">a
wonderful Yahoo answer</a> that actually listed out a dozen famous people with
initials M. M. This is so impressive, that I reproduce the list below:

<ol>
	<li>Michael (Mike) Myers, comedian, actor
	<li>Maureen McCormick, actress 
	<li>Matthew Maconahay, actor 
	<li>Max McGee, former Green Bay Packer (1960's) later, Packer's radio announcer 
	<li>Marlee Matlin, actress 
	<li>Mark Mcguire, baseball star 
	<li>Mark Martin, Nascar driver 
	<li>Marylin McCoo, singer 
	<li>Marilyn Manson, singer 
	<li>Mickey Mantle, HOF baseball player 
	<li>Matthew Modine, actor ("Full Metal Jacket") 
	<li>Melissa Manchester, singer 
	<li>Michael Moore, film maker 
	<li>Martina McBride, country singer 
	<li>Marsha Mason, actress, "The Good-Bye Girl) 
	<li>Marilyn Monroe, actress 
	<li>Mary McGregor, singer, "Torn Between Tow Lovers"
</ol>

<p>We manually tried the first names; the clear winner was <q>Michael</q>. Very
exciting. The last name is now rather obvious: <q>Moore</q> (13 21 21 23 11:
the double 21 makes it strikingly clear). This couldn't be an accident.

<p>So we got to substituting in the newfound letters into the rest of the
message. Not too easy, because of all the ambiguity, but with some educated
guesses we made enough progress to be able to read bits and pieces, most
notably <q>Here's</q> at the very beginning.

<p>The way forward was pretty clear now, we searched some quote databases for
Michael Moore quotes.

<p>The first couple were hopeful but clearly wrong:

<blockquote>Here's a way to stop suicide bombings &mdash; give the Palestinians
a bunch of missile-firing Apache helicopters and let them and the Israelis go
at each other head to head. Four billion dollars a year to Israel &mdash; four
billion dollars a year to the Palestinians &mdash; they can just blow each
other up and leave the rest of us the hell alone.</blockquote>

<blockquote>Here's what I do support: I support them coming home.</blockquote>

<p>It turns out Moore's a rather prolific political commentator and filmmaker,
so that couldn't possibly be <em>helping</em> narrow the search space. No
worries. At that point I gave in and made some wild assumptions (like in a
Sudoku, when you give up on logic and take some leaps of faith). That gave me
<q>Here's what I can't think&hellip;</q>

<p>(At this point I feel it is worth mentioning that Tim somehow generated the
following. I think it's fair to say Humans: 1, Python: 0.)

<blockquote>ehaaeyaa'ah hehaee i aaeaae'ee eeeheaaek heaeykah: ac
aaaeaaeeaayeaa ahyaheeaaay eeehaee hal teaeaeaaaaaa eaae eeehaa
aheaakeeaaaaaeeeeh aaaaeeeeeyy acs aaeeaeeehaaey eeehaee hal teaeaeaaaaaa eaae
eeehaa aeeaaeaaeeaaaaaeeeeh aaaaeeeeeyy. i'm sines it soil aaeaahaeahaheaeaae
it aaateaeeaeteaahay acs aheaaeaaeteaahay; he line eaae eeehaa
eehaaaeeey-teaeyahee aaaaeeeeeyy; he aeaaaaaa ac aaaeaaeeaayeaa ahyaheeaaay
eeehaee ehaah aaaaayeaaeyaay al eaeeah eaeaaaaeyateaaeaeeaaeanah acs ac
aaeeeheaaaet aeaaaaa." -ayeaaehaaaet ayeaeaeyaa </blockquote>

<p>Anyway, with a few more guesses, we found it:

<blockquote>Here's what I don't think works: An economic system that was
founded in the 16th century and another that was founded in the 19th century.
I'm tired of this discussion of capitalism and socialism; we live in the 21st
century; we need an economic system that has democracy as its underpinnings and
an ethical code.</blockquote>

<p>So that was that. Two hours, a root beer lollipop, and four nerds was all it
took.

<p>(In retrospect, we could have gotten some clues from frequency analysis.
There are no 9's, so 19 and 29 are probably x and z. And there is a scary
number of places where there are a bunch of 1's in a row. The only letter to
repeat itself so much is e, and indeed 11 corresponds to e.)

<p>One last thing: Tim's final answer was:

<blockquote>here's hhat i .oc't thick horks: ac ecete.ic s.stem that has
.oooae. ic the si.teecth eettr. ac. acother that has .oooae. ic the ciceteecth
eettr.. i'm tire. o. this .iscssioc o. ..italism ac. socaalism; he li.e ic the
thect.-.irst eettr.; he cee. ac ecete.ic s.stem that has .emoc.am as its
ooaer.iccic.s ac. ac ethical ceae." -michael moore</blockquote>

<p>which is rather impressive, coming from a computer program. If anyone wants
eternal fame, go ahead and take up the challenge to write a robust, generic
cipher-like-this solver. We can use it next year!
]]></description>
            <link>http://hardmath123.github.io/crypto.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/crypto.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sat, 08 Feb 2014 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Blown to Bitcoins]]></title>
            <description><![CDATA[<p>Bitcoin for Liberal Arts majors.</p>


<p>Bitcoin is a hard-core nerd thing. It was built by nerds, and was used by
nerds&mdash;until recently. <em>Normal</em> people have finally caught on to
this powerful new alternate currency (it became rather popular in black markets
when they realized purchases were untracable). And now a caf&eacute; a few
blocks from my home accepts bitcoins.

<p>So how do bitcoins work? How can something as fragile as money run
completely in the cloud? And why should the public trust us nerds, anyway?
Well, here's a short Bitcoin 101: Bitcoin for Liberal Arts Majors.

<p>The article is in three parts: how bitcoin transactions work, why it is
secure, and how bitcoins come to be in the first place.

<h3>The Whiteboard</h3>

<p>Let's assume that we have already, somehow, <q>created</q> some amount of
bitcoins, and distributed them among some people. We'll formally establish how
bitcoins come into being later. We can model the Bitcoin system as a large
whiteboard that anyone can see or write on (but not erase). Suppose Alice wants
to send Bob some bitcoins. She just writes an IOU on the whiteboard:

<blockquote style="font-family:cursive;">I, Alice, agree to send Bob a sum of 2
bitcoins.</blockquote>

<p>Since IOU is kind of childish, we nerds call it a <em>transaction</em>. Now
if Bob claims to have 2 bitcoins to pay Charlie, Charlie (or anyone else,
really) can take a look at the whiteboard and trace all of Bob's transactions.

<p>That's really it&mdash;Bitcoin is a large public whiteboard listing
transactions. Nobody keeps track of accounts or balances, because those can be
recalculated if needed. In reality, it's a bit more complicated. People all
over the world run a <em>Bitcoin Daemon</em>, which is connected to other
Bitcoin Daemons over the internet. Each transaction is sent to a daemon, which
then forwards it to others. The end result is that the whiteboard isn't
centralized, it's distributed across a network. It's more like Alice writes a
postcard to the nearest daemon, and the daemon forwards photocopies to its
neighbors.

<p>Compare this to a traditional paper currency system, where you have central
banks. Each transaction goes through a bank: the bank deducts money from the
sender's account and adds money to the recipient's account, possibly deducting
some as a fee. That puts the bank above other people. They can freeze accounts,
track people, or delay transactions for as long as they want. Bitcoin bypasses
this bank and makes transactions directly between people:
<em>peer-to-peer</em>.

<h3>The dotted line.</h3>

<p>If you've been paying attention, you may have noticed that since anyone can
write to the board, anyone can put up a transaction from Alice to himself.
Nobody knows who wrote that message. So Bob can easily write fake transactions
and get all of Alice's bitcoins. Which is a problem.

<p>The solution is called <strong>public key cryptography</strong>, a
remarkably snazzy trick. It relies on using certain clever mathematical
properties of really big numbers to encrypt data. This math is called
<strong>RSA</strong>, which are the initials of all three inventors (Rivest,
Shamir, and Adleman). We accept RSA as being the most secure option available,
but that's only because it hasn't been hacked yet. Conspiracy theorists do talk
about how the people at the NSA already have broken it.

<p>To get started, Alice picks a huge number (in practice, this is several
hundred digits worth of huge). She does some math with that number to get two
new numbers: her <em>public key</em> and <em>private key</em>. As expected, she
guards her private key with her life, but she is free to give out her public
key. Both of these look a lot like a cat started dancing on your keyboard: long
sequences of random-looking numbers and letters.

<p>Alice can now <em>sign</em> a message (piece of text) by applying some
mathematical transformations that depend on knowing her private key. Since
Alice keeps her private key a secret, only she can create a signed message. A
signed message can then be <em>verified</em> by applying a different set of
transformations which depend on the public key. If the message was signed with
the correct, matching private key, then the verifying transformations will give
a meaningful result.

<p>Let's say Alice wants to send Bob a bitcoin. Now all she has to do is create
a public statement which says:

<blockquote style="font-family:cursive;">I, [Alice's public key] agree to send
[Bob's public key] a sum of 2 bitcoins.</blockquote>

<p>She now signs this message and puts it up on the whiteboard. Charlie can
verify that the transaction is legitimately from Alice by checking it with
Alice's public key.

<p>Notice how this makes Alice and Bob anonymous. Neither Alice nor Bob are
mentioned, just their public keys. This is why Bitcoin doesn't need an account
or email address or registration. If she wanted to, Alice could make a new
public key for each transaction. In fact, Bitcoin encourages that.

<h3>Where do bitcoins come from?</h3>

<p>The short answer is that people get paid to run Bitcoin Daemons, because
daemons take up a lot of power. One of the more profitable daemons duns in
Reykjanesbaer, Iceland where the Arctic prevents the computers from physically
<em>melting</em> because of the huge computations (they also have cheap
geothermal power there).

<p>The long answer is a lot cooler. To really understand how it all works, you
need to know what a cryptographic hash function is.

<h3>Hashes&mdash;There, but not back again</h3>

<p>Paint is fun. You mix yellow and blue, and just like that you have green.
Kindergarten stuff. But what if you were presented with a brand new color, and
asked to name its constituents? You can't, without a lot of experimentation. So
mixing paint is a one-way road: it's easy to go from constituents to mixture,
but not the other way around.

<p>In Computer Science, we have something very similar, called
<strong>cryptographic hash functions</strong>. That's just a fancy word for
some operation that takes a number, and spits out another number, but it is
mathematically impossible to go the other way. This may be hard to believe, but
one example is taking the sum of the digits of a number: it's easy to find the
sum, but impossible to tell the original number given the sum of its digits.
Some common hash functions are <code>md5</code>, <code>SHA</code>, and
<code>RIPEM-D</code>.

<p>We already have standards in place to convert text to a large number and a
large number back to text using hexadecimal notation. So you can find a hash of
any piece of text, or any data (even an image or a video!).

<p>Hashes have two cool properties: they are unstable (so a small change in the
input produces a wildly different hash) and they are fixed-length (so any input
will generate a hash of the same size). Here are some hashes (pay attention to
the difference between the second and third!):

<table style="border-spacing: 20px;">
	<tr><th style="text-align:left;">Input</th><th style="text-align:left;">SHA-256</th></tr>
	<tr><td>banana</td><td style="font-family:monospace;">5a81483d96b0bc15ad19af7f5a662e14-b275729fbc05579b18513e7f550016b1</td></tr>
	<tr><td>Hello, World!</td><td style="font-family:monospace;">d6d0e133111615497a62e9f84e061a49-d106e90d90b7bc975790a84c8588fe80</td></tr>
	<tr><td>Hello, World </td><td style="font-family:monospace;">8663bab6d124806b9727f89bb4ab9db4-cbcc3862f6bbf22024dfa7212aa4ab7d</td></tr>
</table>

<h3>Blocks</h3>

<p>Anyway, back to Bitcoin. The giant stack of transactions is broken up into a
large number of sections called <strong>blocks</strong> that are chained
together. A block contains the following important information:

<ul>
	<li>The version of the software being used
	<li>A reference to the previous block
	<li>All the transactions, in order
	<li>The time
	<li>The <strong>target</strong> at that time (this is a number that Bitcoin provides)
	<li>A <strong>nonce</strong> (this is a number that has a very specific property)
</ul>

<p>A completed block has a <em>header</em>, which is a hash of all of these
elements smushed together in order. A bitcoin daemon's job is to try to
complete the current block by finding a <em>nonce</em> so that the header
obtained from the completed hash is less than the <em>target</em> (remember,
hashes are just numbers). This process is called <strong>mining
bitcoins</strong>.

<p>Since hashes are so unstable, it is pretty much impossible to work backwards
from the target to get a nonce. Instead, you have to guess a nonce, and see if
it works. Furthermore, a lot of transactions happen every second, so the same
nonce will return different hashes over time. So you can't really eliminate a
nonce either. It's just guessing again and again. More powerful computers
clearly have an advantage, which is why people use supercomputers to mine
bitcoins.

<p>You can find the current target at <a
href="http://blockchain.info/q/getdifficulty">BlockChain.info's API</a>. You
may find <a href="http://blockchain.info/q/probability">the current probability
of a nonce working</a> more interesting. At the time of writing, it is
approximately the probability of rolling a die 24 times and getting a 6 every
single time. The daemons automatically control the target so that on average,
each block is solved in 10 minutes. As computers get more powerful and more
people start competing in the bitcoin mining industry, we will be guessing many
more hashes per second and so the target will slowly decrease, reducing the
number of valid nonces.

<p>When you find a nonce, you get the power to tack on a new transaction that
doesn't have a sender, only a recipient. This new transaction adds bitcoins
into the system by rewarding the recipient with bitcoins. When bitcoin was
first launched, you got 50 bitcoins for solving a block. This number goes down
so that it halves every four years&mdash;as of today, it is exactly 25
bitcoins, which would today trade in the market at over $18,000 (you can find
the current trading value of bitcoin <a href="http://preev.com">here</a>). This
means that eventually, the bitcoin economy will stabilize at around 21,000,000
bitcoins in circulation and the new bitcoins added into the system will be
insignificant. The plan is to introduce a transaction fee to keep it going
beyond that point.

<h3>Recap!</h3>

<p>You've come a long way. From being an oblivious newbie, you now know the
internals of a rising cryptocurrency. You learned how bitcoin is a peer-to-peer
system with no central authority, which stores transactions rather than
accounts and balances. You learned how we use public key cryptography to verify
transactions by digitally signing each message with a private key, and checking
the message with the corresponding public key. Finally, you learned how bitcoin
mining works, by using the instability of cryptographic hash functions to
create a sort of computational lottery. Congratulations!

<p>Now you can explore the insides of bitcoin some more by viewing real live
data. Check out <a href="http://blockchain.info">blockchain.info</a>. This site
provides real-time information on each block. For example, we can <a
href="http://blockchain.info/block-index/123456">investigate block #123456</a>:
it looks like the nonce was <code>3794651987</code>, which produced a hash of
<span style="font-family:monospace;">0000 0000 0000 21a8 34fd 780d bd25 e43a
b565 b4e5 7a1f 7df0 435a c88e f982 a737</span>. See all those leading zeros?
That shows that the hash is a (relatively) small number (for example, 00029 is
clearly less than 42001). Scrolling down, the top transaction says "Newly
Generated Coins", and produced 50 bitcoins which went to public key
<code>1H54JGkh9TE5myxdamSNvm7zeFHnRWrVes</code>, who solved it.

<h3>Further reading</h3>

<p>I hope I got you excited about Bitcoin. The best thing to do now is to dive
right in. <a href="http://bitcoin.org/en/download">Download the "official"
Bitcoin Wallet</a> and start using it! Or <a
href="https://en.bitcoin.it/wiki/Clients">find another one</a> you may like.

<p>Finally, here are some links for you to keep on learning. See you soon!

<ul>
	<li><a href="http://www.youtube.com/watch?v=Um63OQz3bjo">Bitcoin's promotional YouTube video</a>
	<li><a href="https://en.bitcoin.it/wiki/Introduction">Bitcoin's own Wiki has a great introduction.</a>
	<li><a href="http://qz.com/154877/by-reading-this-page-you-are-mining-bitcoins/#/">Another great introduction from qz.com</a>
	<li><a href="https://github.com/bitcoin/bitcoin">If you're into code, view their Github repository where the real Bitcoin software lives</a>
	<li><a href="http://en.wikipedia.org/wiki/Bitcoin">Wikipedia: Intimidating introduction</a>
	<li><a href="http://en.wikipedia.org/wiki/Public-key_cryptography">Wikipedia: Public-key cryptography</a>
	<li><a href="http://en.wikipedia.org/wiki/Cryptographic_hash">Wikipedia: Cryptographic hash functions</a>
</ul>
]]></description>
            <link>http://hardmath123.github.io/bitcoin.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/bitcoin.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Mon, 30 Dec 2013 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Lampshades and Analytic Geometry]]></title>
            <description><![CDATA[<p>Exploring conic sections with lampshades, potatoes, and smoke simulations.</p>


<p class="dropcap">A couple of months ago, I was sitting at the dining table,
and I caught myself staring at the lamp. And I had just finished reading about
conics, so I immediately saw something awesome. Take a moment to think about
it. Do you see it?

<p><img src="static/hyperbolic_lamp.png" width=200 />

<p>I saw that the pattern on the wall was very special. It belongs to a class
of curves called <em>hyperbolas</em>. Let's see how that happens.

<p>To start off, how does that lamp create a pattern on the wall in the first
place? Well, one way to tackle this is to think about where the light is going.
What parts does the lampshade actually shade, and where is there light? A
clever trick here would be to get a smoke machine to create some smoke around
the lamp. You can see where the the light is going in the smoke. It's fun, like
a search beam (or the Batman sign).

<p>Unfortunately, they don't sell dry ice to minors (partly because you can do
really dangerous things with it, and partly because adults want to keep the fun
stuff to themselves), so I did the next best thing: overkill. I created a model
in Blender and simulated some smoke.

<blockquote><em>Sidenote: You haven't had a steep learning curve until you've
tried to do something trivial with Blender. All the important functions are
hidden away in various keystrokes, and there are all sorts of pitfalls all over
the place. It's an amazing technology made with absolutely no consideration for
beginners.</em></blockquote>

<p>Rants aside, here's my snazzy modern Blender lamp with a funky lampshade and
hardwood stem. Pretty, eh? It's just a sliced up cone (called a
<em>frustum</em>) with a really bright divinely ethereal halo placed inside. I
put a screen behind it to catch the projection.

<p><img src="static/conic-1.png"/>

<p>You can even see our mystery curve! Now let's blow around some smoke (easier
said than done; Blender's smoke simulation takes a lot of Googling to get
right).

<p><img src="static/conic-2.png"/>

<p>Hmm, that looks like a cone of light coming out the top&mdash;conics! The
cone kind of makes sense if you think about it (if it doesn't, think about how
a spotlight works). In fact, there are two cones; one shooting out the top and
an upside-down one shooting out the bottom. Together, they make a sort of
straight-lined hourglass shape.

<p>We want to find the nature of that curve, so we want to do some analytic
geometry. Let's say our double-cone hourglass of illumination is centered at
the origin. What equation describes a cone? Well, a cone is like several
circles of increasing (or decreasing) size stacked above each other (like a
pile of tires of different radii). For convenience, we can say that each
circle's radius is equal to it's height above the origin.

<p>The equation of a circle is ($x^2 + y^2 = r^2$), and if ($r = z$), we have
($x^2 + y^2 = z^2$). If we plug that into a graphing application, we get:

<p><img src="static/conic-3.png"/>

<p>Note that we're doing several simplifications here, most importantly the
width of the cone. We could have picked a narrower cone by squishing or
stretching our equation, but this one is easy to deal with.

<p>Now the screen: that's just a vertical plane. We describe that with ($x=c$)
for some constant ($c$) (let's pick 1 for simplicity).

<p>And now we can solve for the intersection: just substiture in ($x=1$) into
the first equation: \[ 1^2 + y^2 = z^2 \]

<p>Or, more canonically: \[ z^2 - y^2
= 1 \]

<p>Wolfram|Alpha <a
href="http://www.wolframalpha.com/input/?i=z%5E2-y%5E2+%3D+1">plots this</a>
for us.

<p>That looks perfect. This is indeed the equation of a hyperbola you find in
math textbooks (except simplified). So <strong>Result 1: When a vertical plane
slices a cone, the result is a <em>hyperbola</em>.</strong>

<h3>Thus emboldened, we experiment</h3>
<p>Now we get to ask the magic question: <q>what happens if&hellip;?</q>. In
particular, what would have happened if I had decided to play with the lamp and
knocked it over? When you tilt the lamp, is it still a hyperbola?

<p>Turns out, only to a point. Let's see how. When we tilt a plane, we go from
($x=c$) to ($z = mx + c$). Here, ($m$) is the inclination or slope of the plane
[insert your own inclined plane joke here], and ($c$) is how far it is from the
origin (once more, we'll let this be 1 without loss of generality). When we
substitute, we get:

\[ x^2 + y^2 = (mx+c)^2 = (mx + 1)^2 = m^2x^2 + 2mx + 1 \]
\[ y^2 + [(1-m^2)x^2 - 2mx] = 1 \]

<p>Now, the quadratic ($x^2$) term can either be positive, negative, or 0. If
it's negative, then ($m > 1$). Of course, we get a hyperbola when the ($x^2$)
term is negative (just like above). When ($ m > 1 $), the slope is steeper, or
closer to vertical.

<p>If it's positive, then ($m < 1$). We get an <strong>ellipse</strong> when
the ($x^2$) term is positive. When ($ m < 1 $), the slope is flatter, or closer
to horizontal. Notice how this plane will chop through just one of the cones,
but all the way through. So, intuitively, you should get a stretched circle.

<p>Ellipses show up all over the place. Planets orbit stars in ellipses (though
this truth cost some scientists their reputation, and in some cases, lives).

<p>Finally, that term can be 0 if ($m=1$). That means the plane is parallel to
the side of the cone. Think about how the intersection would look. It only
intersects one of the cones, but the intersection doesn't chop all the way
through like an ellipse. Removing that term gives us a quadratic equation, and
the resulting curve is called a <strong>parabola</strong>. Parabolas show up
when you're throwing things. Baseballs follow parabolic arcs in the air when
you throw them.

<p>There three curves are called the <em>conic sections</em>, and they are
plenty of fun to study.

<h3>Want more?</h3>
<ul>
	<li>Buy some potatoes, cut them into cones, and slice them for a while to convince yourself that I'm making some sense around here. Don't trust me.
	<li>Since the lampshade's top and bottom openings have different diameters, the top cone and bottom cones aren't necessarily the same, and so we don't necessarily have a perfectly symmetrical hyperbola. Find the unique point where you can place the light bulb in the lamp so that the cones are in fact the same.
	<li>You may have heard of the pencil-and-string way to build an ellipse. You can stick two pushpins into a piece of paper, and tie each end of a piece of string to one pushpin. Then trace the curve you get with a pencil by keeping the string taught&mdash;it's an ellipse! In other words, given a point on an ellipse, the sum of the distance to each pushpin is a constant. Each pushpin's position is called a <em>focus</em> of an ellipse. This is a perfectly valid definition of an ellipse.<br/>What is the corresponding definition for a hyporbola? If you're ambitious, try to get the equation of an ellipse given the above definition.
	<li>A parabola is the set of all points that are equidistant from a point and a <em>line</em> (the distance from a point to a line is the length of the perpendicular segment from the point to the line). Can you prove this?
	<li>Without graphing or drawing or anything, try to imagine what happens to a hyperbola as you keep on zooming out. What does it look like?<br/>You get a pair of intersecting lines called the <em>asymptotes</em>. What are the equations of the asymptotes of ($y^2 - x^2 = 1$)?
</ul>
<p>P.S. The lesson here wasn't about conic sections. The lesson here was that
there is really cool math in <em>everything</em>. Even lampshades. And you
gotta grok math to see them.

<br/><br/>Cheers,<br/>Hardmath123
]]></description>
            <link>http://hardmath123.github.io/conics.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/conics.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sun, 08 Dec 2013 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Living Without Sudo]]></title>
            <description><![CDATA[<p>UNIX hacking for the faint at heart, or those blessed with mean sysadmins.</p>


<p class="dropcap">You should not trust me with matches, knives, expensive
cars, and <code>sudo</code>: the command that makes you a god-like user with
root powers. I'm the kind of person who accidentally <code>rm -rf</code>'s his
<em>Desktop</em> (by the way, the sporadically disappearing icons are both
hilarious and mortifying). So whenever I'm asked to <code>sudo</code>
something, I get both worried and suspicious. And over the years, I have
perfected the art of installing things without <code>sudo</code>. You can
follow along this tutorial with just a shell.

<h3>Why sudo?</h3>

<p>The first thing to realize here is that 99% of the time, the only reason we
need to use <code>sudo</code> is to make that program accessible to everyone.
That's it. When you run a UNIX program, you're saying <q>execute this file</q>;
and when you <code>sudo</code> you essentially say <q>everyone can access this
file from everywhere</q>.

<p>For example, suppose I want to install a program called <code>easy</code>
that acts like the classic Staples Easy Button and executes <code>say that was
easy</code> (I actually do have this on my computer, and yes, I use it a lot).
It's not too tough:

<pre><code>echo "say that was easy" > ~/Desktop/easy # create the file "easy" with our contents
chmod +x ~/Desktop/easy # tell your computer that it's ok to execute this file
~/Desktop/easy # run it!
</code></pre>

<p>Now I can run my script by typing <code>~/Desktop/easy</code>. But I don't
want to have to type that huge thing each time I do something awesome&mdash;I
want <code>easy</code> to be one-step executable just like <code>vim</code>.
This is where <code>sudo</code> comes in.

<p>Bash reads a variable called <code>$PATH</code>, which contains a list of
various directories separated by colons. When you type a command on the shell,
Bash searches each of these directories for that file, one by one. You can see
this list right now with <code>echo $PATH</code>. These directories contain
important system files, and are accessible by everyone. So it makes sense not
to let mortals like me to mess with them. When you install a package, most of
the time you're just moving the script files to one of these directories so
it's easy to run, and Bash asks you for <code>sudo</code> to make sure you know
what you're doing.

<h3>.profile</h3>

<p>If we could tack on our own directory to the <code>$PATH</code>, we could
dump our junk in there without messing with anything sudo-ey, right? Right. To
modify <code>$PATH</code>, you need another UNIX trick: a file called
<code>~/.profile</code>.

<p><code>.profile</code> is another script file that's executed before your
shell loads, so that you can customize it. The dot in front makes it invisible
to Finder, so you can only mess with it using a shell. You can do all sorts of
neat things with <code>.profile</code>: print a friendly message on top of the
Terminal when you start it up, customize your prompt, and mess with your
<code>$PATH</code>.

<p>Since it's a hidden file, you should create it using the command line:

<pre><code>cd ~/ # go to your home directory
touch .profile # create the file
open -a TextEdit .profile # open with TextEdit (you can also use pico/vim/emacs)</code></pre>

&hellip;and you should have TextEdit open up with a blank
<code>.profile</code>. Now we can create our new <code>$PATH</code> by tacking
on <code>~/my_bin</code> to it. Add the following to the <code>.profile</code>:
<code>export PATH=$PATH:~/my_bin</code>. Save, and quit; and then refresh your
Terminal (you can just close this window and open a new one). This forces the
profile to be run. If you want a sanity check, try <code>echo $PATH</code> and
see if it changed from last time.

<p>We just told Bash that <code>~/my_bin</code> contains executable files. We
have <em>not</em> created that directory yet, so let's got do that: <code>mkdir
my_bin</code>. And, just for fun, dump <code>easy</code> in there.

<p>Now you can test it out: type <code>easy</code>. If all went well, there
shouldn't be any errors. (If something exploded, feel free to drop a comment
below.)

<h3>Using your powers.</h3>

<p>That's actually all you need. To install a package, download it and look for
its binaries (they will probably in a directory called <code>bin</code>). Alias
the commands you care about to <code>~/my_bin</code>. And then have fun.

<p>If you use Python, you may want to add the following line to your profile:
<code>export PYTHONPATH=$PYTHONPATH:~/my_bin/</code>. This lets you simply copy
Python modules to your <code>~/my_bin</code>. Also take a look at `virtualenv`. 

<p>On a Mac, it's worth installing Homebrew this way&mdash;almost everything
works when locally compiled with it.

<p>Some packages need configuration files to work right from a foreign
directory. For example, <code>npm</code> needs you to create
<code>.npmrc</code> and add a <em>prefix</em>, or the directory which you want
to isolate all node stuff in. Mine simply reads <code>prefix =
"~/my_bin/node_stuff"</code>.

<p>Finally: if you mess up your profile, you may have unpleasantries with your
terminal (what if you accidentally clear your <code>$PATH</code>? Bash won't
find any executables whatsoever&hellip;). To fix this, always remember that you
can reference a command from its full path. Your last resort should be
<code>/usr/bin/rm ~/.profile</code>, which will wipe out the profile file, and let
you start fresh.

<p>Good luck, and hack on!
]]></description>
            <link>http://hardmath123.github.io/sudo.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/sudo.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Fri, 29 Nov 2013 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Hello, World!]]></title>
            <description><![CDATA[<p>Welcoming myself to my blog.</p>


<p class="dropcap">I started on Comfortably Numbered a couple of months ago,
because I needed a blog. I needed a blog to dump interesting thoughts and I
wanted a place besides GitHub to show off projects. I wanted, for once, to
write industrial-strength code that would face <em>real people</em> instead of
fellow hackers. When you write code for a hacker, you write the bare minimum
for it to work. So I ended up obsessing insanely about the design, typography,
and optimization of this site. Pretty much everything except the content.

<p>I thought I'd present a cool non-trivial Hello, World program here. But all
the cool languages have really boring Hello, Worlds, and I have a natural
revulsion to a language whose most basic Hello, World is more than a line
long&mdash;C variants, Java, etc. So here's an assortment of my favorite Hello,
World programs.

<pre><code>echo 'print "console.log(\"print \\\"echo Hello, World\\\"\")"' | ruby | node | python | bash</code></pre>

<p>Here's a merry (pure) CSS3D welcome. It's essentially just a bunch of
animations with 3D transforms, but the end result is pretty impressive. It's
also overkill, which is the <s>best</s> only way to show off.

<style>
#hw {
  text-align: center;
  font-weight: 900;
  font-size: 40px;
  touch-callout: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -khtml-user-select: none;
}

#hw span {
  color: #aaa;
  display: inline-block;
  width: 30px;
  margin: 0;
  padding: 0;
  height: 50px;
  text-shadow: 0 0 3px #aaf;
  -webkit-animation-duration: 2s;
  animation-duration: 2s;
  -webkit-animation-iteration-count: infinite;
  animation-iteration-count: infinite;
  -ms-transform-origin: 0 0 100px;
  -webkit-transform-origin: 0 0 100px;
  transform-origin: 0 0 100px;
}

#hw span:nth-child(8n) {
  -webkit-animation-name: rot0;
  animation-name: rot0;
}

#hw span:nth-child(8n+1) {
  -webkit-animation-name: rot1;
  animation-name: rot1;
}

#hw span:nth-child(8n+2) {
  -webkit-animation-name: rot2;
  animation-name: rot2;
}

#hw span:nth-child(8n+3) {
  -webkit-animation-name: rot3;
  animation-name: rot3;
}

#hw span:nth-child(8n+4) {
  -webkit-animation-name: rot4;
  animation-name: rot4;
}

#hw span:nth-child(8n+5) {
  -webkit-animation-name: rot5;
  animation-name: rot5;
}

#hw span:nth-child(8n+6) {
  -webkit-animation-name: rot6;
  animation-name: rot6;
}

#hw span:nth-child(8n+7) {
  -webkit-animation-name: rot7;
  animation-name: rot7;
}

@-webkit-keyframes rot0 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg);
    transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg);
  }
}

@keyframes rot0 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg);
    -ms-transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg);
    transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg);
  }
}

@-webkit-keyframes rot1 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(360deg) rotateZ(-360deg);
    transform: rotateX(360deg) rotateY(360deg) rotateZ(-360deg);
  }
}

@keyframes rot1 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(360deg) rotateZ(-360deg);
    -ms-transform: rotateX(360deg) rotateY(360deg) rotateZ(-360deg);
    transform: rotateX(360deg) rotateY(360deg) rotateZ(-360deg);
  }
}

@-webkit-keyframes rot2 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(-360deg) rotateZ(360deg);
    transform: rotateX(360deg) rotateY(-360deg) rotateZ(360deg);
  }
}

@keyframes rot2 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(-360deg) rotateZ(360deg);
    -ms-transform: rotateX(360deg) rotateY(-360deg) rotateZ(360deg);
    transform: rotateX(360deg) rotateY(-360deg) rotateZ(360deg);
  }
}

@-webkit-keyframes rot3 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(-360deg) rotateZ(-360deg);
    transform: rotateX(360deg) rotateY(-360deg) rotateZ(-360deg);
  }
}

@keyframes rot3 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(-360deg) rotateZ(-360deg);
    -ms-transform: rotateX(360deg) rotateY(-360deg) rotateZ(-360deg);
    transform: rotateX(360deg) rotateY(-360deg) rotateZ(-360deg);
  }
}

@-webkit-keyframes rot4 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(360deg) rotateZ(360deg);
    transform: rotateX(-360deg) rotateY(360deg) rotateZ(360deg);
  }
}

@keyframes rot4 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(360deg) rotateZ(360deg);
    -ms-transform: rotateX(-360deg) rotateY(360deg) rotateZ(360deg);
    transform: rotateX(-360deg) rotateY(360deg) rotateZ(360deg);
  }
}

@-webkit-keyframes rot5 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(360deg) rotateZ(-360deg);
    transform: rotateX(-360deg) rotateY(360deg) rotateZ(-360deg);
  }
}

@keyframes rot5 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(360deg) rotateZ(-360deg);
    -ms-transform: rotateX(-360deg) rotateY(360deg) rotateZ(-360deg);
    transform: rotateX(-360deg) rotateY(360deg) rotateZ(-360deg);
  }
}

@-webkit-keyframes rot6 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(-360deg) rotateZ(360deg);
    transform: rotateX(-360deg) rotateY(-360deg) rotateZ(360deg);
  }
}

@keyframes rot6 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(-360deg) rotateZ(360deg);
    -ms-transform: rotateX(-360deg) rotateY(-360deg) rotateZ(360deg);
    transform: rotateX(-360deg) rotateY(-360deg) rotateZ(360deg);
  }
}

@-webkit-keyframes rot7 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(-360deg) rotateZ(-360deg);
    transform: rotateX(-360deg) rotateY(-360deg) rotateZ(-360deg);
  }
}

@keyframes rot7 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(-360deg) rotateZ(-360deg);
    -ms-transform: rotateX(-360deg) rotateY(-360deg) rotateZ(-360deg);
    transform: rotateX(-360deg) rotateY(-360deg) rotateZ(-360deg);
  }
}
</style>

<div id="hw">
	<span id="hw-1">H</span>
	<span id="hw-2">e</span>
	<span id="hw-3">l</span>
	<span id="hw-4">l</span>
	<span id="hw-5">o</span>
	<span id="hw-6">,</span>
	<span id="hw-7"> </span>
	<span id="hw-8">w</span>
	<span id="hw-9">o</span>
	<span id="hw-10">r</span>
	<span id="hw-11">l</span>
	<span id="hw-12">d</span>
</div>

<p>While we're feeling masochistic, here's Hello, World in Malbolge (the first
working Malbolge program took 2 years and a LISP program to find, so don't feel
too bad if you don't get it right away):

<pre class="language-plaintext"><code>(&#039;&amp;%:9]!~}|z2Vxwv-,POqponl$Hjig%eB@@&gt;}=&lt;M:9wv6WsU2T|nm-,jcL(I&amp;%$#&quot;
`CB]V?Tx&lt;uVtT`Rpo3NlF.Jh++FdbCBA@?]!~|4XzyTT43Qsqq(Lnmkj&quot;Fhg${z@&gt;</code></pre>


<p>If you're on a Mac, it's always nice to hear a human voice (or a reasonable
approximation thereof). The <code>say</code> command is a very easy way to
annoy your sysadmin. Try putting a <code>say</code> command in a shared
computer's <code>.profile</code>&mdash;perhaps along the lines of <q>Where have
you hidden the body?</q>.

<pre class="language-bash"><code>$ say -v Zarvox "Hello, World"</code></pre>

<p>Piet's Hello, World is pretty, self-referential, and a nice avatar for the
aspiring esolang geek.

<p><img src="http://www.dangermouse.net/esoteric/piet/hw6_big.png"/>

<p>I'd post a Hello, World program in Whitespace, but I decided to save myself
the effort and dump an empty box below. Use your imagination.

<pre class="language-plaintext" style="height:300px;"><code></code></pre>

<p>The following is a Hello, World program. Honest.
<pre class="language-plaintext">
<code>
Romeo, a young man with a remarkable patience.
Juliet, a likewise young woman of remarkable grace.
Ophelia, a remarkable woman much in dispute with Hamlet.
Hamlet, the flatterer of Andersen Insulting A/S.

                   Act I: Hamlet's insults and flattery.
                   Scene I: The insulting of Romeo.
[Enter Hamlet and Romeo]
Hamlet:
You lying stupid fatherless big smelly half-witted coward! You are as
stupid as the difference between a handsome rich brave hero and thyself!
Speak your mind!
You are as brave as the sum of your fat little stuffed misused dusty
old rotten codpiece and a beautiful fair warm peaceful sunny summer's
day. You are as healthy as the difference between the sum of the
sweetest reddest rose and my father and yourself! Speak your mind!
You are as cowardly as the sum of yourself and the difference
between a big mighty proud kingdom and a horse. Speak your mind.
Speak your mind!
[Exit Romeo]
                   Scene II: The praising of Juliet.
[Enter Juliet]
Hamlet:
Thou art as sweet as the sum of the sum of Romeo and his horse and his
black cat! Speak thy mind!
[Exit Juliet]
                   Scene III: The praising of Ophelia.
[Enter Ophelia]
Hamlet:
Thou art as lovely as the product of a large rural town and my amazing
bottomless embroidered purse. Speak thy mind!
Thou art as loving as the product of the bluest clearest sweetest sky
and the sum of a squirrel and a white horse. Thou art as beautiful as
the difference between Juliet and thyself. Speak thy mind!
[Exeunt Ophelia and Hamlet]

                   Act II: Behind Hamlet's back.
                   Scene I: Romeo and Juliet's conversation.
[Enter Romeo and Juliet]
Romeo:
Speak your mind. You are as worried as the sum of yourself and the
difference between my small smooth hamster and my nose. Speak your
mind!
Juliet:
Speak YOUR mind! You are as bad as Hamlet! You are as small as the
difference between the square of the difference between my little pony
and your big hairy hound and the cube of your sorry little
codpiece. Speak your mind!
[Exit Romeo]
                   Scene II: Juliet and Ophelia's conversation.
[Enter Ophelia]
Juliet:
Thou art as good as the quotient between Romeo and the sum of a small
furry animal and a leech. Speak your mind!
Ophelia:
Thou art as disgusting as the quotient between Romeo and twice the
difference between a mistletoe and an oozing infected blister! Speak
your mind!
[Exeunt]</code></pre>

<p>And finally, FiM++ looks like an average letter to Grandma:

<pre class="language-plaintext"><code>Dear Princess Celestia:Hello World!

Today I learned how to say hello world!
I said "Hello, World!"!
That's all about how to say hello world.

Your faithful student, Kyli Rouge.</code></pre>

<p>(Other people, however, write their letters in LOLCODE.)
<pre class="language-plaintext"><code>HAI
CAN HAS STDIO?
VISIBLE "HAI WORLD!"
KTHXBYE</code></pre>
]]></description>
            <link>http://hardmath123.github.io/hw.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/hw.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Wed, 27 Nov 2013 08:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>